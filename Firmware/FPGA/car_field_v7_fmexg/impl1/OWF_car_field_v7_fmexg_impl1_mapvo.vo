
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.10.0.111.2

// ldbanno -n Verilog -o OWF_car_field_v7_fmexg_impl1_mapvo.vo -w -neg -gui -msgset /home/hari/Documents/osp-wearable-fpga/car_field_v7_fmexg/promote.xml OWF_car_field_v7_fmexg_impl1_map.ncd 
// Netlist created on Fri Nov 15 13:10:28 2019
// Netlist written on Fri Nov 15 13:10:29 2019
// Design is for device LCMXO3LF-6900C
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module tl_car_field ( ext_clk_in, l_lvds_io, r_lvds_io, i2s1_sck, i2s1_ws, 
                      i2s1_d0, i2s2_sck, i2s2_ws, i2s2_d0, i2s2_d1, spi1_clk, 
                      spi1_mosi, spi1_miso, spi1_cs0, spi1_cs2, spi3_clk, 
                      spi3_mosi, spi3_miso, spi3_cs0, spi3_cs3, spi4_clk, 
                      spi4_mosi, spi4_miso, spi4_cs, adc_clk, adc_pdwn, 
                      adc_data, adc_interrupt, fmexg_mic_sync, volplus_mute, 
                      led4_muteout, test_l1, test_l2, test_m1, test_m2 );
  input  ext_clk_in, i2s1_d0, spi1_clk, spi1_mosi, spi1_cs0, spi1_cs2, 
         spi3_clk, spi3_mosi, spi3_cs0, spi3_cs3, spi4_clk, spi4_mosi, spi4_cs;
  input  [11:0] adc_data;
  input  fmexg_mic_sync, volplus_mute;
  output i2s1_sck, i2s1_ws, i2s2_sck, i2s2_ws, i2s2_d0, i2s2_d1, spi1_miso, 
         spi3_miso, spi4_miso, adc_clk, adc_pdwn, adc_interrupt, led4_muteout, 
         test_l1, test_l2, test_m1, test_m2;
  inout  l_lvds_io, r_lvds_io;
  wire   \mute_debounce_counter[0] , \mute_debounce_counter_s[0] , test_l1_c, 
         \mute_debounce_counter_cry[0] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr[4] , seq_reset_i, 
         \l_car_core/e_i2s_dio/lvds_bit_ctr[3] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_s[4] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_s[3] , un2_divider, hr_clk_0, 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_cry[2] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr[2] , i2s_sck, 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_s[2] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_s[1] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_cry[0] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr[0] , 
         \l_car_core/e_i2s_dio/lvds_bit_ctr_s[0] , 
         \e_fmexg_core/rampcounter[11] , \e_fmexg_core/rampcounter_s[11] , 
         \e_fmexg_core/counter_div12_RNIE2LQ1[1] , 
         \e_fmexg_core/rampcounter_cry[10] , \e_fmexg_core/rampcounter[10] , 
         \e_fmexg_core/rampcounter[9] , \e_fmexg_core/rampcounter_s[10] , 
         \e_fmexg_core/rampcounter_s[9] , \e_fmexg_core/rampcounter_cry[8] , 
         \e_fmexg_core/rampcounter[8] , \e_fmexg_core/rampcounter[7] , 
         \e_fmexg_core/rampcounter_s[8] , \e_fmexg_core/rampcounter_s[7] , 
         \e_fmexg_core/rampcounter_cry[6] , \e_fmexg_core/rampcounter[6] , 
         \e_fmexg_core/rampcounter[5] , \e_fmexg_core/rampcounter_s[6] , 
         \e_fmexg_core/rampcounter_s[5] , \e_fmexg_core/rampcounter_cry[4] , 
         \e_fmexg_core/rampcounter[4] , \e_fmexg_core/rampcounter[3] , 
         \e_fmexg_core/rampcounter_s[4] , \e_fmexg_core/rampcounter_s[3] , 
         \e_fmexg_core/rampcounter_cry[2] , \e_fmexg_core/rampcounter[2] , 
         \e_fmexg_core/rampcounter[1] , \e_fmexg_core/rampcounter_s[2] , 
         \e_fmexg_core/rampcounter_s[1] , \e_fmexg_core/rampcounter_cry[0] , 
         \e_fmexg_core/rampcounter[0] , \e_fmexg_core/rampcounter_s[0] , 
         i2s_ws, \e_car_clock_gen/lvds_ctr_s[7] , 
         \e_car_clock_gen/lvds_ctr_cry[6] , \e_car_clock_gen/lvds_ctr[6] , 
         \e_car_clock_gen/lvds_ctr[5] , \e_car_clock_gen/lvds_ctr_s[6] , 
         \e_car_clock_gen/lvds_ctr_s[5] , \e_car_clock_gen/lvds_ctr_cry[4] , 
         \e_car_clock_gen/lvds_ctr[4] , \e_car_clock_gen/lvds_ctr[3] , 
         \e_car_clock_gen/lvds_ctr_s[4] , \e_car_clock_gen/lvds_ctr_s[3] , 
         \e_car_clock_gen/lvds_ctr_cry[2] , \e_car_clock_gen/lvds_ctr[2] , 
         \e_car_clock_gen/lvds_ctr[1] , \e_car_clock_gen/lvds_ctr_s[2] , 
         \e_car_clock_gen/lvds_ctr_s[1] , \e_car_clock_gen/lvds_ctr_cry[0] , 
         \e_car_clock_gen/lvds_ctr[0] , \e_car_clock_gen/lvds_ctr_s[0] , 
         \mute_debounce_counter[16] , \mute_debounce_counter[15] , 
         \mute_debounce_counter_s[16] , \mute_debounce_counter_s[15] , 
         \mute_debounce_counter_cry[14] , \mute_debounce_counter[14] , 
         \mute_debounce_counter[13] , \mute_debounce_counter_s[14] , 
         \mute_debounce_counter_s[13] , \mute_debounce_counter_cry[12] , 
         \mute_debounce_counter[12] , \mute_debounce_counter[11] , 
         \mute_debounce_counter_s[12] , \mute_debounce_counter_s[11] , 
         \mute_debounce_counter_cry[10] , \mute_debounce_counter[10] , 
         \mute_debounce_counter[9] , \mute_debounce_counter_s[10] , 
         \mute_debounce_counter_s[9] , \mute_debounce_counter_cry[8] , 
         \mute_debounce_counter[8] , \mute_debounce_counter[7] , 
         \mute_debounce_counter_s[8] , \mute_debounce_counter_s[7] , 
         \mute_debounce_counter_cry[6] , \mute_debounce_counter[6] , 
         \mute_debounce_counter[5] , \mute_debounce_counter_s[6] , 
         \mute_debounce_counter_s[5] , \mute_debounce_counter_cry[4] , 
         \mute_debounce_counter[4] , \mute_debounce_counter[3] , 
         \mute_debounce_counter_s[4] , \mute_debounce_counter_s[3] , 
         \mute_debounce_counter_cry[2] , \mute_debounce_counter[2] , 
         \mute_debounce_counter[1] , \mute_debounce_counter_s[2] , 
         \mute_debounce_counter_s[1] , \e_car_clock_gen.divider[1] , 
         \e_car_clock_gen.divider[0] , \e_car_clock_gen.divider_0[1] , 
         \e_car_clock_gen/divider_i[0] , \e_car_clock_gen/un15_lvds_ctr_1 , 
         \e_car_clock_gen/un15_lvds_ctr , G_82, \e_car_clock_gen/seq_reset , 
         \e_fmexg_core/counter_div12[2] , \e_fmexg_core/counter_div12[1] , 
         \e_fmexg_core/counter_div12[0] , \e_fmexg_core/clkdiv12 , 
         \e_fmexg_core/clkdiv12_0 , \e_fmexg_core/counter_div12_3[1] , 
         \e_fmexg_core/counter_div12_i[0] , \e_fmexg_core/counter_div12_3[2] , 
         \e_fmexg_core.clkdiv12_i , \e_fmexg_core/spi_byte_ctr[1] , 
         \e_fmexg_core/spi_byte_ctr[0] , \e_fmexg_core/spi_bit_ctr[2] , 
         \e_fmexg_core/spi_bit_ctr[1] , \e_fmexg_core/un6_spi_cs , spi4_cs_c, 
         spi4_clk_c, \e_fmexg_core/fifo_readclk_en , 
         \e_fmexg_core/spi_bit_ctr[0] , \e_fmexg_core/spi_bit_ctr_RNO[1] , 
         \e_fmexg_core/spi_bit_ctr_i[0] , \e_fmexg_core/spi_bit_ctr_RNO[2] , 
         \e_fmexg_core/un15_spi_cs_1 , \e_fmexg_core/spi_byte_ctr_0_sqmuxa_1 , 
         \e_fmexg_core/spi_byte_ctr_5[1] , \e_fmexg_core/spi_byte_ctr_RNO[0] , 
         \e_fmexg_core/un15_spi_cs , \e_fmexg_core/two_samples[3] , 
         \e_fmexg_core/first_sample[5] , \e_fmexg_core/two_samples[2] , 
         \e_fmexg_core/first_sample[6] , \e_fmexg_core/two_samples_3[2] , 
         \e_fmexg_core/two_samples_3[1] , \e_fmexg_core/two_samples[1] , 
         \e_fmexg_core/two_samples[5] , \e_fmexg_core/first_sample[3] , 
         \e_fmexg_core/two_samples[4] , \e_fmexg_core/first_sample[4] , 
         \e_fmexg_core/two_samples_3[4] , \e_fmexg_core/two_samples_3[3] , 
         \e_fmexg_core/two_samples[7] , \e_fmexg_core/first_sample[1] , 
         \e_fmexg_core/two_samples[6] , \e_fmexg_core/first_sample[2] , 
         \e_fmexg_core/two_samples_3[6] , \e_fmexg_core/two_samples_3[5] , 
         \e_fmexg_core/two_samples[9] , \e_fmexg_core/fifo_Q[3] , 
         \e_fmexg_core/two_samples[8] , \e_fmexg_core/first_sample[0] , 
         \e_fmexg_core/two_samples_3[8] , \e_fmexg_core/two_samples_3[7] , 
         \e_fmexg_core/two_samples[11] , \e_fmexg_core/fifo_Q[1] , 
         \e_fmexg_core/two_samples[10] , \e_fmexg_core/fifo_Q[2] , 
         \e_fmexg_core/two_samples_3[10] , \e_fmexg_core/two_samples_3[9] , 
         \e_fmexg_core/two_samples[13] , \e_fmexg_core/first_sample[11] , 
         \e_fmexg_core/two_samples[12] , \e_fmexg_core/fifo_Q[0] , 
         \e_fmexg_core/two_samples_3[12] , \e_fmexg_core/two_samples_3[11] , 
         \e_fmexg_core/two_samples[15] , \e_fmexg_core/first_sample[9] , 
         \e_fmexg_core/two_samples[14] , \e_fmexg_core/first_sample[10] , 
         \e_fmexg_core/two_samples_3[14] , \e_fmexg_core/two_samples_3[13] , 
         \e_fmexg_core/two_samples[17] , \e_fmexg_core/fifo_Q[11] , 
         \e_fmexg_core/two_samples[16] , \e_fmexg_core/first_sample[8] , 
         \e_fmexg_core/two_samples_3[16] , \e_fmexg_core/two_samples_3[15] , 
         \e_fmexg_core/two_samples[19] , \e_fmexg_core/fifo_Q[9] , 
         \e_fmexg_core/two_samples[18] , \e_fmexg_core/fifo_Q[10] , 
         \e_fmexg_core/two_samples_3[18] , \e_fmexg_core/two_samples_3[17] , 
         \e_fmexg_core/two_samples[21] , \e_fmexg_core/fifo_Q[7] , 
         \e_fmexg_core/two_samples[20] , \e_fmexg_core/fifo_Q[8] , 
         \e_fmexg_core/two_samples_3[20] , \e_fmexg_core/two_samples_3[19] , 
         \e_fmexg_core/two_samples[23] , \e_fmexg_core/fifo_Q[5] , 
         \e_fmexg_core/two_samples[22] , \e_fmexg_core/fifo_Q[6] , 
         \e_fmexg_core/two_samples_3[22] , \e_fmexg_core/two_samples_3[21] , 
         \e_fmexg_core/fifo_Q[4] , \e_fmexg_core/two_samples_3[23] , 
         \l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q , 
         \l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q , 
         \l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q , 
         \l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q , 
         \l_car_core/e_car_sequencer/lvdscounter[0] , 
         \l_car_core/e_car_sequencer/N_56 , 
         \l_car_core/e_car_sequencer/un63_djb_present_0 , 
         \l_car_core.e_car_sequencer.lvds_io_tri_enable_i , 
         \l_car_core/e_i2s_dio/un10_lvds_bit_ctr_1 , 
         \l_car_core/e_i2s_dio/un10_lvds_bit_ctr , 
         \l_car_core.e_i2s_dio.cycle_begin , \r_car_core/i2s_mic_ld , 
         \l_car_core/e_car_sequencer/lvdscounter_RNO_0[0] , 
         \r_car_core/e_i2s_dio/reg_cnv_0[0] , 
         \l_car_core/e_car_sequencer/un12_djb_present_0[31] , 
         \l_car_core/e_car_sequencer/lvdscounter[1] , spi1_cs2_c, spi1_cs0_c, 
         \l_car_core/e_car_sequencer/un12_djb_present_0[30] , N_54_i, 
         \l_car_core/e_car_sequencer/lvdscounter[2] , 
         \l_car_core/e_car_sequencer/lvdscounter[4] , 
         \l_car_core/e_car_sequencer/djb_got16_cnv_0_0 , 
         \l_car_core/e_car_sequencer/un12_djb_present_0[29] , 
         \l_car_core/e_car_sequencer/djb_present_RNO , 
         \l_car_core/e_car_sequencer/lvdscounter[3] , 
         \l_car_core/e_car_sequencer/un12_djb_present_c2 , 
         \l_car_core/e_car_sequencer/un12_djb_present_0[28] , 
         \l_car_core/e_car_sequencer/un12_djb_present_ac0_7 , 
         \l_car_core/e_car_sequencer/un12_djb_present[27] , 
         \l_car_core/e_i2s_dio/un17_lvds_bit_ctr , 
         \l_car_core/e_i2s_dio/i2s_in_shiften , 
         \l_car_core/e_i2s_dio/i2s_out_shiften , \l_car_core/i2s_spkr_ld , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[0] , 
         \l_car_core.e_i2s_dio.in_3[1] , \l_car_core.e_i2s_dio.in_3[0] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[1] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[2] , 
         \l_car_core.e_i2s_dio.in_3[3] , \l_car_core.e_i2s_dio.in_3[2] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[3] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[4] , 
         \l_car_core.e_i2s_dio.in_3[5] , \l_car_core.e_i2s_dio.in_3[4] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[5] , 
         \l_car_core.e_i2s_dio.in_3[6] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf[6] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[0] , 
         \l_car_core/e_i2s_dio/out_3[1] , \l_car_core/e_i2s_dio/out_3[0] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] , \buf_cnv_0[0] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[1] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[2] , 
         \l_car_core/e_i2s_dio/out_3[3] , \l_car_core/e_i2s_dio/out_3[2] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[3] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[4] , 
         \l_car_core/e_i2s_dio/out_3[5] , \l_car_core/e_i2s_dio/out_3[4] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[5] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf[6] , 
         \l_car_core/e_i2s_dio/out_3[7] , \l_car_core/e_i2s_dio/out_3[6] , 
         \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] , 
         \l_car_core.e_i2s_dio.out_i2s_sr.buf_4[7] , l_lvds_io_in, 
         fmexg_mic_sync_c, test_m2_c, 
         \l_car_core/e_car_sequencer/i2s_mic_dat_3_i_0 , 
         \l_car_core/e_car_sequencer/N_34_i , 
         \l_car_core/e_car_sequencer/N_26_i , \l_car_core/i2s_mic_dat , 
         \l_car_core/e_car_sequencer/djb_got169_0_a2 , 
         \l_car_core/e_car_sequencer/i2s_mic_ld_1 , \l_car_core/i2s_mic_ld , 
         \l_car_core/e_car_sequencer/N_28_i , \l_car_core/i2s_mic_sh , 
         \l_car_core.e_i2s_dio.in_3[7] , 
         \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] , \l_car_core/i2s_spkr_dat , 
         \l_car_core/e_car_sequencer/N_68 , 
         \l_car_core/e_car_sequencer/i2s_spkr_ld_2 , 
         \l_car_core/e_car_sequencer/N_19 , 
         \l_car_core/e_car_sequencer/N_53_i , \l_car_core/i2s_spkr_sh , 
         \op_and.op_and.result_12 , \op_and.op_and.result_11 , 
         \op_and.op_and.result_10 , \op_and.op_and.result_9 , 
         mute_btn_internal, \op_and.op_and.result , volplus_mute_c, 
         led4_muteout_c, muted_RNO, 
         \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 , 
         \l_car_core/e_car_sequencer/i2s_spkr_sh_2_i , 
         \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 , 
         \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 , 
         \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0 , lvds_io_1, 
         \r_car_core/i2s_spkr_dat , 
         \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0_0 , 
         \r_car_core/e_car_sequencer/N_18 , 
         \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 , 
         \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 , 
         \r_car_core/e_car_sequencer/N_36 , \r_car_core/e_car_sequencer/N_35 , 
         \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 , lvds_io_1_0, 
         \r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 , 
         \r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 , 
         \r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 , 
         \r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 , 
         \r_car_core/e_car_sequencer/lvdscounter[0] , 
         \r_car_core/e_car_sequencer/un63_djb_present_0_0 , 
         \r_car_core.e_car_sequencer.lvds_io_tri_enable_i , r_lvds_io_in, 
         \r_car_core.e_car_sequencer.djb_got16 , 
         \r_car_core/e_car_sequencer/un2_djb_got16_0 , 
         \r_car_core/e_car_sequencer/djb_present_RNO_0 , 
         \r_car_core/e_car_sequencer/djb_present , \r_car_core/i2s_spkr_ld , 
         \r_car_core/i2s_spkr_sh , 
         \r_car_core/e_car_sequencer/lvdscounter_RNO[0] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] , 
         \r_car_core/e_car_sequencer/un12_djb_present_0[31] , 
         \r_car_core/e_car_sequencer/lvdscounter[1] , 
         \r_car_core/e_car_sequencer/un12_djb_present_0[30] , 
         \r_car_core/e_car_sequencer/lvdscounter[2] , spi3_cs3_c, spi3_cs0_c, 
         \r_car_core/e_car_sequencer/un12_djb_present_0[29] , N_24_i, 
         \r_car_core/e_car_sequencer/lvdscounter[3] , 
         \r_car_core/e_car_sequencer/un12_djb_present_c2 , 
         \r_car_core/e_car_sequencer/un12_djb_present_0[28] , 
         \r_car_core/e_car_sequencer/lvdscounter[4] , 
         \r_car_core/e_car_sequencer/un12_djb_present_ac0_7 , 
         \r_car_core/e_car_sequencer/un12_djb_present[27] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[0] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[1] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[2] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[3] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[4] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[5] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf[6] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[0] , 
         \r_car_core/e_i2s_dio/out_3[1] , \r_car_core/e_i2s_dio/out_3[0] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[1] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[2] , 
         \r_car_core/e_i2s_dio/out_3[3] , \r_car_core/e_i2s_dio/out_3[2] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[3] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[4] , 
         \r_car_core/e_i2s_dio/out_3[5] , \r_car_core/e_i2s_dio/out_3[4] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[5] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf[6] , 
         \r_car_core/e_i2s_dio/out_3[7] , \r_car_core/e_i2s_dio/out_3[6] , 
         \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] , 
         \r_car_core.e_i2s_dio.out_i2s_sr.buf_4[7] , 
         \r_car_core/e_car_sequencer/N_41 , \r_car_core/e_car_sequencer/N_16 , 
         \r_car_core/e_car_sequencer/N_14_i , \r_car_core/i2s_mic_dat , 
         \l_car_core/i2s_lr_st_pre , \r_car_core/e_car_sequencer/djb_got169_1 , 
         \r_car_core/e_car_sequencer/i2s_mic_ld_1 , 
         \r_car_core/e_car_sequencer/N_16_i , \r_car_core/i2s_mic_sh , 
         \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] , 
         \r_car_core/e_car_sequencer/N_63 , 
         \r_car_core/e_car_sequencer/i2s_spkr_ld_2 , N_20_i, 
         \r_car_core/e_car_sequencer/N_18_i , \test_counter[1] , 
         \test_counter[0] , \test_counter_RNO[1] , \test_counter_i[0] , 
         \test_counter[2] , \test_counter_RNO[2] , test_l2_c, 
         \test_counter_RNO[3] , GND, \l_car_core/e_i2s_dio/lrst_1 , 
         \l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 , test_m1_c, 
         \l_car_core.e_car_sequencer.djb_got16 , 
         \l_car_core/e_car_sequencer/un2_djb_got16 , 
         \l_car_core.e_car_sequencer.spi_miso_1 , 
         \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0 , spi3_mosi_c, 
         \l_car_core/e_i2s_dio/in_2[7] , \l_car_core/e_i2s_dio/in_2[6] , 
         \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0 , spi1_mosi_c, 
         \l_car_core/e_i2s_dio/out_1[4] , \l_car_core/e_i2s_dio/out_1[3] , 
         \l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_1[0] , 
         \l_car_core/e_i2s_dio/out_1[5] , \op_and.op_and.result_7 , 
         \l_car_core/e_i2s_dio/in_1[1] , \l_car_core.e_i2s_dio.in_1[0] , 
         \l_car_core/e_i2s_dio/in_2[0] , \l_car_core/e_i2s_dio/in_2[1] , 
         \r_car_core/e_car_sequencer/N_49 , \l_car_core/e_i2s_dio/in_2[3] , 
         \l_car_core/e_i2s_dio/in_2[2] , spi3_clk_c, 
         \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0_2 , 
         \l_car_core/e_i2s_dio/in_2[5] , \l_car_core/e_i2s_dio/in_2[4] , 
         \r_car_core/e_car_sequencer/N_62 , \l_car_core/e_i2s_dio/in_1[3] , 
         \l_car_core/e_i2s_dio/in_1[2] , djb_got167_0_a3_RNI39NJ1, 
         \r_car_core/e_car_sequencer/spi_miso_cnv_0 , 
         \l_car_core/e_i2s_dio/in_1[5] , \l_car_core/e_i2s_dio/in_1[4] , 
         djb_got169_0_a4_1_RNI9CI52, \l_car_core/e_i2s_dio/in_1[7] , 
         \l_car_core/e_i2s_dio/in_1[6] , \e_fmexg_core/spi_byte_ctr_0_sqmuxa , 
         \lvdscounter_RNIJSM32[2] , \e_fmexg_core/first_sample[7] , 
         \l_car_core/e_car_sequencer/N_61 , spi1_clk_c, 
         \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0_2 , 
         \l_car_core/e_i2s_dio/out_1[2] , \l_car_core/e_i2s_dio/out_1[1] , 
         djb_got169_0_a2_RNIISCH1, \e_fmexg_core.two_samples_3[0] , 
         \buf_cnv[0] , \l_car_core/e_i2s_dio/out_1[0] , 
         \r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_2[0] , 
         \l_car_core/e_i2s_dio/reg_cnv[0] , \l_car_core/e_i2s_dio/out_1[6] , 
         \l_car_core/e_i2s_dio/out_1[7] , \l_car_core/e_i2s_dio/out_2[1] , 
         \l_car_core/e_i2s_dio/out_2[0] , \l_car_core/e_i2s_dio/out_2[3] , 
         \l_car_core/e_i2s_dio/out_2[2] , \l_car_core/e_i2s_dio/out_2[5] , 
         \l_car_core/e_i2s_dio/out_2[4] , \l_car_core/e_i2s_dio/out_2[7] , 
         \l_car_core/e_i2s_dio/out_2[6] , \r_car_core/e_i2s_dio/out_1[0] , 
         \r_car_core/e_i2s_dio/out_1[1] , \r_car_core/e_i2s_dio/out_1[2] , 
         \r_car_core/e_i2s_dio/out_1[3] , \r_car_core/e_i2s_dio/out_1[4] , 
         \r_car_core/e_i2s_dio/out_1[5] , \r_car_core/e_i2s_dio/out_1[6] , 
         \r_car_core/e_i2s_dio/out_1[7] , \r_car_core/e_i2s_dio/out_2[1] , 
         \r_car_core/e_i2s_dio/out_2[0] , \r_car_core/e_i2s_dio/out_2[3] , 
         \r_car_core/e_i2s_dio/out_2[2] , \r_car_core/e_i2s_dio/out_2[5] , 
         \r_car_core/e_i2s_dio/out_2[4] , \r_car_core/e_i2s_dio/out_2[7] , 
         \r_car_core/e_i2s_dio/out_2[6] , spi_miso_internal, adc_interrupt_c, 
         spi4_miso_c, spi_miso_internal_0, i2s2_d1_c, i2s2_d0_c, i2s1_d0_c, 
         \e_fmexg_core/fifo/Full , \e_fmexg_core/fifo/Empty , VCCI;

  SLICE_0 SLICE_0( .A1(\mute_debounce_counter[0] ), 
    .DI1(\mute_debounce_counter_s[0] ), .CLK(test_l1_c), 
    .F1(\mute_debounce_counter_s[0] ), .Q1(\mute_debounce_counter[0] ), 
    .FCO(\mute_debounce_counter_cry[0] ));
  l_car_core_e_i2s_dio_SLICE_1 \l_car_core/e_i2s_dio/SLICE_1 ( 
    .B1(\l_car_core/e_i2s_dio/lvds_bit_ctr[4] ), .A1(seq_reset_i), 
    .B0(\l_car_core/e_i2s_dio/lvds_bit_ctr[3] ), .A0(seq_reset_i), 
    .DI1(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[4] ), 
    .DI0(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[3] ), .CE(un2_divider), 
    .CLK(hr_clk_0), .FCI(\l_car_core/e_i2s_dio/lvds_bit_ctr_cry[2] ), 
    .F0(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[3] ), 
    .Q0(\l_car_core/e_i2s_dio/lvds_bit_ctr[3] ), 
    .F1(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[4] ), 
    .Q1(\l_car_core/e_i2s_dio/lvds_bit_ctr[4] ));
  l_car_core_e_i2s_dio_SLICE_2 \l_car_core/e_i2s_dio/SLICE_2 ( 
    .B1(\l_car_core/e_i2s_dio/lvds_bit_ctr[2] ), .A1(seq_reset_i), 
    .B0(i2s_sck), .A0(seq_reset_i), 
    .DI1(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[2] ), 
    .DI0(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[1] ), .CE(un2_divider), 
    .CLK(hr_clk_0), .FCI(\l_car_core/e_i2s_dio/lvds_bit_ctr_cry[0] ), 
    .F0(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[1] ), .Q0(i2s_sck), 
    .F1(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[2] ), 
    .Q1(\l_car_core/e_i2s_dio/lvds_bit_ctr[2] ), 
    .FCO(\l_car_core/e_i2s_dio/lvds_bit_ctr_cry[2] ));
  l_car_core_e_i2s_dio_SLICE_3 \l_car_core/e_i2s_dio/SLICE_3 ( 
    .B1(\l_car_core/e_i2s_dio/lvds_bit_ctr[0] ), .A1(seq_reset_i), 
    .B0(seq_reset_i), .DI1(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[0] ), 
    .CE(un2_divider), .CLK(hr_clk_0), 
    .F1(\l_car_core/e_i2s_dio/lvds_bit_ctr_s[0] ), 
    .Q1(\l_car_core/e_i2s_dio/lvds_bit_ctr[0] ), 
    .FCO(\l_car_core/e_i2s_dio/lvds_bit_ctr_cry[0] ));
  e_fmexg_core_SLICE_4 \e_fmexg_core/SLICE_4 ( 
    .A0(\e_fmexg_core/rampcounter[11] ), 
    .DI0(\e_fmexg_core/rampcounter_s[11] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .FCI(\e_fmexg_core/rampcounter_cry[10] ), 
    .F0(\e_fmexg_core/rampcounter_s[11] ), .Q0(\e_fmexg_core/rampcounter[11] ));
  e_fmexg_core_SLICE_5 \e_fmexg_core/SLICE_5 ( 
    .A1(\e_fmexg_core/rampcounter[10] ), .A0(\e_fmexg_core/rampcounter[9] ), 
    .DI1(\e_fmexg_core/rampcounter_s[10] ), 
    .DI0(\e_fmexg_core/rampcounter_s[9] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .FCI(\e_fmexg_core/rampcounter_cry[8] ), 
    .F0(\e_fmexg_core/rampcounter_s[9] ), .Q0(\e_fmexg_core/rampcounter[9] ), 
    .F1(\e_fmexg_core/rampcounter_s[10] ), .Q1(\e_fmexg_core/rampcounter[10] ), 
    .FCO(\e_fmexg_core/rampcounter_cry[10] ));
  e_fmexg_core_SLICE_6 \e_fmexg_core/SLICE_6 ( 
    .A1(\e_fmexg_core/rampcounter[8] ), .A0(\e_fmexg_core/rampcounter[7] ), 
    .DI1(\e_fmexg_core/rampcounter_s[8] ), 
    .DI0(\e_fmexg_core/rampcounter_s[7] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .FCI(\e_fmexg_core/rampcounter_cry[6] ), 
    .F0(\e_fmexg_core/rampcounter_s[7] ), .Q0(\e_fmexg_core/rampcounter[7] ), 
    .F1(\e_fmexg_core/rampcounter_s[8] ), .Q1(\e_fmexg_core/rampcounter[8] ), 
    .FCO(\e_fmexg_core/rampcounter_cry[8] ));
  e_fmexg_core_SLICE_7 \e_fmexg_core/SLICE_7 ( 
    .A1(\e_fmexg_core/rampcounter[6] ), .A0(\e_fmexg_core/rampcounter[5] ), 
    .DI1(\e_fmexg_core/rampcounter_s[6] ), 
    .DI0(\e_fmexg_core/rampcounter_s[5] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .FCI(\e_fmexg_core/rampcounter_cry[4] ), 
    .F0(\e_fmexg_core/rampcounter_s[5] ), .Q0(\e_fmexg_core/rampcounter[5] ), 
    .F1(\e_fmexg_core/rampcounter_s[6] ), .Q1(\e_fmexg_core/rampcounter[6] ), 
    .FCO(\e_fmexg_core/rampcounter_cry[6] ));
  e_fmexg_core_SLICE_8 \e_fmexg_core/SLICE_8 ( 
    .A1(\e_fmexg_core/rampcounter[4] ), .A0(\e_fmexg_core/rampcounter[3] ), 
    .DI1(\e_fmexg_core/rampcounter_s[4] ), 
    .DI0(\e_fmexg_core/rampcounter_s[3] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .FCI(\e_fmexg_core/rampcounter_cry[2] ), 
    .F0(\e_fmexg_core/rampcounter_s[3] ), .Q0(\e_fmexg_core/rampcounter[3] ), 
    .F1(\e_fmexg_core/rampcounter_s[4] ), .Q1(\e_fmexg_core/rampcounter[4] ), 
    .FCO(\e_fmexg_core/rampcounter_cry[4] ));
  e_fmexg_core_SLICE_9 \e_fmexg_core/SLICE_9 ( 
    .A1(\e_fmexg_core/rampcounter[2] ), .A0(\e_fmexg_core/rampcounter[1] ), 
    .DI1(\e_fmexg_core/rampcounter_s[2] ), 
    .DI0(\e_fmexg_core/rampcounter_s[1] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .FCI(\e_fmexg_core/rampcounter_cry[0] ), 
    .F0(\e_fmexg_core/rampcounter_s[1] ), .Q0(\e_fmexg_core/rampcounter[1] ), 
    .F1(\e_fmexg_core/rampcounter_s[2] ), .Q1(\e_fmexg_core/rampcounter[2] ), 
    .FCO(\e_fmexg_core/rampcounter_cry[2] ));
  e_fmexg_core_SLICE_10 \e_fmexg_core/SLICE_10 ( 
    .A1(\e_fmexg_core/rampcounter[0] ), .DI1(\e_fmexg_core/rampcounter_s[0] ), 
    .CE(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ), .CLK(test_l1_c), 
    .F1(\e_fmexg_core/rampcounter_s[0] ), .Q1(\e_fmexg_core/rampcounter[0] ), 
    .FCO(\e_fmexg_core/rampcounter_cry[0] ));
  e_car_clock_gen_SLICE_11 \e_car_clock_gen/SLICE_11 ( .A0(i2s_ws), 
    .DI0(\e_car_clock_gen/lvds_ctr_s[7] ), .CE(un2_divider), .CLK(hr_clk_0), 
    .FCI(\e_car_clock_gen/lvds_ctr_cry[6] ), 
    .F0(\e_car_clock_gen/lvds_ctr_s[7] ), .Q0(i2s_ws));
  e_car_clock_gen_SLICE_12 \e_car_clock_gen/SLICE_12 ( 
    .A1(\e_car_clock_gen/lvds_ctr[6] ), .A0(\e_car_clock_gen/lvds_ctr[5] ), 
    .DI1(\e_car_clock_gen/lvds_ctr_s[6] ), 
    .DI0(\e_car_clock_gen/lvds_ctr_s[5] ), .CE(un2_divider), .CLK(hr_clk_0), 
    .FCI(\e_car_clock_gen/lvds_ctr_cry[4] ), 
    .F0(\e_car_clock_gen/lvds_ctr_s[5] ), .Q0(\e_car_clock_gen/lvds_ctr[5] ), 
    .F1(\e_car_clock_gen/lvds_ctr_s[6] ), .Q1(\e_car_clock_gen/lvds_ctr[6] ), 
    .FCO(\e_car_clock_gen/lvds_ctr_cry[6] ));
  e_car_clock_gen_SLICE_13 \e_car_clock_gen/SLICE_13 ( 
    .A1(\e_car_clock_gen/lvds_ctr[4] ), .A0(\e_car_clock_gen/lvds_ctr[3] ), 
    .DI1(\e_car_clock_gen/lvds_ctr_s[4] ), 
    .DI0(\e_car_clock_gen/lvds_ctr_s[3] ), .CE(un2_divider), .CLK(hr_clk_0), 
    .FCI(\e_car_clock_gen/lvds_ctr_cry[2] ), 
    .F0(\e_car_clock_gen/lvds_ctr_s[3] ), .Q0(\e_car_clock_gen/lvds_ctr[3] ), 
    .F1(\e_car_clock_gen/lvds_ctr_s[4] ), .Q1(\e_car_clock_gen/lvds_ctr[4] ), 
    .FCO(\e_car_clock_gen/lvds_ctr_cry[4] ));
  e_car_clock_gen_SLICE_14 \e_car_clock_gen/SLICE_14 ( 
    .A1(\e_car_clock_gen/lvds_ctr[2] ), .A0(\e_car_clock_gen/lvds_ctr[1] ), 
    .DI1(\e_car_clock_gen/lvds_ctr_s[2] ), 
    .DI0(\e_car_clock_gen/lvds_ctr_s[1] ), .CE(un2_divider), .CLK(hr_clk_0), 
    .FCI(\e_car_clock_gen/lvds_ctr_cry[0] ), 
    .F0(\e_car_clock_gen/lvds_ctr_s[1] ), .Q0(\e_car_clock_gen/lvds_ctr[1] ), 
    .F1(\e_car_clock_gen/lvds_ctr_s[2] ), .Q1(\e_car_clock_gen/lvds_ctr[2] ), 
    .FCO(\e_car_clock_gen/lvds_ctr_cry[2] ));
  e_car_clock_gen_SLICE_15 \e_car_clock_gen/SLICE_15 ( 
    .A1(\e_car_clock_gen/lvds_ctr[0] ), .DI1(\e_car_clock_gen/lvds_ctr_s[0] ), 
    .CE(un2_divider), .CLK(hr_clk_0), .F1(\e_car_clock_gen/lvds_ctr_s[0] ), 
    .Q1(\e_car_clock_gen/lvds_ctr[0] ), 
    .FCO(\e_car_clock_gen/lvds_ctr_cry[0] ));
  SLICE_16 SLICE_16( .A1(\mute_debounce_counter[16] ), 
    .A0(\mute_debounce_counter[15] ), .DI1(\mute_debounce_counter_s[16] ), 
    .DI0(\mute_debounce_counter_s[15] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[14] ), .F0(\mute_debounce_counter_s[15] ), 
    .Q0(\mute_debounce_counter[15] ), .F1(\mute_debounce_counter_s[16] ), 
    .Q1(\mute_debounce_counter[16] ));
  SLICE_17 SLICE_17( .A1(\mute_debounce_counter[14] ), 
    .A0(\mute_debounce_counter[13] ), .DI1(\mute_debounce_counter_s[14] ), 
    .DI0(\mute_debounce_counter_s[13] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[12] ), .F0(\mute_debounce_counter_s[13] ), 
    .Q0(\mute_debounce_counter[13] ), .F1(\mute_debounce_counter_s[14] ), 
    .Q1(\mute_debounce_counter[14] ), .FCO(\mute_debounce_counter_cry[14] ));
  SLICE_18 SLICE_18( .A1(\mute_debounce_counter[12] ), 
    .A0(\mute_debounce_counter[11] ), .DI1(\mute_debounce_counter_s[12] ), 
    .DI0(\mute_debounce_counter_s[11] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[10] ), .F0(\mute_debounce_counter_s[11] ), 
    .Q0(\mute_debounce_counter[11] ), .F1(\mute_debounce_counter_s[12] ), 
    .Q1(\mute_debounce_counter[12] ), .FCO(\mute_debounce_counter_cry[12] ));
  SLICE_19 SLICE_19( .A1(\mute_debounce_counter[10] ), 
    .A0(\mute_debounce_counter[9] ), .DI1(\mute_debounce_counter_s[10] ), 
    .DI0(\mute_debounce_counter_s[9] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[8] ), .F0(\mute_debounce_counter_s[9] ), 
    .Q0(\mute_debounce_counter[9] ), .F1(\mute_debounce_counter_s[10] ), 
    .Q1(\mute_debounce_counter[10] ), .FCO(\mute_debounce_counter_cry[10] ));
  SLICE_20 SLICE_20( .A1(\mute_debounce_counter[8] ), 
    .A0(\mute_debounce_counter[7] ), .DI1(\mute_debounce_counter_s[8] ), 
    .DI0(\mute_debounce_counter_s[7] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[6] ), .F0(\mute_debounce_counter_s[7] ), 
    .Q0(\mute_debounce_counter[7] ), .F1(\mute_debounce_counter_s[8] ), 
    .Q1(\mute_debounce_counter[8] ), .FCO(\mute_debounce_counter_cry[8] ));
  SLICE_21 SLICE_21( .A1(\mute_debounce_counter[6] ), 
    .A0(\mute_debounce_counter[5] ), .DI1(\mute_debounce_counter_s[6] ), 
    .DI0(\mute_debounce_counter_s[5] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[4] ), .F0(\mute_debounce_counter_s[5] ), 
    .Q0(\mute_debounce_counter[5] ), .F1(\mute_debounce_counter_s[6] ), 
    .Q1(\mute_debounce_counter[6] ), .FCO(\mute_debounce_counter_cry[6] ));
  SLICE_22 SLICE_22( .A1(\mute_debounce_counter[4] ), 
    .A0(\mute_debounce_counter[3] ), .DI1(\mute_debounce_counter_s[4] ), 
    .DI0(\mute_debounce_counter_s[3] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[2] ), .F0(\mute_debounce_counter_s[3] ), 
    .Q0(\mute_debounce_counter[3] ), .F1(\mute_debounce_counter_s[4] ), 
    .Q1(\mute_debounce_counter[4] ), .FCO(\mute_debounce_counter_cry[4] ));
  SLICE_23 SLICE_23( .A1(\mute_debounce_counter[2] ), 
    .A0(\mute_debounce_counter[1] ), .DI1(\mute_debounce_counter_s[2] ), 
    .DI0(\mute_debounce_counter_s[1] ), .CLK(test_l1_c), 
    .FCI(\mute_debounce_counter_cry[0] ), .F0(\mute_debounce_counter_s[1] ), 
    .Q0(\mute_debounce_counter[1] ), .F1(\mute_debounce_counter_s[2] ), 
    .Q1(\mute_debounce_counter[2] ), .FCO(\mute_debounce_counter_cry[2] ));
  SLICE_24 SLICE_24( .B1(\e_car_clock_gen.divider[1] ), 
    .A1(\e_car_clock_gen.divider[0] ), .A0(\e_car_clock_gen.divider[0] ), 
    .DI1(\e_car_clock_gen.divider_0[1] ), .DI0(\e_car_clock_gen/divider_i[0] ), 
    .CLK(hr_clk_0), .F0(\e_car_clock_gen/divider_i[0] ), 
    .Q0(\e_car_clock_gen.divider[0] ), .F1(\e_car_clock_gen.divider_0[1] ), 
    .Q1(\e_car_clock_gen.divider[1] ));
  e_car_clock_gen_SLICE_25 \e_car_clock_gen/SLICE_25 ( 
    .B1(\e_car_clock_gen/lvds_ctr[2] ), .A1(\e_car_clock_gen/lvds_ctr[1] ), 
    .D0(\e_car_clock_gen/un15_lvds_ctr_1 ), .C0(\e_car_clock_gen/lvds_ctr[4] ), 
    .B0(\e_car_clock_gen/lvds_ctr[3] ), .A0(\e_car_clock_gen/lvds_ctr[0] ), 
    .DI0(\e_car_clock_gen/un15_lvds_ctr ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\e_car_clock_gen/un15_lvds_ctr ), .Q0(\e_car_clock_gen/seq_reset ), 
    .F1(\e_car_clock_gen/un15_lvds_ctr_1 ));
  e_fmexg_core_SLICE_26 \e_fmexg_core/SLICE_26 ( 
    .D1(\e_fmexg_core/counter_div12[2] ), .C1(\e_fmexg_core/counter_div12[1] ), 
    .B1(\e_fmexg_core/counter_div12[0] ), .A1(\e_fmexg_core/clkdiv12 ), 
    .D0(\e_fmexg_core/counter_div12[2] ), .C0(\e_fmexg_core/counter_div12[1] ), 
    .B0(\e_fmexg_core/counter_div12[0] ), .A0(\e_fmexg_core/clkdiv12 ), 
    .DI0(\e_fmexg_core/clkdiv12_0 ), .CLK(test_l1_c), 
    .F0(\e_fmexg_core/clkdiv12_0 ), .Q0(\e_fmexg_core/clkdiv12 ), 
    .F1(\e_fmexg_core/counter_div12_RNIE2LQ1[1] ));
  e_fmexg_core_SLICE_27 \e_fmexg_core/SLICE_27 ( 
    .C1(\e_fmexg_core/counter_div12[2] ), .B1(\e_fmexg_core/counter_div12[1] ), 
    .A1(\e_fmexg_core/counter_div12[0] ), .A0(\e_fmexg_core/counter_div12[0] ), 
    .DI1(\e_fmexg_core/counter_div12_3[1] ), 
    .DI0(\e_fmexg_core/counter_div12_i[0] ), .CLK(test_l1_c), 
    .F0(\e_fmexg_core/counter_div12_i[0] ), 
    .Q0(\e_fmexg_core/counter_div12[0] ), 
    .F1(\e_fmexg_core/counter_div12_3[1] ), 
    .Q1(\e_fmexg_core/counter_div12[1] ));
  e_fmexg_core_SLICE_28 \e_fmexg_core/SLICE_28 ( .A1(\e_fmexg_core/clkdiv12 ), 
    .C0(\e_fmexg_core/counter_div12[2] ), .B0(\e_fmexg_core/counter_div12[1] ), 
    .A0(\e_fmexg_core/counter_div12[0] ), 
    .DI0(\e_fmexg_core/counter_div12_3[2] ), .CLK(test_l1_c), 
    .F0(\e_fmexg_core/counter_div12_3[2] ), 
    .Q0(\e_fmexg_core/counter_div12[2] ), .F1(\e_fmexg_core.clkdiv12_i ));
  e_fmexg_core_SLICE_29 \e_fmexg_core/SLICE_29 ( 
    .D0(\e_fmexg_core/spi_byte_ctr[1] ), .C0(\e_fmexg_core/spi_byte_ctr[0] ), 
    .B0(\e_fmexg_core/spi_bit_ctr[2] ), .A0(\e_fmexg_core/spi_bit_ctr[1] ), 
    .DI0(\e_fmexg_core/un6_spi_cs ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/un6_spi_cs ), .Q0(\e_fmexg_core/fifo_readclk_en ));
  e_fmexg_core_SLICE_36 \e_fmexg_core/SLICE_36 ( 
    .B1(\e_fmexg_core/spi_bit_ctr[1] ), .A1(\e_fmexg_core/spi_bit_ctr[0] ), 
    .A0(\e_fmexg_core/spi_bit_ctr[0] ), 
    .DI1(\e_fmexg_core/spi_bit_ctr_RNO[1] ), 
    .DI0(\e_fmexg_core/spi_bit_ctr_i[0] ), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/spi_bit_ctr_i[0] ), .Q0(\e_fmexg_core/spi_bit_ctr[0] ), 
    .F1(\e_fmexg_core/spi_bit_ctr_RNO[1] ), .Q1(\e_fmexg_core/spi_bit_ctr[1] ));
  e_fmexg_core_SLICE_37 \e_fmexg_core/SLICE_37 ( 
    .B1(\e_fmexg_core/spi_bit_ctr[1] ), .A1(\e_fmexg_core/spi_bit_ctr[0] ), 
    .C0(\e_fmexg_core/spi_bit_ctr[2] ), .B0(\e_fmexg_core/spi_bit_ctr[1] ), 
    .A0(\e_fmexg_core/spi_bit_ctr[0] ), 
    .DI0(\e_fmexg_core/spi_bit_ctr_RNO[2] ), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/spi_bit_ctr_RNO[2] ), .Q0(\e_fmexg_core/spi_bit_ctr[2] ), 
    .F1(\e_fmexg_core/un15_spi_cs_1 ));
  e_fmexg_core_SLICE_38 \e_fmexg_core/SLICE_38 ( 
    .C1(\e_fmexg_core/spi_byte_ctr_0_sqmuxa_1 ), 
    .B1(\e_fmexg_core/spi_byte_ctr[1] ), .A1(\e_fmexg_core/spi_byte_ctr[0] ), 
    .C0(\e_fmexg_core/spi_byte_ctr_0_sqmuxa_1 ), 
    .B0(\e_fmexg_core/spi_byte_ctr[1] ), .A0(\e_fmexg_core/spi_byte_ctr[0] ), 
    .DI1(\e_fmexg_core/spi_byte_ctr_5[1] ), 
    .DI0(\e_fmexg_core/spi_byte_ctr_RNO[0] ), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/spi_byte_ctr_RNO[0] ), 
    .Q0(\e_fmexg_core/spi_byte_ctr[0] ), .F1(\e_fmexg_core/spi_byte_ctr_5[1] ), 
    .Q1(\e_fmexg_core/spi_byte_ctr[1] ));
  e_fmexg_core_SLICE_39 \e_fmexg_core/SLICE_39 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[3] ), 
    .A1(\e_fmexg_core/first_sample[5] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[2] ), .A0(\e_fmexg_core/first_sample[6] ), 
    .DI1(\e_fmexg_core/two_samples_3[2] ), 
    .DI0(\e_fmexg_core/two_samples_3[1] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[1] ), .Q0(\e_fmexg_core/two_samples[1] ), 
    .F1(\e_fmexg_core/two_samples_3[2] ), .Q1(\e_fmexg_core/two_samples[2] ));
  e_fmexg_core_SLICE_40 \e_fmexg_core/SLICE_40 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[5] ), 
    .A1(\e_fmexg_core/first_sample[3] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[4] ), .A0(\e_fmexg_core/first_sample[4] ), 
    .DI1(\e_fmexg_core/two_samples_3[4] ), 
    .DI0(\e_fmexg_core/two_samples_3[3] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[3] ), .Q0(\e_fmexg_core/two_samples[3] ), 
    .F1(\e_fmexg_core/two_samples_3[4] ), .Q1(\e_fmexg_core/two_samples[4] ));
  e_fmexg_core_SLICE_41 \e_fmexg_core/SLICE_41 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[7] ), 
    .A1(\e_fmexg_core/first_sample[1] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[6] ), .A0(\e_fmexg_core/first_sample[2] ), 
    .DI1(\e_fmexg_core/two_samples_3[6] ), 
    .DI0(\e_fmexg_core/two_samples_3[5] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[5] ), .Q0(\e_fmexg_core/two_samples[5] ), 
    .F1(\e_fmexg_core/two_samples_3[6] ), .Q1(\e_fmexg_core/two_samples[6] ));
  e_fmexg_core_SLICE_42 \e_fmexg_core/SLICE_42 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[9] ), 
    .A1(\e_fmexg_core/fifo_Q[3] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[8] ), .A0(\e_fmexg_core/first_sample[0] ), 
    .DI1(\e_fmexg_core/two_samples_3[8] ), 
    .DI0(\e_fmexg_core/two_samples_3[7] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[7] ), .Q0(\e_fmexg_core/two_samples[7] ), 
    .F1(\e_fmexg_core/two_samples_3[8] ), .Q1(\e_fmexg_core/two_samples[8] ));
  e_fmexg_core_SLICE_43 \e_fmexg_core/SLICE_43 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[11] ), 
    .A1(\e_fmexg_core/fifo_Q[1] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[10] ), .A0(\e_fmexg_core/fifo_Q[2] ), 
    .DI1(\e_fmexg_core/two_samples_3[10] ), 
    .DI0(\e_fmexg_core/two_samples_3[9] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[9] ), .Q0(\e_fmexg_core/two_samples[9] ), 
    .F1(\e_fmexg_core/two_samples_3[10] ), .Q1(\e_fmexg_core/two_samples[10] ));
  e_fmexg_core_SLICE_44 \e_fmexg_core/SLICE_44 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[13] ), 
    .A1(\e_fmexg_core/first_sample[11] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[12] ), .A0(\e_fmexg_core/fifo_Q[0] ), 
    .DI1(\e_fmexg_core/two_samples_3[12] ), 
    .DI0(\e_fmexg_core/two_samples_3[11] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[11] ), .Q0(\e_fmexg_core/two_samples[11] ), 
    .F1(\e_fmexg_core/two_samples_3[12] ), .Q1(\e_fmexg_core/two_samples[12] ));
  e_fmexg_core_SLICE_45 \e_fmexg_core/SLICE_45 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[15] ), 
    .A1(\e_fmexg_core/first_sample[9] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[14] ), .A0(\e_fmexg_core/first_sample[10] ), 
    .DI1(\e_fmexg_core/two_samples_3[14] ), 
    .DI0(\e_fmexg_core/two_samples_3[13] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[13] ), .Q0(\e_fmexg_core/two_samples[13] ), 
    .F1(\e_fmexg_core/two_samples_3[14] ), .Q1(\e_fmexg_core/two_samples[14] ));
  e_fmexg_core_SLICE_46 \e_fmexg_core/SLICE_46 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[17] ), 
    .A1(\e_fmexg_core/fifo_Q[11] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[16] ), .A0(\e_fmexg_core/first_sample[8] ), 
    .DI1(\e_fmexg_core/two_samples_3[16] ), 
    .DI0(\e_fmexg_core/two_samples_3[15] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[15] ), .Q0(\e_fmexg_core/two_samples[15] ), 
    .F1(\e_fmexg_core/two_samples_3[16] ), .Q1(\e_fmexg_core/two_samples[16] ));
  e_fmexg_core_SLICE_47 \e_fmexg_core/SLICE_47 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[19] ), 
    .A1(\e_fmexg_core/fifo_Q[9] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[18] ), .A0(\e_fmexg_core/fifo_Q[10] ), 
    .DI1(\e_fmexg_core/two_samples_3[18] ), 
    .DI0(\e_fmexg_core/two_samples_3[17] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[17] ), .Q0(\e_fmexg_core/two_samples[17] ), 
    .F1(\e_fmexg_core/two_samples_3[18] ), .Q1(\e_fmexg_core/two_samples[18] ));
  e_fmexg_core_SLICE_48 \e_fmexg_core/SLICE_48 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[21] ), 
    .A1(\e_fmexg_core/fifo_Q[7] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[20] ), .A0(\e_fmexg_core/fifo_Q[8] ), 
    .DI1(\e_fmexg_core/two_samples_3[20] ), 
    .DI0(\e_fmexg_core/two_samples_3[19] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[19] ), .Q0(\e_fmexg_core/two_samples[19] ), 
    .F1(\e_fmexg_core/two_samples_3[20] ), .Q1(\e_fmexg_core/two_samples[20] ));
  e_fmexg_core_SLICE_49 \e_fmexg_core/SLICE_49 ( 
    .C1(\e_fmexg_core/un15_spi_cs ), .B1(\e_fmexg_core/two_samples[23] ), 
    .A1(\e_fmexg_core/fifo_Q[5] ), .C0(\e_fmexg_core/un15_spi_cs ), 
    .B0(\e_fmexg_core/two_samples[22] ), .A0(\e_fmexg_core/fifo_Q[6] ), 
    .DI1(\e_fmexg_core/two_samples_3[22] ), 
    .DI0(\e_fmexg_core/two_samples_3[21] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[21] ), .Q0(\e_fmexg_core/two_samples[21] ), 
    .F1(\e_fmexg_core/two_samples_3[22] ), .Q1(\e_fmexg_core/two_samples[22] ));
  e_fmexg_core_SLICE_50 \e_fmexg_core/SLICE_50 ( 
    .B0(\e_fmexg_core/un15_spi_cs ), .A0(\e_fmexg_core/fifo_Q[4] ), 
    .DI0(\e_fmexg_core/two_samples_3[23] ), .CE(spi4_cs_c), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/two_samples_3[23] ), .Q0(\e_fmexg_core/two_samples[23] ));
  l_car_core_e_car_sequencer_SLICE_51 \l_car_core/e_car_sequencer/SLICE_51 ( 
    .B1(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .A0(\l_car_core/e_car_sequencer/N_56 ), 
    .DI0(\l_car_core/e_car_sequencer/un63_djb_present_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/un63_djb_present_0 ), 
    .Q0(\l_car_core.e_car_sequencer.lvds_io_tri_enable_i ), 
    .F1(\l_car_core/e_car_sequencer/N_56 ));
  l_car_core_e_i2s_dio_SLICE_52 \l_car_core/e_i2s_dio/SLICE_52 ( 
    .D0(\l_car_core/e_i2s_dio/un10_lvds_bit_ctr_1 ), 
    .C0(\l_car_core/e_i2s_dio/lvds_bit_ctr[4] ), 
    .B0(\l_car_core/e_i2s_dio/lvds_bit_ctr[3] ), 
    .A0(\l_car_core/e_i2s_dio/lvds_bit_ctr[2] ), 
    .DI0(\l_car_core/e_i2s_dio/un10_lvds_bit_ctr ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/un10_lvds_bit_ctr ), 
    .Q0(\l_car_core.e_i2s_dio.cycle_begin ));
  SLICE_57 SLICE_57( .C1(\e_car_clock_gen.divider[0] ), 
    .B1(\e_car_clock_gen.divider[1] ), .A1(\r_car_core/i2s_mic_ld ), 
    .C0(\e_car_clock_gen.divider[0] ), .B0(\e_car_clock_gen.divider[1] ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .DI0(\l_car_core/e_car_sequencer/lvdscounter_RNO_0[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/lvdscounter_RNO_0[0] ), 
    .Q0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .F1(\r_car_core/e_i2s_dio/reg_cnv_0[0] ));
  l_car_core_e_car_sequencer_SLICE_60 \l_car_core/e_car_sequencer/SLICE_60 ( 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .DI0(\l_car_core/e_car_sequencer/un12_djb_present_0[31] ), 
    .M1(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/un12_djb_present_0[31] ), 
    .Q0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .Q1(\l_car_core/e_car_sequencer/lvdscounter[1] ));
  l_car_core_SLICE_61 \l_car_core/SLICE_61 ( .B1(spi1_cs2_c), .A1(spi1_cs0_c), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .DI0(\l_car_core/e_car_sequencer/un12_djb_present_0[30] ), 
    .M1(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/un12_djb_present_0[30] ), 
    .Q0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), .F1(N_54_i), 
    .Q1(\l_car_core/e_car_sequencer/lvdscounter[2] ));
  l_car_core_e_car_sequencer_SLICE_62 \l_car_core/e_car_sequencer/SLICE_62 ( 
    .D1(\l_car_core/e_car_sequencer/lvdscounter[4] ), 
    .C1(\l_car_core/e_car_sequencer/lvdscounter[2] ), 
    .B1(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .A1(\l_car_core/e_car_sequencer/djb_got16_cnv_0_0 ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .DI0(\l_car_core/e_car_sequencer/un12_djb_present_0[29] ), 
    .M1(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/un12_djb_present_0[29] ), 
    .Q0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .F1(\l_car_core/e_car_sequencer/djb_present_RNO ), 
    .Q1(\l_car_core/e_car_sequencer/lvdscounter[3] ));
  l_car_core_e_car_sequencer_SLICE_63 \l_car_core/e_car_sequencer/SLICE_63 ( 
    .D0(\l_car_core/e_car_sequencer/un12_djb_present_c2 ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), 
    .DI0(\l_car_core/e_car_sequencer/un12_djb_present_0[28] ), 
    .M1(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/un12_djb_present_0[28] ), 
    .Q0(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), 
    .Q1(\l_car_core/e_car_sequencer/lvdscounter[4] ));
  l_car_core_e_car_sequencer_SLICE_64 \l_car_core/e_car_sequencer/SLICE_64 ( 
    .B1(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .D0(\l_car_core/e_car_sequencer/un12_djb_present_c2 ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), 
    .DI0(\l_car_core/e_car_sequencer/un12_djb_present_ac0_7 ), 
    .CE(un2_divider), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/un12_djb_present_ac0_7 ), 
    .Q0(\l_car_core/e_car_sequencer/un12_djb_present[27] ), 
    .F1(\l_car_core/e_car_sequencer/un12_djb_present_c2 ));
  l_car_core_e_i2s_dio_SLICE_65 \l_car_core/e_i2s_dio/SLICE_65 ( 
    .B0(\l_car_core/e_i2s_dio/lvds_bit_ctr[0] ), .A0(i2s_sck), 
    .DI0(\l_car_core/e_i2s_dio/un17_lvds_bit_ctr ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/un17_lvds_bit_ctr ), 
    .Q0(\l_car_core/e_i2s_dio/i2s_in_shiften ));
  l_car_core_e_i2s_dio_SLICE_66 \l_car_core/e_i2s_dio/SLICE_66 ( 
    .B0(\l_car_core/e_i2s_dio/lvds_bit_ctr[0] ), .A0(i2s_sck), 
    .DI0(\l_car_core/e_i2s_dio/un10_lvds_bit_ctr_1 ), .CE(G_82), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_i2s_dio/un10_lvds_bit_ctr_1 ), 
    .Q0(\l_car_core/e_i2s_dio/i2s_out_shiften ));
  l_car_core_e_i2s_dio_in_lvds_sr_SLICE_75 
    \l_car_core/e_i2s_dio/in_lvds_sr/SLICE_75 ( .C1(\l_car_core/i2s_spkr_ld ), 
    .B1(\l_car_core/e_i2s_dio/in_lvds_sr/buf[0] ), 
    .A1(\l_car_core.e_i2s_dio.in_3[1] ), .B0(\l_car_core/i2s_spkr_ld ), 
    .A0(\l_car_core.e_i2s_dio.in_3[0] ), 
    .DI1(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] ), 
    .DI0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] ), 
    .CE(\l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] ), 
    .Q0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[0] ), 
    .F1(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] ), 
    .Q1(\l_car_core/e_i2s_dio/in_lvds_sr/buf[1] ));
  l_car_core_e_i2s_dio_in_lvds_sr_SLICE_76 
    \l_car_core/e_i2s_dio/in_lvds_sr/SLICE_76 ( .C1(\l_car_core/i2s_spkr_ld ), 
    .B1(\l_car_core/e_i2s_dio/in_lvds_sr/buf[2] ), 
    .A1(\l_car_core.e_i2s_dio.in_3[3] ), .C0(\l_car_core/i2s_spkr_ld ), 
    .B0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[1] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[2] ), 
    .DI1(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] ), 
    .DI0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] ), 
    .CE(\l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] ), 
    .Q0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[2] ), 
    .F1(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] ), 
    .Q1(\l_car_core/e_i2s_dio/in_lvds_sr/buf[3] ));
  l_car_core_e_i2s_dio_in_lvds_sr_SLICE_77 
    \l_car_core/e_i2s_dio/in_lvds_sr/SLICE_77 ( .C1(\l_car_core/i2s_spkr_ld ), 
    .B1(\l_car_core/e_i2s_dio/in_lvds_sr/buf[4] ), 
    .A1(\l_car_core.e_i2s_dio.in_3[5] ), .C0(\l_car_core/i2s_spkr_ld ), 
    .B0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[3] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[4] ), 
    .DI1(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] ), 
    .DI0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] ), 
    .CE(\l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] ), 
    .Q0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[4] ), 
    .F1(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] ), 
    .Q1(\l_car_core/e_i2s_dio/in_lvds_sr/buf[5] ));
  l_car_core_e_i2s_dio_in_lvds_sr_SLICE_78 
    \l_car_core/e_i2s_dio/in_lvds_sr/SLICE_78 ( .C0(\l_car_core/i2s_spkr_ld ), 
    .B0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[5] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[6] ), 
    .DI0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] ), 
    .CE(\l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] ), 
    .Q0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[6] ));
  l_car_core_e_i2s_dio_out_i2s_sr_SLICE_92 
    \l_car_core/e_i2s_dio/out_i2s_sr/SLICE_92 ( 
    .C1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[0] ), 
    .B1(\l_car_core/e_i2s_dio/out_3[1] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .B0(\l_car_core/e_i2s_dio/out_3[0] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI1(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] ), 
    .DI0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] ), 
    .Q0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[0] ), 
    .F1(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] ), 
    .Q1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[1] ));
  l_car_core_e_i2s_dio_out_i2s_sr_SLICE_93 
    \l_car_core/e_i2s_dio/out_i2s_sr/SLICE_93 ( 
    .C1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[2] ), 
    .B1(\l_car_core/e_i2s_dio/out_3[3] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .C0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[1] ), 
    .B0(\l_car_core/e_i2s_dio/out_3[2] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI1(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] ), 
    .DI0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] ), 
    .Q0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[2] ), 
    .F1(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] ), 
    .Q1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[3] ));
  l_car_core_e_i2s_dio_out_i2s_sr_SLICE_94 
    \l_car_core/e_i2s_dio/out_i2s_sr/SLICE_94 ( 
    .C1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[4] ), 
    .B1(\l_car_core/e_i2s_dio/out_3[5] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .C0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[3] ), 
    .B0(\l_car_core/e_i2s_dio/out_3[4] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI1(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] ), 
    .DI0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] ), 
    .Q0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[4] ), 
    .F1(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] ), 
    .Q1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[5] ));
  l_car_core_e_i2s_dio_out_i2s_sr_SLICE_95 
    \l_car_core/e_i2s_dio/out_i2s_sr/SLICE_95 ( 
    .C1(\l_car_core/e_i2s_dio/out_i2s_sr/buf[6] ), 
    .B1(\l_car_core/e_i2s_dio/out_3[7] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .C0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[5] ), 
    .B0(\l_car_core/e_i2s_dio/out_3[6] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] ), 
    .Q0(\l_car_core/e_i2s_dio/out_i2s_sr/buf[6] ), 
    .F1(\l_car_core.e_i2s_dio.out_i2s_sr.buf_4[7] ));
  l_car_core_e_car_sequencer_SLICE_97 \l_car_core/e_car_sequencer/SLICE_97 ( 
    .B1(l_lvds_io_in), .A1(fmexg_mic_sync_c), .D0(test_m2_c), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter[4] ), 
    .B0(\l_car_core/e_car_sequencer/i2s_mic_dat_3_i_0 ), 
    .A0(\l_car_core/e_car_sequencer/N_34_i ), 
    .DI0(\l_car_core/e_car_sequencer/N_26_i ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/N_26_i ), .Q0(\l_car_core/i2s_mic_dat ), 
    .F1(\l_car_core/e_car_sequencer/i2s_mic_dat_3_i_0 ));
  l_car_core_e_car_sequencer_SLICE_98 \l_car_core/e_car_sequencer/SLICE_98 ( 
    .D0(test_m2_c), .C0(\l_car_core/e_car_sequencer/lvdscounter[3] ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter[1] ), 
    .A0(\l_car_core/e_car_sequencer/djb_got169_0_a2 ), 
    .DI0(\l_car_core/e_car_sequencer/i2s_mic_ld_1 ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/i2s_mic_ld_1 ), 
    .Q0(\l_car_core/i2s_mic_ld ));
  l_car_core_e_car_sequencer_SLICE_99 \l_car_core/e_car_sequencer/SLICE_99 ( 
    .C1(\l_car_core/e_car_sequencer/lvdscounter[3] ), 
    .B1(\l_car_core/e_car_sequencer/lvdscounter[2] ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter[1] ), .C0(test_m2_c), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter[4] ), 
    .A0(\l_car_core/e_car_sequencer/N_34_i ), 
    .DI0(\l_car_core/e_car_sequencer/N_28_i ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/N_28_i ), .Q0(\l_car_core/i2s_mic_sh ), 
    .F1(\l_car_core/e_car_sequencer/N_34_i ));
  l_car_core_e_i2s_dio_in_lvds_sr_SLICE_100 
    \l_car_core/e_i2s_dio/in_lvds_sr/SLICE_100 ( .C0(\l_car_core/i2s_spkr_ld ), 
    .B0(\l_car_core/e_i2s_dio/in_lvds_sr/buf[6] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[7] ), 
    .DI0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] ), 
    .CE(\l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] ), 
    .Q0(\l_car_core/i2s_spkr_dat ));
  l_car_core_e_car_sequencer_SLICE_101 \l_car_core/e_car_sequencer/SLICE_101 
    ( .D0(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), .C0(test_m2_c), 
    .B0(\l_car_core/e_car_sequencer/N_68 ), 
    .A0(\l_car_core/e_car_sequencer/un12_djb_present[27] ), 
    .DI0(\l_car_core/e_car_sequencer/i2s_spkr_ld_2 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/i2s_spkr_ld_2 ), 
    .Q0(\l_car_core/i2s_spkr_ld ));
  l_car_core_e_car_sequencer_SLICE_102 \l_car_core/e_car_sequencer/SLICE_102 
    ( .D0(\l_car_core/e_car_sequencer/N_19 ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .DI0(\l_car_core/e_car_sequencer/N_53_i ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/N_53_i ), 
    .Q0(\l_car_core/i2s_spkr_sh ));
  SLICE_103 SLICE_103( .D1(\op_and.op_and.result_12 ), 
    .C1(\op_and.op_and.result_11 ), .B1(\op_and.op_and.result_10 ), 
    .A1(\op_and.op_and.result_9 ), .D0(mute_btn_internal), 
    .C0(\op_and.op_and.result ), .B0(volplus_mute_c), .A0(led4_muteout_c), 
    .DI0(muted_RNO), .CLK(test_l1_c), .F0(muted_RNO), .Q0(led4_muteout_c), 
    .F1(\op_and.op_and.result ));
  l_car_core_e_car_sequencer_SLICE_104 \l_car_core/e_car_sequencer/SLICE_104 
    ( .D1(led4_muteout_c), .C1(\l_car_core/i2s_spkr_dat ), 
    .B1(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 ), 
    .A1(\l_car_core/e_car_sequencer/i2s_spkr_sh_2_i ), 
    .D0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 ), 
    .C0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 ), 
    .B0(\l_car_core/e_car_sequencer/N_56 ), 
    .A0(\l_car_core/e_car_sequencer/N_19 ), 
    .DI0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0 ), 
    .Q0(lvds_io_1), .F1(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 ));
  r_car_core_e_car_sequencer_SLICE_105 \r_car_core/e_car_sequencer/SLICE_105 
    ( .D1(\r_car_core/i2s_spkr_dat ), 
    .C1(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0_0 ), 
    .B1(led4_muteout_c), .A1(\r_car_core/e_car_sequencer/N_18 ), 
    .D0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 ), 
    .C0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 ), 
    .B0(\r_car_core/e_car_sequencer/N_36 ), 
    .A0(\r_car_core/e_car_sequencer/N_35 ), 
    .DI0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 ), 
    .CE(un2_divider), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 ), 
    .Q0(lvds_io_1_0), 
    .F1(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 ));
  r_car_core_e_car_sequencer_SLICE_106 \r_car_core/e_car_sequencer/SLICE_106 
    ( .B1(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .A0(\r_car_core/e_car_sequencer/N_36 ), 
    .DI0(\r_car_core/e_car_sequencer/un63_djb_present_0_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/un63_djb_present_0_0 ), 
    .Q0(\r_car_core.e_car_sequencer.lvds_io_tri_enable_i ), 
    .F1(\r_car_core/e_car_sequencer/N_36 ));
  r_car_core_e_car_sequencer_SLICE_107 \r_car_core/e_car_sequencer/SLICE_107 
    ( .B0(r_lvds_io_in), .A0(\r_car_core.e_car_sequencer.djb_got16 ), 
    .DI0(\r_car_core/e_car_sequencer/un2_djb_got16_0 ), 
    .CE(\r_car_core/e_car_sequencer/djb_present_RNO_0 ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/un2_djb_got16_0 ), 
    .Q0(\r_car_core/e_car_sequencer/djb_present ));
  r_car_core_SLICE_108 \r_car_core/SLICE_108 ( 
    .D1(\e_car_clock_gen.divider[0] ), .C1(\e_car_clock_gen.divider[1] ), 
    .B1(\r_car_core/i2s_spkr_ld ), .A1(\r_car_core/i2s_spkr_sh ), 
    .C0(\e_car_clock_gen.divider[0] ), .B0(\e_car_clock_gen.divider[1] ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .DI0(\r_car_core/e_car_sequencer/lvdscounter_RNO[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/lvdscounter_RNO[0] ), 
    .Q0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .F1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] ));
  r_car_core_e_car_sequencer_SLICE_111 \r_car_core/e_car_sequencer/SLICE_111 
    ( .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .DI0(\r_car_core/e_car_sequencer/un12_djb_present_0[31] ), 
    .M1(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/un12_djb_present_0[31] ), 
    .Q0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .Q1(\r_car_core/e_car_sequencer/lvdscounter[1] ));
  r_car_core_e_car_sequencer_SLICE_112 \r_car_core/e_car_sequencer/SLICE_112 
    ( .C0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .DI0(\r_car_core/e_car_sequencer/un12_djb_present_0[30] ), 
    .M1(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/un12_djb_present_0[30] ), 
    .Q0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .Q1(\r_car_core/e_car_sequencer/lvdscounter[2] ));
  r_car_core_SLICE_113 \r_car_core/SLICE_113 ( .B1(spi3_cs3_c), 
    .A1(spi3_cs0_c), .D0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .DI0(\r_car_core/e_car_sequencer/un12_djb_present_0[29] ), 
    .M1(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/un12_djb_present_0[29] ), 
    .Q0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), .F1(N_24_i), 
    .Q1(\r_car_core/e_car_sequencer/lvdscounter[3] ));
  r_car_core_e_car_sequencer_SLICE_114 \r_car_core/e_car_sequencer/SLICE_114 
    ( .D0(\r_car_core/e_car_sequencer/un12_djb_present_c2 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .DI0(\r_car_core/e_car_sequencer/un12_djb_present_0[28] ), 
    .M1(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/un12_djb_present_0[28] ), 
    .Q0(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .Q1(\r_car_core/e_car_sequencer/lvdscounter[4] ));
  r_car_core_e_car_sequencer_SLICE_115 \r_car_core/e_car_sequencer/SLICE_115 
    ( .B1(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .D0(\r_car_core/e_car_sequencer/un12_djb_present_c2 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .DI0(\r_car_core/e_car_sequencer/un12_djb_present_ac0_7 ), 
    .CE(un2_divider), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/un12_djb_present_ac0_7 ), 
    .Q0(\r_car_core/e_car_sequencer/un12_djb_present[27] ), 
    .F1(\r_car_core/e_car_sequencer/un12_djb_present_c2 ));
  r_car_core_e_i2s_dio_in_lvds_sr_SLICE_116 
    \r_car_core/e_i2s_dio/in_lvds_sr/SLICE_116 ( .C1(\r_car_core/i2s_spkr_ld ), 
    .B1(\r_car_core/e_i2s_dio/in_lvds_sr/buf[0] ), 
    .A1(\l_car_core.e_i2s_dio.in_3[1] ), .B0(\r_car_core/i2s_spkr_ld ), 
    .A0(\l_car_core.e_i2s_dio.in_3[0] ), 
    .DI1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] ), 
    .DI0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] ), 
    .CE(\r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] ), 
    .Q0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[0] ), 
    .F1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] ), 
    .Q1(\r_car_core/e_i2s_dio/in_lvds_sr/buf[1] ));
  r_car_core_e_i2s_dio_in_lvds_sr_SLICE_117 
    \r_car_core/e_i2s_dio/in_lvds_sr/SLICE_117 ( .C1(\r_car_core/i2s_spkr_ld ), 
    .B1(\r_car_core/e_i2s_dio/in_lvds_sr/buf[2] ), 
    .A1(\l_car_core.e_i2s_dio.in_3[3] ), .C0(\r_car_core/i2s_spkr_ld ), 
    .B0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[1] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[2] ), 
    .DI1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] ), 
    .DI0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] ), 
    .CE(\r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] ), 
    .Q0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[2] ), 
    .F1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] ), 
    .Q1(\r_car_core/e_i2s_dio/in_lvds_sr/buf[3] ));
  r_car_core_e_i2s_dio_in_lvds_sr_SLICE_118 
    \r_car_core/e_i2s_dio/in_lvds_sr/SLICE_118 ( .C1(\r_car_core/i2s_spkr_ld ), 
    .B1(\r_car_core/e_i2s_dio/in_lvds_sr/buf[4] ), 
    .A1(\l_car_core.e_i2s_dio.in_3[5] ), .C0(\r_car_core/i2s_spkr_ld ), 
    .B0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[3] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[4] ), 
    .DI1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] ), 
    .DI0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] ), 
    .CE(\r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] ), 
    .Q0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[4] ), 
    .F1(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] ), 
    .Q1(\r_car_core/e_i2s_dio/in_lvds_sr/buf[5] ));
  r_car_core_e_i2s_dio_in_lvds_sr_SLICE_119 
    \r_car_core/e_i2s_dio/in_lvds_sr/SLICE_119 ( .C0(\r_car_core/i2s_spkr_ld ), 
    .B0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[5] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[6] ), 
    .DI0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] ), 
    .CE(\r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] ), 
    .Q0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[6] ));
  r_car_core_e_i2s_dio_out_i2s_sr_SLICE_132 
    \r_car_core/e_i2s_dio/out_i2s_sr/SLICE_132 ( 
    .C1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[0] ), 
    .B1(\r_car_core/e_i2s_dio/out_3[1] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .B0(\r_car_core/e_i2s_dio/out_3[0] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI1(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] ), 
    .DI0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] ), 
    .Q0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[0] ), 
    .F1(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] ), 
    .Q1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[1] ));
  r_car_core_e_i2s_dio_out_i2s_sr_SLICE_133 
    \r_car_core/e_i2s_dio/out_i2s_sr/SLICE_133 ( 
    .C1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[2] ), 
    .B1(\r_car_core/e_i2s_dio/out_3[3] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .C0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[1] ), 
    .B0(\r_car_core/e_i2s_dio/out_3[2] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI1(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] ), 
    .DI0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] ), 
    .Q0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[2] ), 
    .F1(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] ), 
    .Q1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[3] ));
  r_car_core_e_i2s_dio_out_i2s_sr_SLICE_134 
    \r_car_core/e_i2s_dio/out_i2s_sr/SLICE_134 ( 
    .C1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[4] ), 
    .B1(\r_car_core/e_i2s_dio/out_3[5] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .C0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[3] ), 
    .B0(\r_car_core/e_i2s_dio/out_3[4] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI1(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] ), 
    .DI0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] ), 
    .Q0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[4] ), 
    .F1(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] ), 
    .Q1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[5] ));
  r_car_core_e_i2s_dio_out_i2s_sr_SLICE_135 
    \r_car_core/e_i2s_dio/out_i2s_sr/SLICE_135 ( 
    .C1(\r_car_core/e_i2s_dio/out_i2s_sr/buf[6] ), 
    .B1(\r_car_core/e_i2s_dio/out_3[7] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), 
    .C0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[5] ), 
    .B0(\r_car_core/e_i2s_dio/out_3[6] ), 
    .A0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .DI0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] ), 
    .Q0(\r_car_core/e_i2s_dio/out_i2s_sr/buf[6] ), 
    .F1(\r_car_core.e_i2s_dio.out_i2s_sr.buf_4[7] ));
  SLICE_136 SLICE_136( .D1(\r_car_core/e_car_sequencer/lvdscounter[3] ), 
    .C1(\r_car_core/e_car_sequencer/lvdscounter[2] ), 
    .B1(\r_car_core/e_car_sequencer/lvdscounter[1] ), 
    .A1(\r_car_core/e_car_sequencer/N_41 ), .C0(r_lvds_io_in), 
    .B0(fmexg_mic_sync_c), .A0(\r_car_core/e_car_sequencer/N_16 ), 
    .DI0(\r_car_core/e_car_sequencer/N_14_i ), .M1(i2s_ws), .CE(G_82), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/N_14_i ), 
    .Q0(\r_car_core/i2s_mic_dat ), .F1(\r_car_core/e_car_sequencer/N_16 ), 
    .Q1(\l_car_core/i2s_lr_st_pre ));
  r_car_core_e_car_sequencer_SLICE_137 \r_car_core/e_car_sequencer/SLICE_137 
    ( .B1(\r_car_core/e_car_sequencer/lvdscounter[2] ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter[1] ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter[3] ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .B0(\r_car_core/e_car_sequencer/djb_got169_1 ), 
    .A0(\r_car_core/e_car_sequencer/N_41 ), 
    .DI0(\r_car_core/e_car_sequencer/i2s_mic_ld_1 ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/i2s_mic_ld_1 ), 
    .Q0(\r_car_core/i2s_mic_ld ), 
    .F1(\r_car_core/e_car_sequencer/djb_got169_1 ));
  r_car_core_e_car_sequencer_SLICE_138 \r_car_core/e_car_sequencer/SLICE_138 
    ( .B1(\r_car_core/e_car_sequencer/lvdscounter[4] ), 
    .A1(\r_car_core/e_car_sequencer/djb_present ), 
    .D0(\r_car_core/e_car_sequencer/N_41 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter[1] ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter[2] ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter[3] ), 
    .DI0(\r_car_core/e_car_sequencer/N_16_i ), .CE(G_82), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/N_16_i ), .Q0(\r_car_core/i2s_mic_sh ), 
    .F1(\r_car_core/e_car_sequencer/N_41 ));
  r_car_core_e_i2s_dio_in_lvds_sr_SLICE_139 
    \r_car_core/e_i2s_dio/in_lvds_sr/SLICE_139 ( .C0(\r_car_core/i2s_spkr_ld ), 
    .B0(\r_car_core/e_i2s_dio/in_lvds_sr/buf[6] ), 
    .A0(\l_car_core.e_i2s_dio.in_3[7] ), 
    .DI0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] ), 
    .CE(\r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_4[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] ), 
    .Q0(\r_car_core/i2s_spkr_dat ));
  r_car_core_e_car_sequencer_SLICE_140 \r_car_core/e_car_sequencer/SLICE_140 
    ( .B1(r_lvds_io_in), .A1(\r_car_core/e_car_sequencer/djb_present ), 
    .D0(\r_car_core/e_car_sequencer/djb_present ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/N_63 ), 
    .A0(\r_car_core/e_car_sequencer/un12_djb_present[27] ), 
    .DI0(\r_car_core/e_car_sequencer/i2s_spkr_ld_2 ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/i2s_spkr_ld_2 ), 
    .Q0(\r_car_core/i2s_spkr_ld ), .F1(N_20_i));
  r_car_core_e_car_sequencer_SLICE_141 \r_car_core/e_car_sequencer/SLICE_141 
    ( .D0(\r_car_core/e_car_sequencer/N_35 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .DI0(\r_car_core/e_car_sequencer/N_18_i ), .CE(un2_divider), 
    .CLK(hr_clk_0), .F0(\r_car_core/e_car_sequencer/N_18_i ), 
    .Q0(\r_car_core/i2s_spkr_sh ));
  SLICE_142 SLICE_142( .B1(\test_counter[1] ), .A1(\test_counter[0] ), 
    .A0(\test_counter[0] ), .DI1(\test_counter_RNO[1] ), 
    .DI0(\test_counter_i[0] ), .CLK(hr_clk_0), .F0(\test_counter_i[0] ), 
    .Q0(\test_counter[0] ), .F1(\test_counter_RNO[1] ), .Q1(\test_counter[1] ));
  SLICE_143 SLICE_143( .C0(\test_counter[2] ), .B0(\test_counter[1] ), 
    .A0(\test_counter[0] ), .DI0(\test_counter_RNO[2] ), .CLK(hr_clk_0), 
    .F0(\test_counter_RNO[2] ), .Q0(\test_counter[2] ));
  SLICE_144 SLICE_144( .D0(test_l2_c), .C0(\test_counter[2] ), 
    .B0(\test_counter[1] ), .A0(\test_counter[0] ), 
    .DI0(\test_counter_RNO[3] ), .CLK(hr_clk_0), .F0(\test_counter_RNO[3] ), 
    .Q0(test_l2_c), .F1(GND));
  SLICE_145 SLICE_145( .D1(\mute_debounce_counter[14] ), 
    .C1(\mute_debounce_counter[13] ), .B1(\mute_debounce_counter[12] ), 
    .A1(\mute_debounce_counter[11] ), .A0(\e_car_clock_gen/seq_reset ), 
    .M1(\l_car_core/i2s_lr_st_pre ), .M0(\l_car_core/e_i2s_dio/lrst_1 ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(seq_reset_i), .Q0(test_m1_c), .F1(\op_and.op_and.result_9 ), 
    .Q1(\l_car_core/e_i2s_dio/lrst_1 ));
  l_car_core_e_car_sequencer_SLICE_146 \l_car_core/e_car_sequencer/SLICE_146 
    ( .B1(test_m2_c), .A1(l_lvds_io_in), .B0(l_lvds_io_in), 
    .A0(\l_car_core.e_car_sequencer.djb_got16 ), 
    .DI0(\l_car_core/e_car_sequencer/un2_djb_got16 ), 
    .CE(\l_car_core/e_car_sequencer/djb_present_RNO ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/un2_djb_got16 ), .Q0(test_m2_c), 
    .F1(\l_car_core.e_car_sequencer.spi_miso_1 ));
  SLICE_147 SLICE_147( .D1(spi3_cs3_c), 
    .C1(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .B1(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0 ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter[0] ), .D0(spi3_mosi_c), 
    .C0(spi3_cs0_c), .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .M1(\l_car_core/e_i2s_dio/in_2[7] ), .M0(\l_car_core/e_i2s_dio/in_2[6] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0 ), 
    .Q0(\l_car_core.e_i2s_dio.in_3[6] ), 
    .F1(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 ), 
    .Q1(\l_car_core.e_i2s_dio.in_3[7] ));
  l_car_core_SLICE_148 \l_car_core/SLICE_148 ( .D1(spi1_cs2_c), 
    .C1(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .B1(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0 ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter[0] ), .D0(spi1_mosi_c), 
    .C0(spi1_cs0_c), .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .A0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .M1(\l_car_core/e_i2s_dio/out_1[4] ), .M0(\l_car_core/e_i2s_dio/out_1[3] ), 
    .CE(\l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_1[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0 ), 
    .Q0(\l_car_core/e_i2s_dio/out_1[4] ), 
    .F1(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 ), 
    .Q1(\l_car_core/e_i2s_dio/out_1[5] ));
  SLICE_149 SLICE_149( .D1(\op_and.op_and.result_7 ), 
    .C1(\mute_debounce_counter[16] ), .B1(\mute_debounce_counter[15] ), 
    .A1(\mute_debounce_counter[0] ), .B0(\mute_debounce_counter[2] ), 
    .A0(\mute_debounce_counter[1] ), .M1(\l_car_core/e_i2s_dio/in_1[1] ), 
    .M0(\l_car_core.e_i2s_dio.in_1[0] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(\op_and.op_and.result_7 ), .Q0(\l_car_core/e_i2s_dio/in_2[0] ), 
    .F1(\op_and.op_and.result_12 ), .Q1(\l_car_core/e_i2s_dio/in_2[1] ));
  SLICE_150 SLICE_150( 
    .C1(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .B1(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .C0(\r_car_core/e_car_sequencer/un12_djb_present[27] ), 
    .B0(\r_car_core/e_car_sequencer/N_63 ), 
    .A0(\r_car_core/e_car_sequencer/N_49 ), 
    .M1(\l_car_core/e_i2s_dio/in_2[3] ), .M0(\l_car_core/e_i2s_dio/in_2[2] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0_0 ), 
    .Q0(\l_car_core.e_i2s_dio.in_3[2] ), 
    .F1(\r_car_core/e_car_sequencer/N_63 ), 
    .Q1(\l_car_core.e_i2s_dio.in_3[3] ));
  SLICE_151 SLICE_151( .D1(test_m1_c), .C1(spi3_clk_c), 
    .B1(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .A1(\r_car_core/e_car_sequencer/N_35 ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0_2 ), 
    .M1(\l_car_core/e_i2s_dio/in_2[5] ), .M0(\l_car_core/e_i2s_dio/in_2[4] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/N_49 ), 
    .Q0(\l_car_core.e_i2s_dio.in_3[4] ), 
    .F1(\r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0_2 ), 
    .Q1(\l_car_core.e_i2s_dio.in_3[5] ));
  SLICE_152 SLICE_152( 
    .B1(\r_car_core/e_car_sequencer/lvdscounter_pipe_4_Q_0 ), 
    .A1(\r_car_core/e_car_sequencer/djb_present ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter_pipe_1_Q_0 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter_pipe_2_Q_0 ), 
    .B0(\r_car_core/e_car_sequencer/lvdscounter_pipe_3_Q_0 ), 
    .A0(\r_car_core/e_car_sequencer/N_35 ), 
    .M1(\l_car_core/e_i2s_dio/in_2[1] ), .M0(\l_car_core/e_i2s_dio/in_2[0] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/N_18 ), 
    .Q0(\l_car_core.e_i2s_dio.in_3[0] ), 
    .F1(\r_car_core/e_car_sequencer/N_35 ), 
    .Q1(\l_car_core.e_i2s_dio.in_3[1] ));
  SLICE_153 SLICE_153( .B1(\e_car_clock_gen.divider[1] ), 
    .A1(\e_car_clock_gen.divider[0] ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter[4] ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter[0] ), .B0(G_82), 
    .A0(\r_car_core/e_car_sequencer/N_62 ), 
    .M1(\l_car_core/e_i2s_dio/in_1[3] ), .M0(\l_car_core/e_i2s_dio/in_1[2] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(djb_got167_0_a3_RNI39NJ1), .Q0(\l_car_core/e_i2s_dio/in_2[2] ), 
    .F1(G_82), .Q1(\l_car_core/e_i2s_dio/in_2[3] ));
  SLICE_154 SLICE_154( .B1(\r_car_core/e_car_sequencer/lvdscounter[4] ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter[3] ), 
    .D0(\r_car_core/e_car_sequencer/spi_miso_cnv_0 ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter[0] ), 
    .B0(\r_car_core/e_car_sequencer/djb_got169_1 ), .A0(G_82), 
    .M1(\l_car_core/e_i2s_dio/in_1[5] ), .M0(\l_car_core/e_i2s_dio/in_1[4] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(djb_got169_0_a4_1_RNI9CI52), .Q0(\l_car_core/e_i2s_dio/in_2[4] ), 
    .F1(\r_car_core/e_car_sequencer/spi_miso_cnv_0 ), 
    .Q1(\l_car_core/e_i2s_dio/in_2[5] ));
  SLICE_155 SLICE_155( .C1(\r_car_core/e_car_sequencer/lvdscounter[3] ), 
    .B1(\r_car_core/e_car_sequencer/lvdscounter[2] ), 
    .A1(\r_car_core/e_car_sequencer/lvdscounter[1] ), 
    .D0(\r_car_core/e_car_sequencer/lvdscounter[4] ), 
    .C0(\r_car_core/e_car_sequencer/lvdscounter[0] ), .B0(G_82), 
    .A0(\r_car_core/e_car_sequencer/N_62 ), 
    .M1(\l_car_core/e_i2s_dio/in_1[7] ), .M0(\l_car_core/e_i2s_dio/in_1[6] ), 
    .CE(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_car_sequencer/djb_present_RNO_0 ), 
    .Q0(\l_car_core/e_i2s_dio/in_2[6] ), 
    .F1(\r_car_core/e_car_sequencer/N_62 ), 
    .Q1(\l_car_core/e_i2s_dio/in_2[7] ));
  SLICE_156 SLICE_156( .D1(\e_car_clock_gen.divider[0] ), 
    .C1(\e_car_clock_gen.divider[1] ), 
    .B1(\l_car_core/e_car_sequencer/lvdscounter[1] ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter[3] ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter[2] ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter[4] ), 
    .A0(\l_car_core/e_car_sequencer/djb_got16_cnv_0_0 ), 
    .M1(\e_fmexg_core/fifo_Q[7] ), .M0(\e_fmexg_core/fifo_Q[6] ), 
    .CE(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), .CLK(spi4_clk_c), 
    .F0(\lvdscounter_RNIJSM32[2] ), .Q0(\e_fmexg_core/first_sample[6] ), 
    .F1(\l_car_core/e_car_sequencer/djb_got16_cnv_0_0 ), 
    .Q1(\e_fmexg_core/first_sample[7] ));
  SLICE_157 SLICE_157( .C1(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .B1(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), 
    .C0(\l_car_core/e_car_sequencer/un12_djb_present[27] ), 
    .B0(\l_car_core/e_car_sequencer/N_68 ), 
    .A0(\l_car_core/e_car_sequencer/N_61 ), .M1(\e_fmexg_core/fifo_Q[9] ), 
    .M0(\e_fmexg_core/fifo_Q[8] ), .CE(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), 
    .CLK(spi4_clk_c), 
    .F0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 ), 
    .Q0(\e_fmexg_core/first_sample[8] ), 
    .F1(\l_car_core/e_car_sequencer/N_68 ), 
    .Q1(\e_fmexg_core/first_sample[9] ));
  l_car_core_SLICE_158 \l_car_core/SLICE_158 ( .D1(test_m1_c), .C1(spi1_clk_c), 
    .B1(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .A1(\l_car_core/e_car_sequencer/N_19 ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .A0(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0_2 ), 
    .M1(\l_car_core/e_i2s_dio/out_1[2] ), .M0(\l_car_core/e_i2s_dio/out_1[1] ), 
    .CE(\l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_1[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_car_sequencer/N_61 ), 
    .Q0(\l_car_core/e_i2s_dio/out_1[2] ), 
    .F1(\l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0_2 ), 
    .Q1(\l_car_core/e_i2s_dio/out_1[3] ));
  SLICE_159 SLICE_159( .B1(test_m2_c), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter_pipe_4_Q ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter_pipe_1_Q ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter_pipe_2_Q ), 
    .B0(\l_car_core/e_car_sequencer/lvdscounter_pipe_3_Q ), 
    .A0(\l_car_core/e_car_sequencer/N_19 ), .M1(\e_fmexg_core/fifo_Q[5] ), 
    .M0(\e_fmexg_core/fifo_Q[4] ), .CE(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), 
    .CLK(spi4_clk_c), .F0(\l_car_core/e_car_sequencer/i2s_spkr_sh_2_i ), 
    .Q0(\e_fmexg_core/first_sample[4] ), 
    .F1(\l_car_core/e_car_sequencer/N_19 ), 
    .Q1(\e_fmexg_core/first_sample[5] ));
  SLICE_160 SLICE_160( .C1(\l_car_core/e_car_sequencer/lvdscounter[4] ), 
    .B1(\l_car_core/e_car_sequencer/lvdscounter[2] ), 
    .A1(\l_car_core/e_car_sequencer/lvdscounter[0] ), 
    .D0(\l_car_core/e_car_sequencer/lvdscounter[3] ), 
    .C0(\l_car_core/e_car_sequencer/lvdscounter[1] ), .B0(G_82), 
    .A0(\l_car_core/e_car_sequencer/djb_got169_0_a2 ), 
    .M1(\e_fmexg_core/fifo_Q[3] ), .M0(\e_fmexg_core/fifo_Q[2] ), 
    .CE(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), .CLK(spi4_clk_c), 
    .F0(djb_got169_0_a2_RNIISCH1), .Q0(\e_fmexg_core/first_sample[2] ), 
    .F1(\l_car_core/e_car_sequencer/djb_got169_0_a2 ), 
    .Q1(\e_fmexg_core/first_sample[3] ));
  e_fmexg_core_SLICE_161 \e_fmexg_core/SLICE_161 ( 
    .D1(\e_fmexg_core/un15_spi_cs_1 ), .C1(\e_fmexg_core/spi_byte_ctr[1] ), 
    .B1(\e_fmexg_core/spi_byte_ctr[0] ), .A1(\e_fmexg_core/spi_bit_ctr[2] ), 
    .C0(\e_fmexg_core/un15_spi_cs ), .B0(\e_fmexg_core/two_samples[1] ), 
    .A0(\e_fmexg_core/first_sample[7] ), .M1(\e_fmexg_core/fifo_Q[1] ), 
    .M0(\e_fmexg_core/fifo_Q[11] ), .CE(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), 
    .CLK(spi4_clk_c), .F0(\e_fmexg_core.two_samples_3[0] ), 
    .Q0(\e_fmexg_core/first_sample[11] ), .F1(\e_fmexg_core/un15_spi_cs ), 
    .Q1(\e_fmexg_core/first_sample[1] ));
  e_fmexg_core_SLICE_162 \e_fmexg_core/SLICE_162 ( .D1(spi4_cs_c), 
    .C1(\e_fmexg_core/spi_bit_ctr[2] ), .B1(\e_fmexg_core/spi_bit_ctr[1] ), 
    .A1(\e_fmexg_core/spi_bit_ctr[0] ), 
    .C0(\e_fmexg_core/spi_byte_ctr_0_sqmuxa_1 ), 
    .B0(\e_fmexg_core/spi_byte_ctr[1] ), .A0(\e_fmexg_core/spi_byte_ctr[0] ), 
    .M1(\e_fmexg_core/fifo_Q[10] ), .M0(\e_fmexg_core/fifo_Q[0] ), 
    .CE(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), .CLK(spi4_clk_c), 
    .F0(\e_fmexg_core/spi_byte_ctr_0_sqmuxa ), 
    .Q0(\e_fmexg_core/first_sample[0] ), 
    .F1(\e_fmexg_core/spi_byte_ctr_0_sqmuxa_1 ), 
    .Q1(\e_fmexg_core/first_sample[10] ));
  l_car_core_e_i2s_dio_SLICE_163 \l_car_core/e_i2s_dio/SLICE_163 ( 
    .C1(\e_car_clock_gen.divider[0] ), .B1(\e_car_clock_gen.divider[1] ), 
    .A1(\l_car_core.e_i2s_dio.cycle_begin ), .D0(\e_car_clock_gen.divider[0] ), 
    .C0(\e_car_clock_gen.divider[1] ), .B0(\l_car_core.e_i2s_dio.cycle_begin ), 
    .A0(\l_car_core/e_i2s_dio/i2s_out_shiften ), 
    .M1(\l_car_core/e_i2s_dio/in_1[5] ), .M0(\l_car_core/e_i2s_dio/in_1[4] ), 
    .CE(\buf_cnv[0] ), .CLK(hr_clk_0), .F0(\buf_cnv_0[0] ), 
    .Q0(\l_car_core/e_i2s_dio/in_1[5] ), 
    .F1(\l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ), 
    .Q1(\l_car_core/e_i2s_dio/in_1[6] ));
  SLICE_164 SLICE_164( .B1(\e_car_clock_gen.divider[1] ), 
    .A1(\e_car_clock_gen.divider[0] ), .C0(\e_car_clock_gen.divider[0] ), 
    .B0(\e_car_clock_gen.divider[1] ), .A0(\r_car_core/i2s_mic_sh ), 
    .M1(\l_car_core/e_i2s_dio/out_1[0] ), .M0(\l_car_core/i2s_mic_dat ), 
    .CE(\l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_1[0] ), .CLK(hr_clk_0), 
    .F0(\r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_2[0] ), 
    .Q0(\l_car_core/e_i2s_dio/out_1[0] ), .F1(un2_divider), 
    .Q1(\l_car_core/e_i2s_dio/out_1[1] ));
  l_car_core_e_i2s_dio_SLICE_165 \l_car_core/e_i2s_dio/SLICE_165 ( 
    .C1(\e_car_clock_gen.divider[0] ), .B1(\e_car_clock_gen.divider[1] ), 
    .A1(\l_car_core/i2s_mic_sh ), .D0(\e_car_clock_gen.divider[0] ), 
    .C0(\e_car_clock_gen.divider[1] ), .B0(\l_car_core/i2s_spkr_ld ), 
    .A0(\l_car_core/i2s_spkr_sh ), .M1(\l_car_core/e_i2s_dio/in_1[3] ), 
    .M0(\l_car_core/e_i2s_dio/in_1[2] ), .CE(\buf_cnv[0] ), .CLK(hr_clk_0), 
    .F0(\l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv_3[0] ), 
    .Q0(\l_car_core/e_i2s_dio/in_1[3] ), 
    .F1(\l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_1[0] ), 
    .Q1(\l_car_core/e_i2s_dio/in_1[4] ));
  l_car_core_e_i2s_dio_SLICE_166 \l_car_core/e_i2s_dio/SLICE_166 ( 
    .C1(\e_car_clock_gen.divider[0] ), .B1(\e_car_clock_gen.divider[1] ), 
    .A1(\l_car_core/i2s_mic_ld ), .C0(\e_car_clock_gen.divider[0] ), 
    .B0(\e_car_clock_gen.divider[1] ), 
    .A0(\l_car_core/e_i2s_dio/i2s_in_shiften ), 
    .M1(\l_car_core/e_i2s_dio/in_1[1] ), .M0(\l_car_core.e_i2s_dio.in_1[0] ), 
    .CE(\buf_cnv[0] ), .CLK(hr_clk_0), .F0(\buf_cnv[0] ), 
    .Q0(\l_car_core/e_i2s_dio/in_1[1] ), 
    .F1(\l_car_core/e_i2s_dio/reg_cnv[0] ), 
    .Q1(\l_car_core/e_i2s_dio/in_1[2] ));
  SLICE_167 SLICE_167( .D1(\mute_debounce_counter[10] ), 
    .C1(\mute_debounce_counter[9] ), .B1(\mute_debounce_counter[8] ), 
    .A1(\mute_debounce_counter[7] ), .D0(\mute_debounce_counter[6] ), 
    .C0(\mute_debounce_counter[5] ), .B0(\mute_debounce_counter[4] ), 
    .A0(\mute_debounce_counter[3] ), .M0(\l_car_core/e_i2s_dio/in_1[6] ), 
    .CE(\buf_cnv[0] ), .CLK(hr_clk_0), .F0(\op_and.op_and.result_11 ), 
    .Q0(\l_car_core/e_i2s_dio/in_1[7] ), .F1(\op_and.op_and.result_10 ));
  l_car_core_e_i2s_dio_out_lvds_sr_SLICE_190 
    \l_car_core/e_i2s_dio/out_lvds_sr/SLICE_190 ( 
    .M1(\l_car_core/e_i2s_dio/out_1[5] ), .M0(\l_car_core/e_i2s_dio/out_1[6] ), 
    .CE(\l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_1[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_1[7] ), .Q1(\l_car_core/e_i2s_dio/out_1[6] ));
  l_car_core_e_i2s_dio_out_reg_1_SLICE_191 
    \l_car_core/e_i2s_dio/out_reg_1/SLICE_191 ( 
    .M1(\l_car_core/e_i2s_dio/out_1[0] ), .M0(\l_car_core/e_i2s_dio/out_1[1] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_2[1] ), .Q1(\l_car_core/e_i2s_dio/out_2[0] ));
  l_car_core_e_i2s_dio_out_reg_1_SLICE_192 
    \l_car_core/e_i2s_dio/out_reg_1/SLICE_192 ( 
    .M1(\l_car_core/e_i2s_dio/out_1[2] ), .M0(\l_car_core/e_i2s_dio/out_1[3] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_2[3] ), .Q1(\l_car_core/e_i2s_dio/out_2[2] ));
  l_car_core_e_i2s_dio_out_reg_1_SLICE_193 
    \l_car_core/e_i2s_dio/out_reg_1/SLICE_193 ( 
    .M1(\l_car_core/e_i2s_dio/out_1[4] ), .M0(\l_car_core/e_i2s_dio/out_1[5] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_2[5] ), .Q1(\l_car_core/e_i2s_dio/out_2[4] ));
  l_car_core_e_i2s_dio_out_reg_1_SLICE_194 
    \l_car_core/e_i2s_dio/out_reg_1/SLICE_194 ( 
    .M1(\l_car_core/e_i2s_dio/out_1[6] ), .M0(\l_car_core/e_i2s_dio/out_1[7] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_2[7] ), .Q1(\l_car_core/e_i2s_dio/out_2[6] ));
  l_car_core_e_i2s_dio_out_reg_2_SLICE_195 
    \l_car_core/e_i2s_dio/out_reg_2/SLICE_195 ( 
    .M1(\l_car_core/e_i2s_dio/out_2[0] ), .M0(\l_car_core/e_i2s_dio/out_2[1] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_3[1] ), .Q1(\l_car_core/e_i2s_dio/out_3[0] ));
  l_car_core_e_i2s_dio_out_reg_2_SLICE_196 
    \l_car_core/e_i2s_dio/out_reg_2/SLICE_196 ( 
    .M1(\l_car_core/e_i2s_dio/out_2[2] ), .M0(\l_car_core/e_i2s_dio/out_2[3] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_3[3] ), .Q1(\l_car_core/e_i2s_dio/out_3[2] ));
  l_car_core_e_i2s_dio_out_reg_2_SLICE_197 
    \l_car_core/e_i2s_dio/out_reg_2/SLICE_197 ( 
    .M1(\l_car_core/e_i2s_dio/out_2[4] ), .M0(\l_car_core/e_i2s_dio/out_2[5] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_3[5] ), .Q1(\l_car_core/e_i2s_dio/out_3[4] ));
  l_car_core_e_i2s_dio_out_reg_2_SLICE_198 
    \l_car_core/e_i2s_dio/out_reg_2/SLICE_198 ( 
    .M1(\l_car_core/e_i2s_dio/out_2[6] ), .M0(\l_car_core/e_i2s_dio/out_2[7] ), 
    .CE(\l_car_core/e_i2s_dio/reg_cnv[0] ), .CLK(hr_clk_0), 
    .Q0(\l_car_core/e_i2s_dio/out_3[7] ), .Q1(\l_car_core/e_i2s_dio/out_3[6] ));
  r_car_core_e_i2s_dio_out_lvds_sr_SLICE_201 
    \r_car_core/e_i2s_dio/out_lvds_sr/SLICE_201 ( 
    .M1(\r_car_core/i2s_mic_dat ), .M0(\r_car_core/e_i2s_dio/out_1[0] ), 
    .CE(\r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_2[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_1[1] ), .Q1(\r_car_core/e_i2s_dio/out_1[0] ));
  r_car_core_e_i2s_dio_out_lvds_sr_SLICE_202 
    \r_car_core/e_i2s_dio/out_lvds_sr/SLICE_202 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[1] ), .M0(\r_car_core/e_i2s_dio/out_1[2] ), 
    .CE(\r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_2[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_1[3] ), .Q1(\r_car_core/e_i2s_dio/out_1[2] ));
  r_car_core_e_i2s_dio_out_lvds_sr_SLICE_203 
    \r_car_core/e_i2s_dio/out_lvds_sr/SLICE_203 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[3] ), .M0(\r_car_core/e_i2s_dio/out_1[4] ), 
    .CE(\r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_2[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_1[5] ), .Q1(\r_car_core/e_i2s_dio/out_1[4] ));
  r_car_core_e_i2s_dio_out_lvds_sr_SLICE_204 
    \r_car_core/e_i2s_dio/out_lvds_sr/SLICE_204 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[5] ), .M0(\r_car_core/e_i2s_dio/out_1[6] ), 
    .CE(\r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv_2[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_1[7] ), .Q1(\r_car_core/e_i2s_dio/out_1[6] ));
  r_car_core_e_i2s_dio_out_reg_1_SLICE_205 
    \r_car_core/e_i2s_dio/out_reg_1/SLICE_205 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[0] ), .M0(\r_car_core/e_i2s_dio/out_1[1] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_2[1] ), .Q1(\r_car_core/e_i2s_dio/out_2[0] ));
  r_car_core_e_i2s_dio_out_reg_1_SLICE_206 
    \r_car_core/e_i2s_dio/out_reg_1/SLICE_206 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[2] ), .M0(\r_car_core/e_i2s_dio/out_1[3] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_2[3] ), .Q1(\r_car_core/e_i2s_dio/out_2[2] ));
  r_car_core_e_i2s_dio_out_reg_1_SLICE_207 
    \r_car_core/e_i2s_dio/out_reg_1/SLICE_207 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[4] ), .M0(\r_car_core/e_i2s_dio/out_1[5] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_2[5] ), .Q1(\r_car_core/e_i2s_dio/out_2[4] ));
  r_car_core_e_i2s_dio_out_reg_1_SLICE_208 
    \r_car_core/e_i2s_dio/out_reg_1/SLICE_208 ( 
    .M1(\r_car_core/e_i2s_dio/out_1[6] ), .M0(\r_car_core/e_i2s_dio/out_1[7] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_2[7] ), .Q1(\r_car_core/e_i2s_dio/out_2[6] ));
  r_car_core_e_i2s_dio_out_reg_2_SLICE_209 
    \r_car_core/e_i2s_dio/out_reg_2/SLICE_209 ( 
    .M1(\r_car_core/e_i2s_dio/out_2[0] ), .M0(\r_car_core/e_i2s_dio/out_2[1] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_3[1] ), .Q1(\r_car_core/e_i2s_dio/out_3[0] ));
  r_car_core_e_i2s_dio_out_reg_2_SLICE_210 
    \r_car_core/e_i2s_dio/out_reg_2/SLICE_210 ( 
    .M1(\r_car_core/e_i2s_dio/out_2[2] ), .M0(\r_car_core/e_i2s_dio/out_2[3] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_3[3] ), .Q1(\r_car_core/e_i2s_dio/out_3[2] ));
  r_car_core_e_i2s_dio_out_reg_2_SLICE_211 
    \r_car_core/e_i2s_dio/out_reg_2/SLICE_211 ( 
    .M1(\r_car_core/e_i2s_dio/out_2[4] ), .M0(\r_car_core/e_i2s_dio/out_2[5] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_3[5] ), .Q1(\r_car_core/e_i2s_dio/out_3[4] ));
  r_car_core_e_i2s_dio_out_reg_2_SLICE_212 
    \r_car_core/e_i2s_dio/out_reg_2/SLICE_212 ( 
    .M1(\r_car_core/e_i2s_dio/out_2[6] ), .M0(\r_car_core/e_i2s_dio/out_2[7] ), 
    .CE(\r_car_core/e_i2s_dio/reg_cnv_0[0] ), .CLK(hr_clk_0), 
    .Q0(\r_car_core/e_i2s_dio/out_3[7] ), .Q1(\r_car_core/e_i2s_dio/out_3[6] ));
  l_lvds_io l_lvds_io_I( .PADDI(l_lvds_io_in), 
    .PADDT(\l_car_core.e_car_sequencer.lvds_io_tri_enable_i ), 
    .PADDO(lvds_io_1), .l_lvds_io(l_lvds_io));
  l_lvds_io_MGIOL l_lvds_io_MGIOL( .DI(l_lvds_io_in), 
    .CE(\lvdscounter_RNIJSM32[2] ), .CLK(hr_clk_0), 
    .IN(\l_car_core.e_car_sequencer.djb_got16 ));
  spi1_miso spi1_miso_I( .IOLDO(spi_miso_internal), .PADDT(N_54_i), 
    .spi1_miso(spi1_miso));
  spi1_miso_MGIOL spi1_miso_MGIOL( .IOLDO(spi_miso_internal), 
    .OPOS(\l_car_core.e_car_sequencer.spi_miso_1 ), 
    .CE(djb_got169_0_a2_RNIISCH1), .CLK(hr_clk_0));
  i2s1_sck i2s1_sck_I( .PADDO(i2s_sck), .i2s1_sck(i2s1_sck));
  ext_clk_in ext_clk_in_I( .PADDI(test_l1_c), .ext_clk_in(ext_clk_in));
  test_m2 test_m2_I( .PADDO(test_m2_c), .test_m2(test_m2));
  test_m1 test_m1_I( .PADDO(test_m1_c), .test_m1(test_m1));
  test_l2 test_l2_I( .PADDO(test_l2_c), .test_l2(test_l2));
  test_l1 test_l1_I( .PADDO(test_l1_c), .test_l1(test_l1));
  led4_muteout led4_muteout_I( .PADDO(led4_muteout_c), 
    .led4_muteout(led4_muteout));
  volplus_mute volplus_mute_I( .PADDI(volplus_mute_c), 
    .volplus_mute(volplus_mute));
  volplus_mute_MGIOL volplus_mute_MGIOL( .DI(volplus_mute_c), 
    .CE(\op_and.op_and.result ), .CLK(test_l1_c), .IN(mute_btn_internal));
  fmexg_mic_sync fmexg_mic_sync_I( .PADDI(fmexg_mic_sync_c), 
    .fmexg_mic_sync(fmexg_mic_sync));
  adc_interrupt adc_interrupt_I( .PADDO(adc_interrupt_c), 
    .adc_interrupt(adc_interrupt));
  adc_pdwn adc_pdwn_I( .PADDO(GND), .adc_pdwn(adc_pdwn));
  adc_clk adc_clk_I( .PADDO(\e_fmexg_core.clkdiv12_i ), .adc_clk(adc_clk));
  spi4_cs spi4_cs_I( .PADDI(spi4_cs_c), .spi4_cs(spi4_cs));
  spi4_miso spi4_miso_I( .IOLDO(spi4_miso_c), .spi4_miso(spi4_miso));
  spi4_miso_MGIOL spi4_miso_MGIOL( .IOLDO(spi4_miso_c), 
    .OPOS(\e_fmexg_core.two_samples_3[0] ), .CE(spi4_cs_c), .CLK(spi4_clk_c));
  spi4_clk spi4_clk_I( .PADDI(spi4_clk_c), .spi4_clk(spi4_clk));
  spi3_cs3 spi3_cs3_I( .PADDI(spi3_cs3_c), .spi3_cs3(spi3_cs3));
  spi3_cs0 spi3_cs0_I( .PADDI(spi3_cs0_c), .spi3_cs0(spi3_cs0));
  spi3_miso spi3_miso_I( .IOLDO(spi_miso_internal_0), .PADDT(N_24_i), 
    .spi3_miso(spi3_miso));
  spi3_miso_MGIOL spi3_miso_MGIOL( .IOLDO(spi_miso_internal_0), .OPOS(N_20_i), 
    .CE(djb_got169_0_a4_1_RNI9CI52), .CLK(hr_clk_0));
  spi3_mosi spi3_mosi_I( .PADDI(spi3_mosi_c), .spi3_mosi(spi3_mosi));
  spi3_clk spi3_clk_I( .PADDI(spi3_clk_c), .spi3_clk(spi3_clk));
  spi1_cs2 spi1_cs2_I( .PADDI(spi1_cs2_c), .spi1_cs2(spi1_cs2));
  spi1_cs0 spi1_cs0_I( .PADDI(spi1_cs0_c), .spi1_cs0(spi1_cs0));
  spi1_mosi spi1_mosi_I( .PADDI(spi1_mosi_c), .spi1_mosi(spi1_mosi));
  spi1_clk spi1_clk_I( .PADDI(spi1_clk_c), .spi1_clk(spi1_clk));
  i2s2_d1 i2s2_d1_I( .IOLDO(i2s2_d1_c), .i2s2_d1(i2s2_d1));
  i2s2_d1_MGIOL i2s2_d1_MGIOL( .IOLDO(i2s2_d1_c), 
    .OPOS(\r_car_core.e_i2s_dio.out_i2s_sr.buf_4[7] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0));
  i2s2_d0 i2s2_d0_I( .IOLDO(i2s2_d0_c), .i2s2_d0(i2s2_d0));
  i2s2_d0_MGIOL i2s2_d0_MGIOL( .IOLDO(i2s2_d0_c), 
    .OPOS(\l_car_core.e_i2s_dio.out_i2s_sr.buf_4[7] ), .CE(\buf_cnv_0[0] ), 
    .CLK(hr_clk_0));
  i2s2_ws i2s2_ws_I( .PADDO(i2s_ws), .i2s2_ws(i2s2_ws));
  i2s2_sck i2s2_sck_I( .PADDO(i2s_sck), .i2s2_sck(i2s2_sck));
  i2s1_d0 i2s1_d0_I( .PADDI(i2s1_d0_c), .i2s1_d0(i2s1_d0));
  i2s1_d0_MGIOL i2s1_d0_MGIOL( .DI(i2s1_d0_c), .CE(\buf_cnv[0] ), 
    .CLK(hr_clk_0), .IN(\l_car_core.e_i2s_dio.in_1[0] ));
  i2s1_ws i2s1_ws_I( .PADDO(i2s_ws), .i2s1_ws(i2s1_ws));
  r_lvds_io r_lvds_io_I( .PADDI(r_lvds_io_in), 
    .PADDT(\r_car_core.e_car_sequencer.lvds_io_tri_enable_i ), 
    .PADDO(lvds_io_1_0), .r_lvds_io(r_lvds_io));
  r_lvds_io_MGIOL r_lvds_io_MGIOL( .DI(r_lvds_io_in), 
    .CE(djb_got167_0_a3_RNI39NJ1), .CLK(hr_clk_0), 
    .IN(\r_car_core.e_car_sequencer.djb_got16 ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_0_11 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_0_11 ( 
    .DIA1(\e_fmexg_core/rampcounter[0] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .AF(adc_interrupt_c), 
    .FF(\e_fmexg_core/fifo/Full ), .EF(\e_fmexg_core/fifo/Empty ), 
    .CSB2(\e_fmexg_core/fifo/Empty ), .CLKB(spi4_clk_c), 
    .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[0] ), 
    .DIB2(\e_fmexg_core/rampcounter[0] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_11_0 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_11_0 ( 
    .DIA1(\e_fmexg_core/rampcounter[11] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[11] ), 
    .DIB2(\e_fmexg_core/rampcounter[11] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_10_1 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_10_1 ( 
    .DIA1(\e_fmexg_core/rampcounter[10] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[10] ), 
    .DIB2(\e_fmexg_core/rampcounter[10] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_9_2 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_9_2 ( 
    .DIA1(\e_fmexg_core/rampcounter[9] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[9] ), 
    .DIB2(\e_fmexg_core/rampcounter[9] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_8_3 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_8_3 ( 
    .DIA1(\e_fmexg_core/rampcounter[8] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[8] ), 
    .DIB2(\e_fmexg_core/rampcounter[8] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_7_4 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_7_4 ( 
    .DIA1(\e_fmexg_core/rampcounter[7] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[7] ), 
    .DIB2(\e_fmexg_core/rampcounter[7] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_6_5 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_6_5 ( 
    .DIA1(\e_fmexg_core/rampcounter[6] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[6] ), 
    .DIB2(\e_fmexg_core/rampcounter[6] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_5_6 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_5_6 ( 
    .DIA1(\e_fmexg_core/rampcounter[5] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[5] ), 
    .DIB2(\e_fmexg_core/rampcounter[5] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_4_7 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_4_7 ( 
    .DIA1(\e_fmexg_core/rampcounter[4] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[4] ), 
    .DIB2(\e_fmexg_core/rampcounter[4] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_3_8 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_3_8 ( 
    .DIA1(\e_fmexg_core/rampcounter[3] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[3] ), 
    .DIB2(\e_fmexg_core/rampcounter[3] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_2_9 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_2_9 ( 
    .DIA1(\e_fmexg_core/rampcounter[2] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[2] ), 
    .DIB2(\e_fmexg_core/rampcounter[2] ));
  e_fmexg_core_fifo_fmexg_fifo_8k_1025_1_10 
    \e_fmexg_core/fifo/fmexg_fifo_8k_1025_1_10 ( 
    .DIA1(\e_fmexg_core/rampcounter[1] ), .CLKA(\e_fmexg_core/clkdiv12 ), 
    .CSA2(\e_fmexg_core/fifo/Full ), .CSB2(\e_fmexg_core/fifo/Empty ), 
    .CLKB(spi4_clk_c), .OCEB(\e_fmexg_core/fifo_readclk_en ), 
    .CEB(\e_fmexg_core/fifo_readclk_en ), .DOB0(\e_fmexg_core/fifo_Q[1] ), 
    .DIB2(\e_fmexg_core/rampcounter[1] ));
  e_pll_4_PLLInst_0 \e_pll_4/PLLInst_0 ( .CLKI(test_l1_c), .CLKFB(hr_clk_0), 
    .CLKOP(hr_clk_0));
  GSR_INST GSR_INST( .GSRNET(~spi4_cs_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input A1, DI1, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \mute_debounce_counter[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \mute_debounce_counter_cry_0[0] ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module l_car_core_e_i2s_dio_SLICE_1 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/lvds_bit_ctr[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/lvds_bit_ctr[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \l_car_core/e_i2s_dio/lvds_bit_ctr_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'h5008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module l_car_core_e_i2s_dio_SLICE_2 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/lvds_bit_ctr[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/lvds_bit_ctr[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \l_car_core/e_i2s_dio/lvds_bit_ctr_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF00D;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module l_car_core_e_i2s_dio_SLICE_3 ( input B1, A1, B0, DI1, CE, CLK, output 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/lvds_bit_ctr[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20003 \l_car_core/e_i2s_dio/lvds_bit_ctr_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module e_fmexg_core_SLICE_4 ( input A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \e_fmexg_core/rampcounter_s_0[11] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5002;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module e_fmexg_core_SLICE_5 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/rampcounter[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_fmexg_core/rampcounter_cry_0[9] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module e_fmexg_core_SLICE_6 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/rampcounter[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_fmexg_core/rampcounter_cry_0[7] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_fmexg_core_SLICE_7 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/rampcounter[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_fmexg_core/rampcounter_cry_0[5] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_fmexg_core_SLICE_8 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/rampcounter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_fmexg_core/rampcounter_cry_0[3] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_fmexg_core_SLICE_9 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/rampcounter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_fmexg_core/rampcounter_cry_0[1] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_fmexg_core_SLICE_10 ( input A1, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \e_fmexg_core/rampcounter[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \e_fmexg_core/rampcounter_cry_0[0] ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_car_clock_gen_SLICE_11 ( input A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \e_car_clock_gen/lvds_ctr[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \e_car_clock_gen/lvds_ctr_s_0[7] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_car_clock_gen_SLICE_12 ( input A1, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_car_clock_gen/lvds_ctr[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_car_clock_gen/lvds_ctr[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_car_clock_gen/lvds_ctr_cry_0[5] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_car_clock_gen_SLICE_13 ( input A1, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_car_clock_gen/lvds_ctr[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_car_clock_gen/lvds_ctr[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_car_clock_gen/lvds_ctr_cry_0[3] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_car_clock_gen_SLICE_14 ( input A1, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \e_car_clock_gen/lvds_ctr[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_car_clock_gen/lvds_ctr[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \e_car_clock_gen/lvds_ctr_cry_0[1] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_car_clock_gen_SLICE_15 ( input A1, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \e_car_clock_gen/lvds_ctr[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu2 \e_car_clock_gen/lvds_ctr_cry_0[0] ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_16 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[16] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[15] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20006 \mute_debounce_counter_cry_0[15] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5002;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_17 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[13] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_18 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[11] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_19 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[9] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_20 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[7] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_21 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[5] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_22 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[3] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_23 ( input A1, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \mute_debounce_counter[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \mute_debounce_counter[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \mute_debounce_counter_cry_0[1] ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_24 ( input B1, A1, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut4 \l_car_core/e_car_sequencer/SUM1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \e_car_clock_gen/divider_RNO[0] ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \e_car_clock_gen/divider[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e_car_clock_gen/divider[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_car_clock_gen_SLICE_25 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40008 \e_car_clock_gen/un15_lvds_ctr_1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 \e_car_clock_gen/un15_lvds_ctr ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \e_car_clock_gen/seq_reset ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_26 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40010 \e_fmexg_core/counter_div12_RNIE2LQ1[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40011 \e_fmexg_core/clkdiv12_mx ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e_fmexg_core/clkdiv12 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA6AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_27 ( input C1, B1, A1, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40012 \e_fmexg_core/counter_div12_3[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \e_fmexg_core/counter_div12_RNO[0] ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \e_fmexg_core/counter_div12[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e_fmexg_core/counter_div12[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4646) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_28 ( input A1, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40007 \e_fmexg_core/clkdiv12_RNIHSIE ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40013 \e_fmexg_core/counter_div12_3[2] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/counter_div12[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5858) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_29 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, CE_NOTIN, CLK_NOTIN, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40010 \e_fmexg_core/un6_spi_cs ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e_fmexg_core/fifo_readclk_en ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module e_fmexg_core_SLICE_36 ( input B1, A1, A0, DI1, DI0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut4 \e_fmexg_core/spi_bit_ctr_RNO[1] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \e_fmexg_core/spi_bit_ctr_RNO[0] ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0014 \e_fmexg_core/spi_bit_ctr[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \e_fmexg_core/spi_bit_ctr[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0014 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module e_fmexg_core_SLICE_37 ( input B1, A1, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40008 \e_fmexg_core/un15_spi_cs_1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \e_fmexg_core/spi_bit_ctr_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \e_fmexg_core/spi_bit_ctr[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_38 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40016 \e_fmexg_core/spi_byte_ctr_5[1] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40017 \e_fmexg_core/spi_byte_ctr_RNO[0] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \e_fmexg_core/spi_byte_ctr[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e_fmexg_core/spi_byte_ctr[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2C2C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1A1A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_39 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[2] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[1] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module e_fmexg_core_SLICE_40 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[4] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[3] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_41 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[6] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[5] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_42 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[8] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[7] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_43 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[10] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[9] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_44 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[12] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[11] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[12] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_45 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[14] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[13] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[14] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[13] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_46 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[16] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[15] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[16] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[15] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_47 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[18] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[17] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[18] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[17] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_48 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[20] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[19] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[20] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[19] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_49 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \e_fmexg_core/two_samples_3[22] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \e_fmexg_core/two_samples_3[21] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \e_fmexg_core/two_samples[22] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/two_samples[21] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_50 ( input B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, CE_NOTIN, CLK_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40019 \e_fmexg_core/two_samples_3[23] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/two_samples[23] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_51 ( input B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40020 \l_car_core/e_car_sequencer/un63_djb_present_0_o3 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40021 \l_car_core/e_car_sequencer/un63_djb_present_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvds_io_tri_enable_i ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA1A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_i2s_dio_SLICE_52 ( input D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40022 \l_car_core/e_i2s_dio/un10_lvds_bit_ctr ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/cycle_begin ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_57 ( input C1, B1, A1, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40023 \r_car_core/e_i2s_dio/out_reg_1/reg_cnv[0] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \l_car_core/e_car_sequencer/lvdscounter_RNO[0] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A6A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_60 ( input B0, A0, DI0, M1, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40025 \l_car_core/e_car_sequencer/un12_djb_present_axbxc1 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter_pipe_1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9999) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_SLICE_61 ( input B1, A1, C0, B0, A0, DI0, M1, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40019 \l_car_core/N_54_i ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \l_car_core/e_car_sequencer/lvdscounter_pipe_2_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter[2] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter_pipe_2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA6A6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_62 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, M1, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40010 \l_car_core/e_car_sequencer/djb_present_RNO ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40027 \l_car_core/e_car_sequencer/lvdscounter_pipe_3_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter[3] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter_pipe_3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC6C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_63 ( input D0, C0, B0, A0, DI0, M1, CE, 
    CLK, output F0, Q0, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40028 \l_car_core/e_car_sequencer/un12_djb_present_axbxc4 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter[4] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter_pipe_4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_64 ( input B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40029 \l_car_core/e_car_sequencer/un12_djb_present_ac0_1 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \l_car_core/e_car_sequencer/un12_djb_present_ac0_7 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvdscounter_pipe_5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_i2s_dio_SLICE_65 ( input B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40029 \l_car_core/e_i2s_dio/un17_lvds_bit_ctr ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/i2s_in_shiften ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_SLICE_66 ( input B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40019 \l_car_core/e_i2s_dio/un10_lvds_bit_ctr_1 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/i2s_out_shiften ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_in_lvds_sr_SLICE_75 ( input C1, B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_in_lvds_sr_SLICE_76 ( input C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_in_lvds_sr_SLICE_77 ( input C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_in_lvds_sr_SLICE_78 ( input C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_i2s_sr_SLICE_92 ( input C1, B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_i2s_dio_out_i2s_sr_SLICE_93 ( input C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_i2s_sr_SLICE_94 ( input C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_i2s_sr_SLICE_95 ( input C1, B1, A1, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[7] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \l_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_i2s_sr/buf[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_car_sequencer_SLICE_97 ( input B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40031 \l_car_core/e_car_sequencer/i2s_mic_dat_3_i_0 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \l_car_core/e_car_sequencer/i2s_mic_dat_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/i2s_mic_dat ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_98 ( input D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40022 \l_car_core/e_car_sequencer/i2s_mic_ld_1_0_a3 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/i2s_mic_ld ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_car_sequencer_SLICE_99 ( input C1, B1, A1, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40033 \l_car_core/e_car_sequencer/i2s_mic_dat_3_i_x3 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \l_car_core/e_car_sequencer/i2s_mic_sh_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/i2s_mic_sh ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1E1E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_i2s_dio_in_lvds_sr_SLICE_100 ( input C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \l_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/in_lvds_sr/buf[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_car_sequencer_SLICE_101 ( input D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40034 \l_car_core/e_car_sequencer/i2s_spkr_ld_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/i2s_spkr_ld ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_102 ( input D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40035 \l_car_core/e_car_sequencer/i2s_spkr_sh_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/i2s_spkr_sh ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h001E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_103 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40022 \op_and.op_and.result ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40036 muted_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre muted( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_car_sequencer_SLICE_104 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40037 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40038 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/lvds_io_1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module r_car_core_e_car_sequencer_SLICE_105 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40039 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40038 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/lvds_io_1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF1F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module r_car_core_e_car_sequencer_SLICE_106 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40020 \r_car_core/e_car_sequencer/un63_djb_present_0_o3 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40021 \r_car_core/e_car_sequencer/un63_djb_present_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/lvds_io_tri_enable_i ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_car_sequencer_SLICE_107 ( input B0, A0, DI0, CE, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40029 \r_car_core/e_car_sequencer/un2_djb_got16 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_car_sequencer/djb_present ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_SLICE_108 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40040 \r_car_core/e_i2s_dio/in_lvds_sr/buf_cnv[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40024 \r_car_core/e_car_sequencer/lvdscounter_RNO[0] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module r_car_core_e_car_sequencer_SLICE_111 ( input B0, A0, DI0, M1, CE, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40025 \r_car_core/e_car_sequencer/un12_djb_present_axbxc1 ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter_pipe_1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_car_sequencer_SLICE_112 ( input C0, B0, A0, DI0, M1, CE, 
    CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40026 \r_car_core/e_car_sequencer/lvdscounter_pipe_2_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter[2] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter_pipe_2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_SLICE_113 ( input B1, A1, D0, C0, B0, A0, DI0, M1, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40019 \r_car_core/N_24_i ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40027 \r_car_core/e_car_sequencer/lvdscounter_pipe_3_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter[3] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter_pipe_3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_car_sequencer_SLICE_114 ( input D0, C0, B0, A0, DI0, M1, 
    CE, CLK, output F0, Q0, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40028 \r_car_core/e_car_sequencer/un12_djb_present_axbxc4 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter[4] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter_pipe_4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_car_sequencer_SLICE_115 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40029 \r_car_core/e_car_sequencer/un12_djb_present_ac0_1 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \r_car_core/e_car_sequencer/un12_djb_present_ac0_7 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/lvdscounter_pipe_5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_in_lvds_sr_SLICE_116 ( input C1, B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[1] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[0] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_in_lvds_sr_SLICE_117 ( input C1, B1, A1, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[3] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[2] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_in_lvds_sr_SLICE_118 ( input C1, B1, A1, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[4] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_in_lvds_sr_SLICE_119 ( input C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[6] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_i2s_sr_SLICE_132 ( input C1, B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[1] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[0] ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_i2s_sr_SLICE_133 ( input C1, B1, A1, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[3] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[2] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_i2s_sr_SLICE_134 ( input C1, B1, A1, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[5] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[4] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_i2s_sr_SLICE_135 ( input C1, B1, A1, C0, B0, 
    A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[7] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \r_car_core/e_i2s_dio/out_i2s_sr/buf_4[6] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_car_core/e_i2s_dio/out_i2s_sr/buf[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_136 ( input D1, C1, B1, A1, C0, B0, A0, DI0, M1, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40041 \r_car_core/e_car_sequencer/i2s_mic_dat_3_1_i ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40042 \r_car_core/e_car_sequencer/i2s_mic_dat_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/i2s_lr_st_pre ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_car_core/e_car_sequencer/i2s_mic_dat ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module r_car_core_e_car_sequencer_SLICE_137 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40043 \r_car_core/e_car_sequencer/djb_got169_0_a4_1 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40044 \r_car_core/e_car_sequencer/i2s_mic_ld_1_0_a4 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/i2s_mic_ld ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module r_car_core_e_car_sequencer_SLICE_138 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40020 \r_car_core/e_car_sequencer/i2s_mic_dat_3_i_o4 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \r_car_core/e_car_sequencer/i2s_mic_sh_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/i2s_mic_sh ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0056) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module r_car_core_e_i2s_dio_in_lvds_sr_SLICE_139 ( input C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \r_car_core/e_i2s_dio/in_lvds_sr/buf_4[7] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/in_lvds_sr/buf[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_car_sequencer_SLICE_140 ( input B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40019 \r_car_core/e_car_sequencer/djb_present_RNIKGFO ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40044 \r_car_core/e_car_sequencer/i2s_spkr_ld_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/i2s_spkr_ld ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_car_sequencer_SLICE_141 ( input D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40035 \r_car_core/e_car_sequencer/i2s_spkr_sh_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_car_core/e_car_sequencer/i2s_spkr_sh ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_142 ( input B1, A1, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut4 \test_counter_RNO[1] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40007 \test_counter_RNO[0] ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \test_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \test_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_143 ( input C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40015 \test_counter_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \test_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_144 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40046 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 \test_counter_RNO[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \test_counter[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_145 ( input D1, C1, B1, A1, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40022 \op_and.op_and.result_9 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40007 \e_car_clock_gen/seq_reset_RNINRA1 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/lrst_1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/i2s_ws ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_car_sequencer_SLICE_146 ( input B1, A1, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40019 \l_car_core/e_car_sequencer/spi_miso_1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \l_car_core/e_car_sequencer/un2_djb_got16 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_car_sequencer/djb_present ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_147 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40049 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[7] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[6] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3313) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2301) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_SLICE_148 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40048 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40049 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[5] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_149 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40022 \op_and.op_and.result_12 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40019 \op_and.op_and.result_7 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[1] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_150 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40050 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_151 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40052 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 \r_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a4_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[5] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5410) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_152 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40053 \r_car_core/e_car_sequencer/i2s_spkr_sh_2_i_o4 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 \r_car_core/e_car_sequencer/i2s_spkr_sh_2_i ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[1] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_2/reg[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_153 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40043 \l_car_core/e_car_sequencer/G_82 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \r_car_core/e_car_sequencer/djb_got167_0_a3_RNI39NJ1 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_154 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40019 \r_car_core/e_car_sequencer/lvdscounter_RNI70CJ[4] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40010 \r_car_core/e_car_sequencer/djb_got169_0_a4_1_RNI9CI52 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[5] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_155 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40050 \r_car_core/e_car_sequencer/djb_got167_0_a3 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \r_car_core/e_car_sequencer/djb_present_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[7] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_reg_1/reg[6] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_156 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40055 \l_car_core/e_car_sequencer/lvdscounter_RNIFH3E1[1] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40056 \l_car_core/e_car_sequencer/lvdscounter_RNIJSM32[2] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e_fmexg_core/first_sample[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/first_sample[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_157 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40050 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a2 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e_fmexg_core/first_sample[9] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/first_sample[8] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module l_car_core_SLICE_158 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40052 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40010 \l_car_core/e_car_sequencer/un1_i2s_spkr_dat_iv_0_a3_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_159 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40031 \l_car_core/e_car_sequencer/i2s_spkr_sh_2_i_o3 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40054 \l_car_core/e_car_sequencer/i2s_spkr_sh_2_i ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e_fmexg_core/first_sample[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/first_sample[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_160 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40042 \l_car_core/e_car_sequencer/djb_got169_0_a2 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40022 \l_car_core/e_car_sequencer/djb_got169_0_a2_RNIISCH1 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e_fmexg_core/first_sample[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/first_sample[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_161 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40055 \e_fmexg_core/un15_spi_cs ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40018 \e_fmexg_core/two_samples_3[0] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/first_sample[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/first_sample[11] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module e_fmexg_core_SLICE_162 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40057 \e_fmexg_core/spi_byte_ctr_0_sqmuxa_1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40058 \e_fmexg_core/spi_byte_ctr_0_sqmuxa ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e_fmexg_core/first_sample[10] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \e_fmexg_core/first_sample[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module l_car_core_e_i2s_dio_SLICE_163 ( input C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40023 \l_car_core/e_i2s_dio/cycle_begin_RNIT3T51 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \l_car_core/e_i2s_dio/out_i2s_sr/buf_cnv[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_164 ( input B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40019 \e_car_clock_gen/un2_divider ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \r_car_core/e_i2s_dio/out_lvds_sr/buf_cnv[0] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[1] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_SLICE_165 ( input C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40023 \l_car_core/e_i2s_dio/out_lvds_sr/buf_cnv[0] ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40040 \l_car_core/e_i2s_dio/in_lvds_sr/buf_cnv[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_SLICE_166 ( input C1, B1, A1, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40023 \l_car_core/e_i2s_dio/out_reg_1/reg_cnv[0] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 \l_car_core/e_i2s_dio/in_i2s_sr/buf_cnv[0] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_167 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40022 \op_and.op_and.result_10 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 \op_and.op_and.result_11 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \l_car_core/e_i2s_dio/in_i2s_sr/buf[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_lvds_sr_SLICE_190 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_lvds_sr/buf[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_1_SLICE_191 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_1_SLICE_192 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_1_SLICE_193 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_1_SLICE_194 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_1/reg[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_2_SLICE_195 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_2_SLICE_196 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_2_SLICE_197 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_car_core_e_i2s_dio_out_reg_2_SLICE_198 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \l_car_core/e_i2s_dio/out_reg_2/reg[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_lvds_sr_SLICE_201 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_lvds_sr_SLICE_202 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_lvds_sr_SLICE_203 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_lvds_sr_SLICE_204 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_lvds_sr/buf[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_1_SLICE_205 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_1_SLICE_206 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_1_SLICE_207 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_1_SLICE_208 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_1/reg[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_2_SLICE_209 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_2_SLICE_210 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_2_SLICE_211 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module r_car_core_e_i2s_dio_out_reg_2_SLICE_212 ( input M1, M0, CE, CLK, 
    output Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[6] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_car_core/e_i2s_dio/out_reg_2/reg[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module l_lvds_io ( output PADDI, input PADDT, PADDO, inout l_lvds_io );

  xo2iobuf l_lvds_io_pad( .I(PADDO), .T(PADDT), .Z(PADDI), .PAD(l_lvds_io), 
    .PADI(l_lvds_io));

  specify
    (PADDT => l_lvds_io) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => l_lvds_io) = (0:0:0,0:0:0);
    (l_lvds_io => PADDI) = (0:0:0,0:0:0);
    $width (posedge l_lvds_io, 0:0:0);
    $width (negedge l_lvds_io, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IB INST1( .I(PADI), .O(Z));
  OBZ INST2( .I(I), .T(T), .O(PAD));
endmodule

module l_lvds_io_MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre l_car_core_e_car_sequencer_djb_got16io( .D0(DI_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module spi1_miso ( input IOLDO, PADDT, output spi1_miso );

  xo2iobuf0060 spi1_miso_pad( .I(IOLDO), .T(PADDT), .PAD(spi1_miso));

  specify
    (IOLDO => spi1_miso) = (0:0:0,0:0:0);
    (PADDT => spi1_miso) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0060 ( input I, T, output PAD );

  OBZ INST5( .I(I), .T(T), .O(PAD));
endmodule

module spi1_miso_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre l_car_core_e_car_sequencer_spi_misoio( .D0(OPOS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module i2s1_sck ( input PADDO, output i2s1_sck );

  xo2iobuf0061 i2s1_sck_pad( .I(PADDO), .PAD(i2s1_sck));

  specify
    (PADDO => i2s1_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0061 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module ext_clk_in ( output PADDI, input ext_clk_in );

  xo2iobuf0062 ext_clk_in_pad( .Z(PADDI), .PAD(ext_clk_in));

  specify
    (ext_clk_in => PADDI) = (0:0:0,0:0:0);
    $width (posedge ext_clk_in, 0:0:0);
    $width (negedge ext_clk_in, 0:0:0);
  endspecify

endmodule

module xo2iobuf0062 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module test_m2 ( input PADDO, output test_m2 );

  xo2iobuf0063 test_m2_pad( .I(PADDO), .PAD(test_m2));

  specify
    (PADDO => test_m2) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0063 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module test_m1 ( input PADDO, output test_m1 );

  xo2iobuf0063 test_m1_pad( .I(PADDO), .PAD(test_m1));

  specify
    (PADDO => test_m1) = (0:0:0,0:0:0);
  endspecify

endmodule

module test_l2 ( input PADDO, output test_l2 );

  xo2iobuf0063 test_l2_pad( .I(PADDO), .PAD(test_l2));

  specify
    (PADDO => test_l2) = (0:0:0,0:0:0);
  endspecify

endmodule

module test_l1 ( input PADDO, output test_l1 );

  xo2iobuf0063 test_l1_pad( .I(PADDO), .PAD(test_l1));

  specify
    (PADDO => test_l1) = (0:0:0,0:0:0);
  endspecify

endmodule

module led4_muteout ( input PADDO, output led4_muteout );

  xo2iobuf0063 led4_muteout_pad( .I(PADDO), .PAD(led4_muteout));

  specify
    (PADDO => led4_muteout) = (0:0:0,0:0:0);
  endspecify

endmodule

module volplus_mute ( output PADDI, input volplus_mute );

  xo2iobuf0064 volplus_mute_pad( .Z(PADDI), .PAD(volplus_mute));

  specify
    (volplus_mute => PADDI) = (0:0:0,0:0:0);
    $width (posedge volplus_mute, 0:0:0);
    $width (negedge volplus_mute, 0:0:0);
  endspecify

endmodule

module xo2iobuf0064 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module volplus_mute_MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre mute_btn_internal_0io( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(IN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module fmexg_mic_sync ( output PADDI, input fmexg_mic_sync );

  xo2iobuf0064 fmexg_mic_sync_pad( .Z(PADDI), .PAD(fmexg_mic_sync));

  specify
    (fmexg_mic_sync => PADDI) = (0:0:0,0:0:0);
    $width (posedge fmexg_mic_sync, 0:0:0);
    $width (negedge fmexg_mic_sync, 0:0:0);
  endspecify

endmodule

module adc_interrupt ( input PADDO, output adc_interrupt );

  xo2iobuf0061 adc_interrupt_pad( .I(PADDO), .PAD(adc_interrupt));

  specify
    (PADDO => adc_interrupt) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_pdwn ( input PADDO, output adc_pdwn );

  xo2iobuf0063 adc_pdwn_pad( .I(PADDO), .PAD(adc_pdwn));

  specify
    (PADDO => adc_pdwn) = (0:0:0,0:0:0);
  endspecify

endmodule

module adc_clk ( input PADDO, output adc_clk );

  xo2iobuf0063 adc_clk_pad( .I(PADDO), .PAD(adc_clk));

  specify
    (PADDO => adc_clk) = (0:0:0,0:0:0);
  endspecify

endmodule

module spi4_cs ( output PADDI, input spi4_cs );

  xo2iobuf0064 spi4_cs_pad( .Z(PADDI), .PAD(spi4_cs));

  specify
    (spi4_cs => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi4_cs, 0:0:0);
    $width (negedge spi4_cs, 0:0:0);
  endspecify

endmodule

module spi4_miso ( input IOLDO, output spi4_miso );

  xo2iobuf0061 spi4_miso_pad( .I(IOLDO), .PAD(spi4_miso));

  specify
    (IOLDO => spi4_miso) = (0:0:0,0:0:0);
  endspecify

endmodule

module spi4_miso_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   CE_NOTIN, CLK_NOTIN, GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \e_fmexg_core_two_samplesio[0] ( .D0(OPOS_dly), .SP(CE_NOTIN), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(IOLDO));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module spi4_clk ( output PADDI, input spi4_clk );

  xo2iobuf0064 spi4_clk_pad( .Z(PADDI), .PAD(spi4_clk));

  specify
    (spi4_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi4_clk, 0:0:0);
    $width (negedge spi4_clk, 0:0:0);
  endspecify

endmodule

module spi3_cs3 ( output PADDI, input spi3_cs3 );

  xo2iobuf0064 spi3_cs3_pad( .Z(PADDI), .PAD(spi3_cs3));

  specify
    (spi3_cs3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi3_cs3, 0:0:0);
    $width (negedge spi3_cs3, 0:0:0);
  endspecify

endmodule

module spi3_cs0 ( output PADDI, input spi3_cs0 );

  xo2iobuf0064 spi3_cs0_pad( .Z(PADDI), .PAD(spi3_cs0));

  specify
    (spi3_cs0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi3_cs0, 0:0:0);
    $width (negedge spi3_cs0, 0:0:0);
  endspecify

endmodule

module spi3_miso ( input IOLDO, PADDT, output spi3_miso );

  xo2iobuf0060 spi3_miso_pad( .I(IOLDO), .T(PADDT), .PAD(spi3_miso));

  specify
    (IOLDO => spi3_miso) = (0:0:0,0:0:0);
    (PADDT => spi3_miso) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
  endspecify

endmodule

module spi3_miso_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre r_car_core_e_car_sequencer_spi_misoio( .D0(OPOS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module spi3_mosi ( output PADDI, input spi3_mosi );

  xo2iobuf0064 spi3_mosi_pad( .Z(PADDI), .PAD(spi3_mosi));

  specify
    (spi3_mosi => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi3_mosi, 0:0:0);
    $width (negedge spi3_mosi, 0:0:0);
  endspecify

endmodule

module spi3_clk ( output PADDI, input spi3_clk );

  xo2iobuf0064 spi3_clk_pad( .Z(PADDI), .PAD(spi3_clk));

  specify
    (spi3_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi3_clk, 0:0:0);
    $width (negedge spi3_clk, 0:0:0);
  endspecify

endmodule

module spi1_cs2 ( output PADDI, input spi1_cs2 );

  xo2iobuf0064 spi1_cs2_pad( .Z(PADDI), .PAD(spi1_cs2));

  specify
    (spi1_cs2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi1_cs2, 0:0:0);
    $width (negedge spi1_cs2, 0:0:0);
  endspecify

endmodule

module spi1_cs0 ( output PADDI, input spi1_cs0 );

  xo2iobuf0064 spi1_cs0_pad( .Z(PADDI), .PAD(spi1_cs0));

  specify
    (spi1_cs0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi1_cs0, 0:0:0);
    $width (negedge spi1_cs0, 0:0:0);
  endspecify

endmodule

module spi1_mosi ( output PADDI, input spi1_mosi );

  xo2iobuf0064 spi1_mosi_pad( .Z(PADDI), .PAD(spi1_mosi));

  specify
    (spi1_mosi => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi1_mosi, 0:0:0);
    $width (negedge spi1_mosi, 0:0:0);
  endspecify

endmodule

module spi1_clk ( output PADDI, input spi1_clk );

  xo2iobuf0064 spi1_clk_pad( .Z(PADDI), .PAD(spi1_clk));

  specify
    (spi1_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge spi1_clk, 0:0:0);
    $width (negedge spi1_clk, 0:0:0);
  endspecify

endmodule

module i2s2_d1 ( input IOLDO, output i2s2_d1 );

  xo2iobuf0061 i2s2_d1_pad( .I(IOLDO), .PAD(i2s2_d1));

  specify
    (IOLDO => i2s2_d1) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2s2_d1_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \r_car_core_e_i2s_dio_out_i2s_sr_bufio[7] ( .D0(OPOS_dly), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2s2_d0 ( input IOLDO, output i2s2_d0 );

  xo2iobuf0061 i2s2_d0_pad( .I(IOLDO), .PAD(i2s2_d0));

  specify
    (IOLDO => i2s2_d0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2s2_d0_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre \l_car_core_e_i2s_dio_out_i2s_sr_bufio[7] ( .D0(OPOS_dly), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2s2_ws ( input PADDO, output i2s2_ws );

  xo2iobuf0061 i2s2_ws_pad( .I(PADDO), .PAD(i2s2_ws));

  specify
    (PADDO => i2s2_ws) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2s2_sck ( input PADDO, output i2s2_sck );

  xo2iobuf0061 i2s2_sck_pad( .I(PADDO), .PAD(i2s2_sck));

  specify
    (PADDO => i2s2_sck) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2s1_d0 ( output PADDI, input i2s1_d0 );

  xo2iobuf0064 i2s1_d0_pad( .Z(PADDI), .PAD(i2s1_d0));

  specify
    (i2s1_d0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge i2s1_d0, 0:0:0);
    $width (negedge i2s1_d0, 0:0:0);
  endspecify

endmodule

module i2s1_d0_MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre \l_car_core_e_i2s_dio_in_i2s_sr_bufio[0] ( .D0(DI_dly), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(IN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2s1_ws ( input PADDO, output i2s1_ws );

  xo2iobuf0061 i2s1_ws_pad( .I(PADDO), .PAD(i2s1_ws));

  specify
    (PADDO => i2s1_ws) = (0:0:0,0:0:0);
  endspecify

endmodule

module r_lvds_io ( output PADDI, input PADDT, PADDO, inout r_lvds_io );

  xo2iobuf r_lvds_io_pad( .I(PADDO), .T(PADDT), .Z(PADDI), .PAD(r_lvds_io), 
    .PADI(r_lvds_io));

  specify
    (PADDT => r_lvds_io) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => r_lvds_io) = (0:0:0,0:0:0);
    (r_lvds_io => PADDI) = (0:0:0,0:0:0);
    $width (posedge r_lvds_io, 0:0:0);
    $width (negedge r_lvds_io, 0:0:0);
  endspecify

endmodule

module r_lvds_io_MGIOL ( input DI, CE, CLK, output IN );
  wire   GNDI, DI_dly, CLK_dly, CE_dly;

  smuxlregsre r_car_core_e_car_sequencer_djb_got16io( .D0(DI_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_0_11 ( input DIA1, CLKA, CSA2, 
    output AF, FF, EF, input CSB2, CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB_B \e_fmexg_core/fifo/fmexg_fifo_8k_1025_0_11_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(EF), .AEF(), .AFF(AF), .FF(FF));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKA => AF) = (0:0:0,0:0:0);
    (CLKA => FF) = (0:0:0,0:0:0);
    (CLKB => EF) = (0:0:0,0:0:0);
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB_B ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b00000000001010";
  defparam INST10.AEPOINTER1 = "0b00000000001011";
  defparam INST10.AFPOINTER = "0b00010000000001";
  defparam INST10.AFPOINTER1 = "0b00010000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b10000000000000";
  defparam INST10.FULLPOINTER1 = "0b01111111111111";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_11_0 ( input DIA1, CLKA, CSA2, 
    CSB2, CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0065 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_11_0_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0065 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_10_1 ( input DIA1, CLKA, CSA2, 
    CSB2, CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0066 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_10_1_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0066 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_9_2 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0067 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_9_2_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0067 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_8_3 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0068 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_8_3_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0068 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_7_4 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0069 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_7_4_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0069 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_6_5 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0070 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_6_5_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0070 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_5_6 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0071 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_5_6_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0071 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_4_7 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0072 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_4_7_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0072 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_3_8 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0073 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_3_8_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0073 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_2_9 ( input DIA1, CLKA, CSA2, CSB2, 
    CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0074 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_2_9_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0074 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_fmexg_core_fifo_fmexg_fifo_8k_1025_1_10 ( input DIA1, CLKA, CSA2, 
    CSB2, CLKB, OCEB, CEB, output DOB0, input DIB2 );
  wire   GNDI, VCCI, DIA1_dly, CLKA_dly, CSA2_dly, CSB2_dly, CLKB_dly, 
         OCEB_dly, CEB_dly, DIB2_dly;

  FIFO8KB0075 \e_fmexg_core/fifo/fmexg_fifo_8k_1025_1_10_FIFO8KB ( .DI0(GNDI), 
    .DI1(DIA1_dly), .DI2(GNDI), .DI3(GNDI), .DI4(GNDI), .DI5(GNDI), .DI6(GNDI), 
    .DI7(GNDI), .DI8(GNDI), .DI9(GNDI), .DI10(GNDI), .DI11(DIB2_dly), 
    .DI12(GNDI), .DI13(GNDI), .DI14(GNDI), .DI15(GNDI), .DI16(GNDI), 
    .DI17(GNDI), .FULLI(CSA2_dly), .CSW0(VCCI), .CSW1(VCCI), .EMPTYI(CSB2_dly), 
    .CSR0(VCCI), .CSR1(VCCI), .WE(VCCI), .RE(CEB_dly), .ORE(OCEB_dly), 
    .CLKW(CLKA_dly), .CLKR(CLKB_dly), .RST(GNDI), .RPRST(GNDI), .DO0(DOB0), 
    .DO1(), .DO2(), .DO3(), .DO4(), .DO5(), .DO6(), .DO7(), .DO8(), .DO9(), 
    .DO10(), .DO11(), .DO12(), .DO13(), .DO14(), .DO15(), .DO16(), .DO17(), 
    .EF(), .AEF(), .AFF(), .FF());
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLKB => DOB0) = (0:0:0,0:0:0);
    $setuphold (posedge CLKA, DIA1, 0:0:0, 0:0:0,,,, CLKA_dly, DIA1_dly);
    $setuphold (posedge CLKA, CSA2, 0:0:0, 0:0:0,,,, CLKA_dly, CSA2_dly);
    $setuphold (posedge CLKB, CSB2, 0:0:0, 0:0:0,,,, CLKB_dly, CSB2_dly);
    $setuphold (posedge CLKB, OCEB, 0:0:0, 0:0:0,,,, CLKB_dly, OCEB_dly);
    $setuphold (posedge CLKB, CEB, 0:0:0, 0:0:0,,,, CLKB_dly, CEB_dly);
    $setuphold (posedge CLKA, DIB2, 0:0:0, 0:0:0,,,, CLKA_dly, DIB2_dly);
    $width (posedge CLKA, 0:0:0);
    $width (negedge CLKA, 0:0:0);
    $width (posedge CLKB, 0:0:0);
    $width (negedge CLKB, 0:0:0);
  endspecify

endmodule

module FIFO8KB0075 ( input DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, 
    DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, FULLI, CSW0, CSW1, EMPTYI, 
    CSR0, CSR1, WE, RE, ORE, CLKW, CLKR, RST, RPRST, output DO0, DO1, DO2, DO3, 
    DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, 
    DO17, EF, AEF, AFF, FF );

  FIFO8KB INST10( .DI0(DI0), .DI1(DI1), .DI2(DI2), .DI3(DI3), .DI4(DI4), 
    .DI5(DI5), .DI6(DI6), .DI7(DI7), .DI8(DI8), .DI9(DI9), .DI10(DI10), 
    .DI11(DI11), .DI12(DI12), .DI13(DI13), .DI14(DI14), .DI15(DI15), 
    .DI16(DI16), .DI17(DI17), .CSW0(CSW0), .CSW1(CSW1), .CSR0(CSR0), 
    .CSR1(CSR1), .FULLI(FULLI), .EMPTYI(EMPTYI), .WE(WE), .RE(RE), .ORE(ORE), 
    .CLKW(CLKW), .CLKR(CLKR), .RST(RST), .RPRST(RPRST), .DO0(DO0), .DO1(DO1), 
    .DO2(DO2), .DO3(DO3), .DO4(DO4), .DO5(DO5), .DO6(DO6), .DO7(DO7), 
    .DO8(DO8), .DO9(DO9), .DO10(DO10), .DO11(DO11), .DO12(DO12), .DO13(DO13), 
    .DO14(DO14), .DO15(DO15), .DO16(DO16), .DO17(DO17), .EF(EF), .AEF(AEF), 
    .AFF(AFF), .FF(FF));
  defparam INST10.AEPOINTER = "0b11111111111111";
  defparam INST10.AEPOINTER1 = "0b00000000000000";
  defparam INST10.AFPOINTER = "0b11111111111111";
  defparam INST10.AFPOINTER1 = "0b00000000000000";
  defparam INST10.ASYNC_RESET_RELEASE = "SYNC";
  defparam INST10.CSDECODE_R = "0b11";
  defparam INST10.CSDECODE_W = "0b11";
  defparam INST10.DATA_WIDTH_R = 1;
  defparam INST10.DATA_WIDTH_W = 1;
  defparam INST10.FULLPOINTER = "0b11111111111111";
  defparam INST10.FULLPOINTER1 = "0b00000000000000";
  defparam INST10.GSR = "DISABLED";
  defparam INST10.REGMODE = "NOREG";
  defparam INST10.RESETMODE = "ASYNC";
endmodule

module e_pll_4_PLLInst_0 ( input CLKI, CLKFB, output CLKOP );
  wire   GNDI;

  EHXPLLJ_B \e_pll_4/PLLInst_0_EHXPLLJ ( .CLKI(CLKI), .CLKFB(CLKFB), 
    .PHASESEL1(GNDI), .PHASESEL0(GNDI), .PHASEDIR(GNDI), .PHASESTEP(GNDI), 
    .LOADREG(GNDI), .STDBY(GNDI), .PLLWAKESYNC(GNDI), .RST(GNDI), 
    .RESETM(GNDI), .RESETC(GNDI), .RESETD(GNDI), .ENCLKOP(GNDI), 
    .ENCLKOS(GNDI), .ENCLKOS2(GNDI), .ENCLKOS3(GNDI), .PLLCLK(GNDI), 
    .PLLRST(GNDI), .PLLSTB(GNDI), .PLLWE(GNDI), .PLLDATI7(GNDI), 
    .PLLDATI6(GNDI), .PLLDATI5(GNDI), .PLLDATI4(GNDI), .PLLDATI3(GNDI), 
    .PLLDATI2(GNDI), .PLLDATI1(GNDI), .PLLDATI0(GNDI), .PLLADDR4(GNDI), 
    .PLLADDR3(GNDI), .PLLADDR2(GNDI), .PLLADDR1(GNDI), .PLLADDR0(GNDI), 
    .CLKOP(CLKOP), .CLKOS(), .CLKOS2(), .CLKOS3(), .LOCK(), .INTLOCK(), 
    .REFCLK(), .CLKINTFB(), .DPHSRC(), .PLLDATO7(), .PLLDATO6(), .PLLDATO5(), 
    .PLLDATO4(), .PLLDATO3(), .PLLDATO2(), .PLLDATO1(), .PLLDATO0(), .PLLACK());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLKI => CLKOP) = (0:0:0,0:0:0);
    (CLKFB => CLKOP) = (0:0:0,0:0:0);
  endspecify

endmodule

module EHXPLLJ_B ( input CLKI, CLKFB, PHASESEL1, PHASESEL0, PHASEDIR, 
    PHASESTEP, LOADREG, STDBY, PLLWAKESYNC, RST, RESETM, RESETC, RESETD, 
    ENCLKOP, ENCLKOS, ENCLKOS2, ENCLKOS3, PLLCLK, PLLRST, PLLSTB, PLLWE, 
    PLLDATI7, PLLDATI6, PLLDATI5, PLLDATI4, PLLDATI3, PLLDATI2, PLLDATI1, 
    PLLDATI0, PLLADDR4, PLLADDR3, PLLADDR2, PLLADDR1, PLLADDR0, output CLKOP, 
    CLKOS, CLKOS2, CLKOS3, LOCK, INTLOCK, REFCLK, CLKINTFB, DPHSRC, PLLDATO7, 
    PLLDATO6, PLLDATO5, PLLDATO4, PLLDATO3, PLLDATO2, PLLDATO1, PLLDATO0, 
    PLLACK );

  EHXPLLJ INST10( .CLKI(CLKI), .CLKFB(CLKFB), .PHASESEL1(PHASESEL1), 
    .PHASESEL0(PHASESEL0), .PHASEDIR(PHASEDIR), .PHASESTEP(PHASESTEP), 
    .LOADREG(LOADREG), .STDBY(STDBY), .PLLWAKESYNC(PLLWAKESYNC), .RST(RST), 
    .RESETM(RESETM), .RESETC(RESETC), .RESETD(RESETD), .ENCLKOP(ENCLKOP), 
    .ENCLKOS(ENCLKOS), .ENCLKOS2(ENCLKOS2), .ENCLKOS3(ENCLKOS3), 
    .PLLCLK(PLLCLK), .PLLRST(PLLRST), .PLLSTB(PLLSTB), .PLLWE(PLLWE), 
    .PLLADDR4(PLLADDR4), .PLLADDR3(PLLADDR3), .PLLADDR2(PLLADDR2), 
    .PLLADDR1(PLLADDR1), .PLLADDR0(PLLADDR0), .PLLDATI7(PLLDATI7), 
    .PLLDATI6(PLLDATI6), .PLLDATI5(PLLDATI5), .PLLDATI4(PLLDATI4), 
    .PLLDATI3(PLLDATI3), .PLLDATI2(PLLDATI2), .PLLDATI1(PLLDATI1), 
    .PLLDATI0(PLLDATI0), .CLKOP(CLKOP), .CLKOS(CLKOS), .CLKOS2(CLKOS2), 
    .CLKOS3(CLKOS3), .LOCK(LOCK), .REFCLK(REFCLK), .INTLOCK(INTLOCK), 
    .PLLDATO7(PLLDATO7), .PLLDATO6(PLLDATO6), .PLLDATO5(PLLDATO5), 
    .PLLDATO4(PLLDATO4), .PLLDATO3(PLLDATO3), .PLLDATO2(PLLDATO2), 
    .PLLDATO1(PLLDATO1), .PLLDATO0(PLLDATO0), .PLLACK(PLLACK), .DPHSRC(DPHSRC), 
    .CLKINTFB(CLKINTFB));
  defparam INST10.CLKFB_DIV = 4;
  defparam INST10.CLKI_DIV = 1;
  defparam INST10.CLKOP_CPHASE = 10;
  defparam INST10.CLKOP_DIV = 11;
  defparam INST10.CLKOP_ENABLE = "ENABLED";
  defparam INST10.CLKOP_FPHASE = 0;
  defparam INST10.CLKOP_TRIM_DELAY = 0;
  defparam INST10.CLKOP_TRIM_POL = "RISING";
  defparam INST10.CLKOS2_CPHASE = 0;
  defparam INST10.CLKOS2_DIV = 1;
  defparam INST10.CLKOS2_ENABLE = "DISABLED";
  defparam INST10.CLKOS2_FPHASE = 0;
  defparam INST10.CLKOS3_CPHASE = 0;
  defparam INST10.CLKOS3_DIV = 1;
  defparam INST10.CLKOS3_ENABLE = "DISABLED";
  defparam INST10.CLKOS3_FPHASE = 0;
  defparam INST10.CLKOS_CPHASE = 0;
  defparam INST10.CLKOS_DIV = 1;
  defparam INST10.CLKOS_ENABLE = "DISABLED";
  defparam INST10.CLKOS_FPHASE = 0;
  defparam INST10.CLKOS_TRIM_DELAY = 0;
  defparam INST10.CLKOS_TRIM_POL = "FALLING";
  defparam INST10.DCRST_ENA = "DISABLED";
  defparam INST10.DDRST_ENA = "DISABLED";
  defparam INST10.DPHASE_SOURCE = "DISABLED";
  defparam INST10.FEEDBK_PATH = "CLKOP";
  defparam INST10.FRACN_DIV = 0;
  defparam INST10.FRACN_ENABLE = "DISABLED";
  defparam INST10.INTFB_WAKE = "DISABLED";
  defparam INST10.MRST_ENA = "DISABLED";
  defparam INST10.OUTDIVIDER_MUXA2 = "DIVA";
  defparam INST10.OUTDIVIDER_MUXB2 = "DIVB";
  defparam INST10.OUTDIVIDER_MUXC2 = "DIVC";
  defparam INST10.OUTDIVIDER_MUXD2 = "DIVD";
  defparam INST10.PLLRST_ENA = "ENABLED";
  defparam INST10.PLL_LOCK_MODE = 0;
  defparam INST10.PLL_USE_WB = "DISABLED";
  defparam INST10.PREDIVIDER_MUXA1 = 0;
  defparam INST10.PREDIVIDER_MUXB1 = 0;
  defparam INST10.PREDIVIDER_MUXC1 = 0;
  defparam INST10.PREDIVIDER_MUXD1 = 0;
  defparam INST10.STDBY_ENABLE = "DISABLED";
  defparam INST10.VCO_BYPASS_A0 = "DISABLED";
  defparam INST10.VCO_BYPASS_B0 = "DISABLED";
  defparam INST10.VCO_BYPASS_C0 = "DISABLED";
  defparam INST10.VCO_BYPASS_D0 = "DISABLED";
endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  INV INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
