{"ast":null,"code":"import { abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt } from \"../math.js\";\nimport { conicProjection } from \"./conic.js\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea.js\";\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0),\n      n = (sy0 + sin(y1)) / 2; // Are the parallels symmetrical around the Equator?\n\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n  var c = 1 + sy0 * (2 * n - sy0),\n      r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function (x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0) l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-geo/src/projection/conicEqualArea.js"],"names":["abs","asin","atan2","cos","epsilon","pi","sign","sin","sqrt","conicProjection","cylindricalEqualAreaRaw","conicEqualAreaRaw","y0","y1","sy0","n","c","r0","project","x","y","r","invert","r0y","l","scale","center"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,OAA/B,EAAwCC,EAAxC,EAA4CC,IAA5C,EAAkDC,GAAlD,EAAuDC,IAAvD,QAAkE,YAAlE;AACA,SAAQC,eAAR,QAA8B,YAA9B;AACA,SAAQC,uBAAR,QAAsC,2BAAtC;AAEA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC;AACxC,MAAIC,GAAG,GAAGP,GAAG,CAACK,EAAD,CAAb;AAAA,MAAmBG,CAAC,GAAG,CAACD,GAAG,GAAGP,GAAG,CAACM,EAAD,CAAV,IAAkB,CAAzC,CADwC,CAGxC;;AACA,MAAIb,GAAG,CAACe,CAAD,CAAH,GAASX,OAAb,EAAsB,OAAOM,uBAAuB,CAACE,EAAD,CAA9B;AAEtB,MAAII,CAAC,GAAG,IAAIF,GAAG,IAAI,IAAIC,CAAJ,GAAQD,GAAZ,CAAf;AAAA,MAAiCG,EAAE,GAAGT,IAAI,CAACQ,CAAD,CAAJ,GAAUD,CAAhD;;AAEA,WAASG,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,QAAIC,CAAC,GAAGb,IAAI,CAACQ,CAAC,GAAG,IAAID,CAAJ,GAAQR,GAAG,CAACa,CAAD,CAAhB,CAAJ,GAA2BL,CAAnC;AACA,WAAO,CAACM,CAAC,GAAGd,GAAG,CAACY,CAAC,IAAIJ,CAAN,CAAR,EAAkBE,EAAE,GAAGI,CAAC,GAAGlB,GAAG,CAACgB,CAAD,CAA9B,CAAP;AACD;;AAEDD,EAAAA,OAAO,CAACI,MAAR,GAAiB,UAASH,CAAT,EAAYC,CAAZ,EAAe;AAC9B,QAAIG,GAAG,GAAGN,EAAE,GAAGG,CAAf;AAAA,QACII,CAAC,GAAGtB,KAAK,CAACiB,CAAD,EAAInB,GAAG,CAACuB,GAAD,CAAP,CAAL,GAAqBjB,IAAI,CAACiB,GAAD,CADjC;AAEA,QAAIA,GAAG,GAAGR,CAAN,GAAU,CAAd,EACES,CAAC,IAAInB,EAAE,GAAGC,IAAI,CAACa,CAAD,CAAT,GAAeb,IAAI,CAACiB,GAAD,CAAxB;AACF,WAAO,CAACC,CAAC,GAAGT,CAAL,EAAQd,IAAI,CAAC,CAACe,CAAC,GAAG,CAACG,CAAC,GAAGA,CAAJ,GAAQI,GAAG,GAAGA,GAAf,IAAsBR,CAAtB,GAA0BA,CAA/B,KAAqC,IAAIA,CAAzC,CAAD,CAAZ,CAAP;AACD,GAND;;AAQA,SAAOG,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOT,eAAe,CAACE,iBAAD,CAAf,CACFc,KADE,CACI,OADJ,EAEFC,MAFE,CAEK,CAAC,CAAD,EAAI,OAAJ,CAFL,CAAP;AAGD","sourcesContent":["import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n"]},"metadata":{},"sourceType":"module"}