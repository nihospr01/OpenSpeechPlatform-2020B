{"ast":null,"code":"import { map } from \"./array\";\nimport { linearish } from \"./linear\";\nimport number from \"./number\";\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function (_) {\n    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? map.call(domain, number) : [0, 1];\n  return linearish(scale);\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-scale/src/identity.js"],"names":["map","linearish","number","identity","domain","unknown","scale","x","isNaN","invert","range","_","arguments","length","call","slice","copy"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,SAAlB;AACA,SAAQC,SAAR,QAAwB,UAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACvC,MAAIC,OAAJ;;AAEA,WAASC,KAAT,CAAeC,CAAf,EAAkB;AAChB,WAAOC,KAAK,CAACD,CAAC,GAAG,CAACA,CAAN,CAAL,GAAgBF,OAAhB,GAA0BE,CAAjC;AACD;;AAEDD,EAAAA,KAAK,CAACG,MAAN,GAAeH,KAAf;;AAEAA,EAAAA,KAAK,CAACF,MAAN,GAAeE,KAAK,CAACI,KAAN,GAAc,UAASC,CAAT,EAAY;AACvC,WAAOC,SAAS,CAACC,MAAV,IAAoBT,MAAM,GAAGJ,GAAG,CAACc,IAAJ,CAASH,CAAT,EAAYT,MAAZ,CAAT,EAA8BI,KAAlD,IAA2DF,MAAM,CAACW,KAAP,EAAlE;AACD,GAFD;;AAIAT,EAAAA,KAAK,CAACD,OAAN,GAAgB,UAASM,CAAT,EAAY;AAC1B,WAAOC,SAAS,CAACC,MAAV,IAAoBR,OAAO,GAAGM,CAAV,EAAaL,KAAjC,IAA0CD,OAAjD;AACD,GAFD;;AAIAC,EAAAA,KAAK,CAACU,IAAN,GAAa,YAAW;AACtB,WAAOb,QAAQ,CAACC,MAAD,CAAR,CAAiBC,OAAjB,CAAyBA,OAAzB,CAAP;AACD,GAFD;;AAIAD,EAAAA,MAAM,GAAGQ,SAAS,CAACC,MAAV,GAAmBb,GAAG,CAACc,IAAJ,CAASV,MAAT,EAAiBF,MAAjB,CAAnB,GAA8C,CAAC,CAAD,EAAI,CAAJ,CAAvD;AAEA,SAAOD,SAAS,CAACK,KAAD,CAAhB;AACD","sourcesContent":["import {map} from \"./array\";\nimport {linearish} from \"./linear\";\nimport number from \"./number\";\n\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? map.call(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n"]},"metadata":{},"sourceType":"module"}