{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandTransposeCharacters\n * @format\n * \n */\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\n\nvar EditorState = require('./EditorState');\n\nvar getContentStateFragment = require('./getContentStateFragment');\n/**\n * Transpose the characters on either side of a collapsed cursor, or\n * if the cursor is at the end of the block, transpose the last two\n * characters.\n */\n\n\nfunction keyCommandTransposeCharacters(editorState) {\n  var selection = editorState.getSelection();\n\n  if (!selection.isCollapsed()) {\n    return editorState;\n  }\n\n  var offset = selection.getAnchorOffset();\n\n  if (offset === 0) {\n    return editorState;\n  }\n\n  var blockKey = selection.getAnchorKey();\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var length = block.getLength(); // Nothing to transpose if there aren't two characters.\n\n  if (length <= 1) {\n    return editorState;\n  }\n\n  var removalRange;\n  var finalSelection;\n\n  if (offset === length) {\n    // The cursor is at the end of the block. Swap the last two characters.\n    removalRange = selection.set('anchorOffset', offset - 1);\n    finalSelection = selection;\n  } else {\n    removalRange = selection.set('focusOffset', offset + 1);\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\n  } // Extract the character to move as a fragment. This preserves its\n  // styling and entity, if any.\n\n\n  var movedFragment = getContentStateFragment(content, removalRange);\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward'); // After the removal, the insertion target is one character back.\n\n  var selectionAfter = afterRemoval.getSelectionAfter();\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\n  var targetRange = selectionAfter.merge({\n    anchorOffset: targetOffset,\n    focusOffset: targetOffset\n  });\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\n  return EditorState.acceptSelection(newEditorState, finalSelection);\n}\n\nmodule.exports = keyCommandTransposeCharacters;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/keyCommandTransposeCharacters.js"],"names":["DraftModifier","require","EditorState","getContentStateFragment","keyCommandTransposeCharacters","editorState","selection","getSelection","isCollapsed","offset","getAnchorOffset","blockKey","getAnchorKey","content","getCurrentContent","block","getBlockForKey","length","getLength","removalRange","finalSelection","set","movedFragment","afterRemoval","removeRange","selectionAfter","getSelectionAfter","targetOffset","targetRange","merge","anchorOffset","focusOffset","afterInsert","replaceWithFragment","newEditorState","push","acceptSelection","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,2BAAD,CAArC;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASG,6BAAT,CAAuCC,WAAvC,EAAoD;AAClD,MAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;;AACA,MAAI,CAACD,SAAS,CAACE,WAAV,EAAL,EAA8B;AAC5B,WAAOH,WAAP;AACD;;AAED,MAAII,MAAM,GAAGH,SAAS,CAACI,eAAV,EAAb;;AACA,MAAID,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOJ,WAAP;AACD;;AAED,MAAIM,QAAQ,GAAGL,SAAS,CAACM,YAAV,EAAf;AACA,MAAIC,OAAO,GAAGR,WAAW,CAACS,iBAAZ,EAAd;AACA,MAAIC,KAAK,GAAGF,OAAO,CAACG,cAAR,CAAuBL,QAAvB,CAAZ;AACA,MAAIM,MAAM,GAAGF,KAAK,CAACG,SAAN,EAAb,CAdkD,CAgBlD;;AACA,MAAID,MAAM,IAAI,CAAd,EAAiB;AACf,WAAOZ,WAAP;AACD;;AAED,MAAIc,YAAJ;AACA,MAAIC,cAAJ;;AAEA,MAAIX,MAAM,KAAKQ,MAAf,EAAuB;AACrB;AACAE,IAAAA,YAAY,GAAGb,SAAS,CAACe,GAAV,CAAc,cAAd,EAA8BZ,MAAM,GAAG,CAAvC,CAAf;AACAW,IAAAA,cAAc,GAAGd,SAAjB;AACD,GAJD,MAIO;AACLa,IAAAA,YAAY,GAAGb,SAAS,CAACe,GAAV,CAAc,aAAd,EAA6BZ,MAAM,GAAG,CAAtC,CAAf;AACAW,IAAAA,cAAc,GAAGD,YAAY,CAACE,GAAb,CAAiB,cAAjB,EAAiCZ,MAAM,GAAG,CAA1C,CAAjB;AACD,GA/BiD,CAiClD;AACA;;;AACA,MAAIa,aAAa,GAAGnB,uBAAuB,CAACU,OAAD,EAAUM,YAAV,CAA3C;AACA,MAAII,YAAY,GAAGvB,aAAa,CAACwB,WAAd,CAA0BX,OAA1B,EAAmCM,YAAnC,EAAiD,UAAjD,CAAnB,CApCkD,CAsClD;;AACA,MAAIM,cAAc,GAAGF,YAAY,CAACG,iBAAb,EAArB;AACA,MAAIC,YAAY,GAAGF,cAAc,CAACf,eAAf,KAAmC,CAAtD;AACA,MAAIkB,WAAW,GAAGH,cAAc,CAACI,KAAf,CAAqB;AACrCC,IAAAA,YAAY,EAAEH,YADuB;AAErCI,IAAAA,WAAW,EAAEJ;AAFwB,GAArB,CAAlB;AAKA,MAAIK,WAAW,GAAGhC,aAAa,CAACiC,mBAAd,CAAkCV,YAAlC,EAAgDK,WAAhD,EAA6DN,aAA7D,CAAlB;AAEA,MAAIY,cAAc,GAAGhC,WAAW,CAACiC,IAAZ,CAAiB9B,WAAjB,EAA8B2B,WAA9B,EAA2C,iBAA3C,CAArB;AAEA,SAAO9B,WAAW,CAACkC,eAAZ,CAA4BF,cAA5B,EAA4Cd,cAA5C,CAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBlC,6BAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandTransposeCharacters\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar getContentStateFragment = require('./getContentStateFragment');\n\n/**\n * Transpose the characters on either side of a collapsed cursor, or\n * if the cursor is at the end of the block, transpose the last two\n * characters.\n */\nfunction keyCommandTransposeCharacters(editorState) {\n  var selection = editorState.getSelection();\n  if (!selection.isCollapsed()) {\n    return editorState;\n  }\n\n  var offset = selection.getAnchorOffset();\n  if (offset === 0) {\n    return editorState;\n  }\n\n  var blockKey = selection.getAnchorKey();\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var length = block.getLength();\n\n  // Nothing to transpose if there aren't two characters.\n  if (length <= 1) {\n    return editorState;\n  }\n\n  var removalRange;\n  var finalSelection;\n\n  if (offset === length) {\n    // The cursor is at the end of the block. Swap the last two characters.\n    removalRange = selection.set('anchorOffset', offset - 1);\n    finalSelection = selection;\n  } else {\n    removalRange = selection.set('focusOffset', offset + 1);\n    finalSelection = removalRange.set('anchorOffset', offset + 1);\n  }\n\n  // Extract the character to move as a fragment. This preserves its\n  // styling and entity, if any.\n  var movedFragment = getContentStateFragment(content, removalRange);\n  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward');\n\n  // After the removal, the insertion target is one character back.\n  var selectionAfter = afterRemoval.getSelectionAfter();\n  var targetOffset = selectionAfter.getAnchorOffset() - 1;\n  var targetRange = selectionAfter.merge({\n    anchorOffset: targetOffset,\n    focusOffset: targetOffset\n  });\n\n  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n\n  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');\n\n  return EditorState.acceptSelection(newEditorState, finalSelection);\n}\n\nmodule.exports = keyCommandTransposeCharacters;"]},"metadata":{},"sourceType":"script"}