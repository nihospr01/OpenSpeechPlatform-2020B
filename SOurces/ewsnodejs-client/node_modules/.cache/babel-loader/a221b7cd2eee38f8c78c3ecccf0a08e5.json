{"ast":null,"code":"import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport { phi, squarifyRatio } from \"./squarify.js\";\nexport default (function custom(ratio) {\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && rows.ratio === ratio) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) {\n          row.value += nodes[i].value;\n        }\n\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-hierarchy/src/treemap/resquarify.js"],"names":["treemapDice","treemapSlice","phi","squarifyRatio","custom","ratio","resquarify","parent","x0","y0","x1","y1","rows","_squarify","row","nodes","i","j","n","m","length","value","children","dice","x"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,WAAxB;AACA,OAAOC,YAAP,MAAyB,YAAzB;AACA,SAAQC,GAAR,EAAaC,aAAb,QAAiC,eAAjC;AAEA,eAAe,CAAC,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAErC,WAASC,UAAT,CAAoBC,MAApB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C;AAC1C,QAAI,CAACC,IAAI,GAAGL,MAAM,CAACM,SAAf,KAA8BD,IAAI,CAACP,KAAL,KAAeA,KAAjD,EAAyD;AACvD,UAAIO,IAAJ;AAAA,UACIE,GADJ;AAAA,UAEIC,KAFJ;AAAA,UAGIC,CAHJ;AAAA,UAIIC,CAAC,GAAG,CAAC,CAJT;AAAA,UAKIC,CALJ;AAAA,UAMIC,CAAC,GAAGP,IAAI,CAACQ,MANb;AAAA,UAOIC,KAAK,GAAGd,MAAM,CAACc,KAPnB;;AASA,aAAO,EAAEJ,CAAF,GAAME,CAAb,EAAgB;AACdL,QAAAA,GAAG,GAAGF,IAAI,CAACK,CAAD,CAAV,EAAeF,KAAK,GAAGD,GAAG,CAACQ,QAA3B;;AACA,aAAKN,CAAC,GAAGF,GAAG,CAACO,KAAJ,GAAY,CAAhB,EAAmBH,CAAC,GAAGH,KAAK,CAACK,MAAlC,EAA0CJ,CAAC,GAAGE,CAA9C,EAAiD,EAAEF,CAAnD;AAAsDF,UAAAA,GAAG,CAACO,KAAJ,IAAaN,KAAK,CAACC,CAAD,CAAL,CAASK,KAAtB;AAAtD;;AACA,YAAIP,GAAG,CAACS,IAAR,EAAcvB,WAAW,CAACc,GAAD,EAAMN,EAAN,EAAUC,EAAV,EAAcC,EAAd,EAAkBD,EAAE,IAAI,CAACE,EAAE,GAAGF,EAAN,IAAYK,GAAG,CAACO,KAAhB,GAAwBA,KAAhD,CAAX,CAAd,KACKpB,YAAY,CAACa,GAAD,EAAMN,EAAN,EAAUC,EAAV,EAAcD,EAAE,IAAI,CAACE,EAAE,GAAGF,EAAN,IAAYM,GAAG,CAACO,KAAhB,GAAwBA,KAA5C,EAAmDV,EAAnD,CAAZ;AACLU,QAAAA,KAAK,IAAIP,GAAG,CAACO,KAAb;AACD;AACF,KAjBD,MAiBO;AACLd,MAAAA,MAAM,CAACM,SAAP,GAAmBD,IAAI,GAAGT,aAAa,CAACE,KAAD,EAAQE,MAAR,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,CAAvC;AACAC,MAAAA,IAAI,CAACP,KAAL,GAAaA,KAAb;AACD;AACF;;AAEDC,EAAAA,UAAU,CAACD,KAAX,GAAmB,UAASmB,CAAT,EAAY;AAC7B,WAAOpB,MAAM,CAAC,CAACoB,CAAC,GAAG,CAACA,CAAN,IAAW,CAAX,GAAeA,CAAf,GAAmB,CAApB,CAAb;AACD,GAFD;;AAIA,SAAOlB,UAAP;AACD,CA/Bc,EA+BZJ,GA/BY,CAAf","sourcesContent":["import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport {phi, squarifyRatio} from \"./squarify.js\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n"]},"metadata":{},"sourceType":"module"}