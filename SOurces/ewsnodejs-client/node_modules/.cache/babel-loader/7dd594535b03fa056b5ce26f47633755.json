{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n'use strict';\n\nvar getDocumentScrollElement = require('./getDocumentScrollElement');\n\nvar getUnboundedScrollPosition = require('./getUnboundedScrollPosition');\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are bounded. This means that if the scroll position is\n * negative or exceeds the element boundaries (which is possible using inertial\n * scrolling), you will get zero or the maximum scroll position, respectively.\n *\n * If you need the unbound scroll position, use `getUnboundedScrollPosition`.\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\n\n\nfunction getScrollPosition(scrollable) {\n  var documentScrollElement = getDocumentScrollElement(scrollable.ownerDocument || scrollable.document);\n\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {\n    scrollable = documentScrollElement;\n  }\n\n  var scrollPosition = getUnboundedScrollPosition(scrollable);\n  var viewport = scrollable === documentScrollElement ? scrollable.ownerDocument.documentElement : scrollable;\n  var xMax = scrollable.scrollWidth - viewport.clientWidth;\n  var yMax = scrollable.scrollHeight - viewport.clientHeight;\n  scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));\n  scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));\n  return scrollPosition;\n}\n\nmodule.exports = getScrollPosition;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/fbjs/lib/getScrollPosition.js"],"names":["getDocumentScrollElement","require","getUnboundedScrollPosition","getScrollPosition","scrollable","documentScrollElement","ownerDocument","document","Window","scrollPosition","viewport","documentElement","xMax","scrollWidth","clientWidth","yMax","scrollHeight","clientHeight","x","Math","max","min","y","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAtC;;AACA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2BC,UAA3B,EAAuC;AACrC,MAAIC,qBAAqB,GAAGL,wBAAwB,CAACI,UAAU,CAACE,aAAX,IAA4BF,UAAU,CAACG,QAAxC,CAApD;;AACA,MAAIH,UAAU,CAACI,MAAX,IAAqBJ,UAAU,YAAYA,UAAU,CAACI,MAA1D,EAAkE;AAChEJ,IAAAA,UAAU,GAAGC,qBAAb;AACD;;AACD,MAAII,cAAc,GAAGP,0BAA0B,CAACE,UAAD,CAA/C;AAEA,MAAIM,QAAQ,GAAGN,UAAU,KAAKC,qBAAf,GAAuCD,UAAU,CAACE,aAAX,CAAyBK,eAAhE,GAAkFP,UAAjG;AAEA,MAAIQ,IAAI,GAAGR,UAAU,CAACS,WAAX,GAAyBH,QAAQ,CAACI,WAA7C;AACA,MAAIC,IAAI,GAAGX,UAAU,CAACY,YAAX,GAA0BN,QAAQ,CAACO,YAA9C;AAEAR,EAAAA,cAAc,CAACS,CAAf,GAAmBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASZ,cAAc,CAACS,CAAxB,EAA2BN,IAA3B,CAAZ,CAAnB;AACAH,EAAAA,cAAc,CAACa,CAAf,GAAmBH,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASZ,cAAc,CAACa,CAAxB,EAA2BP,IAA3B,CAAZ,CAAnB;AAEA,SAAON,cAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar getDocumentScrollElement = require('./getDocumentScrollElement');\nvar getUnboundedScrollPosition = require('./getUnboundedScrollPosition');\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are bounded. This means that if the scroll position is\n * negative or exceeds the element boundaries (which is possible using inertial\n * scrolling), you will get zero or the maximum scroll position, respectively.\n *\n * If you need the unbound scroll position, use `getUnboundedScrollPosition`.\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\nfunction getScrollPosition(scrollable) {\n  var documentScrollElement = getDocumentScrollElement(scrollable.ownerDocument || scrollable.document);\n  if (scrollable.Window && scrollable instanceof scrollable.Window) {\n    scrollable = documentScrollElement;\n  }\n  var scrollPosition = getUnboundedScrollPosition(scrollable);\n\n  var viewport = scrollable === documentScrollElement ? scrollable.ownerDocument.documentElement : scrollable;\n\n  var xMax = scrollable.scrollWidth - viewport.clientWidth;\n  var yMax = scrollable.scrollHeight - viewport.clientHeight;\n\n  scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));\n  scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));\n\n  return scrollPosition;\n}\n\nmodule.exports = getScrollPosition;"]},"metadata":{},"sourceType":"script"}