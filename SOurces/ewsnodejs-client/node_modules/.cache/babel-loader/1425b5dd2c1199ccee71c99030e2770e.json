{"ast":null,"code":"import { map } from \"d3-collection\";\nimport { slice } from \"./array\";\nimport { initRange } from \"./init\";\nexport var implicit = {\n  name: \"implicit\"\n};\nexport default function ordinal() {\n  var index = map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\",\n        i = index.get(key);\n\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1,\n        n = _.length,\n        d,\n        key;\n\n    while (++i < n) {\n      if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    }\n\n    return scale;\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n  return scale;\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-scale/src/ordinal.js"],"names":["map","slice","initRange","implicit","name","ordinal","index","domain","range","unknown","scale","d","key","i","get","set","push","length","_","arguments","n","has","call","copy","apply"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,eAAlB;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AAEA,OAAO,IAAIC,QAAQ,GAAG;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAf;AAEP,eAAe,SAASC,OAAT,GAAmB;AAChC,MAAIC,KAAK,GAAGN,GAAG,EAAf;AAAA,MACIO,MAAM,GAAG,EADb;AAAA,MAEIC,KAAK,GAAG,EAFZ;AAAA,MAGIC,OAAO,GAAGN,QAHd;;AAKA,WAASO,KAAT,CAAeC,CAAf,EAAkB;AAChB,QAAIC,GAAG,GAAGD,CAAC,GAAG,EAAd;AAAA,QAAkBE,CAAC,GAAGP,KAAK,CAACQ,GAAN,CAAUF,GAAV,CAAtB;;AACA,QAAI,CAACC,CAAL,EAAQ;AACN,UAAIJ,OAAO,KAAKN,QAAhB,EAA0B,OAAOM,OAAP;AAC1BH,MAAAA,KAAK,CAACS,GAAN,CAAUH,GAAV,EAAeC,CAAC,GAAGN,MAAM,CAACS,IAAP,CAAYL,CAAZ,CAAnB;AACD;;AACD,WAAOH,KAAK,CAAC,CAACK,CAAC,GAAG,CAAL,IAAUL,KAAK,CAACS,MAAjB,CAAZ;AACD;;AAEDP,EAAAA,KAAK,CAACH,MAAN,GAAe,UAASW,CAAT,EAAY;AACzB,QAAI,CAACC,SAAS,CAACF,MAAf,EAAuB,OAAOV,MAAM,CAACN,KAAP,EAAP;AACvBM,IAAAA,MAAM,GAAG,EAAT,EAAaD,KAAK,GAAGN,GAAG,EAAxB;AACA,QAAIa,CAAC,GAAG,CAAC,CAAT;AAAA,QAAYO,CAAC,GAAGF,CAAC,CAACD,MAAlB;AAAA,QAA0BN,CAA1B;AAAA,QAA6BC,GAA7B;;AACA,WAAO,EAAEC,CAAF,GAAMO,CAAb;AAAgB,UAAI,CAACd,KAAK,CAACe,GAAN,CAAUT,GAAG,GAAG,CAACD,CAAC,GAAGO,CAAC,CAACL,CAAD,CAAN,IAAa,EAA7B,CAAL,EAAuCP,KAAK,CAACS,GAAN,CAAUH,GAAV,EAAeL,MAAM,CAACS,IAAP,CAAYL,CAAZ,CAAf;AAAvD;;AACA,WAAOD,KAAP;AACD,GAND;;AAQAA,EAAAA,KAAK,CAACF,KAAN,GAAc,UAASU,CAAT,EAAY;AACxB,WAAOC,SAAS,CAACF,MAAV,IAAoBT,KAAK,GAAGP,KAAK,CAACqB,IAAN,CAAWJ,CAAX,CAAR,EAAuBR,KAA3C,IAAoDF,KAAK,CAACP,KAAN,EAA3D;AACD,GAFD;;AAIAS,EAAAA,KAAK,CAACD,OAAN,GAAgB,UAASS,CAAT,EAAY;AAC1B,WAAOC,SAAS,CAACF,MAAV,IAAoBR,OAAO,GAAGS,CAAV,EAAaR,KAAjC,IAA0CD,OAAjD;AACD,GAFD;;AAIAC,EAAAA,KAAK,CAACa,IAAN,GAAa,YAAW;AACtB,WAAOlB,OAAO,CAACE,MAAD,EAASC,KAAT,CAAP,CAAuBC,OAAvB,CAA+BA,OAA/B,CAAP;AACD,GAFD;;AAIAP,EAAAA,SAAS,CAACsB,KAAV,CAAgBd,KAAhB,EAAuBS,SAAvB;AAEA,SAAOT,KAAP;AACD","sourcesContent":["import {map} from \"d3-collection\";\nimport {slice} from \"./array\";\nimport {initRange} from \"./init\";\n\nexport var implicit = {name: \"implicit\"};\n\nexport default function ordinal() {\n  var index = map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1, n = _.length, d, key;\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n"]},"metadata":{},"sourceType":"module"}