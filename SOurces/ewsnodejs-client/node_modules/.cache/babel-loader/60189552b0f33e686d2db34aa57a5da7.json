{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule applyEntityToContentState\n * @format\n * \n */\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar applyEntityToContentBlock = require('./applyEntityToContentBlock');\n\nfunction applyEntityToContentState(contentState, selectionState, entityKey) {\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var newBlocks = blockMap.skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).toOrderedMap().merge(Immutable.OrderedMap([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {\n    var sliceStart = blockKey === startKey ? startOffset : 0;\n    var sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n    return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);\n  });\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = applyEntityToContentState;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/applyEntityToContentState.js"],"names":["Immutable","require","applyEntityToContentBlock","applyEntityToContentState","contentState","selectionState","entityKey","blockMap","getBlockMap","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","newBlocks","skipUntil","_","k","takeUntil","toOrderedMap","merge","OrderedMap","get","map","block","blockKey","sliceStart","sliceEnd","getLength","selectionBefore","selectionAfter","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,yBAAyB,GAAGD,OAAO,CAAC,6BAAD,CAAvC;;AAEA,SAASE,yBAAT,CAAmCC,YAAnC,EAAiDC,cAAjD,EAAiEC,SAAjE,EAA4E;AAC1E,MAAIC,QAAQ,GAAGH,YAAY,CAACI,WAAb,EAAf;AACA,MAAIC,QAAQ,GAAGJ,cAAc,CAACK,WAAf,EAAf;AACA,MAAIC,WAAW,GAAGN,cAAc,CAACO,cAAf,EAAlB;AACA,MAAIC,MAAM,GAAGR,cAAc,CAACS,SAAf,EAAb;AACA,MAAIC,SAAS,GAAGV,cAAc,CAACW,YAAf,EAAhB;AAEA,MAAIC,SAAS,GAAGV,QAAQ,CAACW,SAAT,CAAmB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACjD,WAAOA,CAAC,KAAKX,QAAb;AACD,GAFe,EAEbY,SAFa,CAEH,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AAC3B,WAAOA,CAAC,KAAKP,MAAb;AACD,GAJe,EAIbS,YAJa,GAIEC,KAJF,CAIQvB,SAAS,CAACwB,UAAV,CAAqB,CAAC,CAACX,MAAD,EAASN,QAAQ,CAACkB,GAAT,CAAaZ,MAAb,CAAT,CAAD,CAArB,CAJR,EAIgEa,GAJhE,CAIoE,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC7G,QAAIC,UAAU,GAAGD,QAAQ,KAAKnB,QAAb,GAAwBE,WAAxB,GAAsC,CAAvD;AACA,QAAImB,QAAQ,GAAGF,QAAQ,KAAKf,MAAb,GAAsBE,SAAtB,GAAkCY,KAAK,CAACI,SAAN,EAAjD;AACA,WAAO7B,yBAAyB,CAACyB,KAAD,EAAQE,UAAR,EAAoBC,QAApB,EAA8BxB,SAA9B,CAAhC;AACD,GARe,CAAhB;AAUA,SAAOF,YAAY,CAACmB,KAAb,CAAmB;AACxBhB,IAAAA,QAAQ,EAAEA,QAAQ,CAACgB,KAAT,CAAeN,SAAf,CADc;AAExBe,IAAAA,eAAe,EAAE3B,cAFO;AAGxB4B,IAAAA,cAAc,EAAE5B;AAHQ,GAAnB,CAAP;AAKD;;AAED6B,MAAM,CAACC,OAAP,GAAiBhC,yBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule applyEntityToContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar applyEntityToContentBlock = require('./applyEntityToContentBlock');\n\nfunction applyEntityToContentState(contentState, selectionState, entityKey) {\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  var newBlocks = blockMap.skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).toOrderedMap().merge(Immutable.OrderedMap([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {\n    var sliceStart = blockKey === startKey ? startOffset : 0;\n    var sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n    return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);\n  });\n\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = applyEntityToContentState;"]},"metadata":{},"sourceType":"script"}