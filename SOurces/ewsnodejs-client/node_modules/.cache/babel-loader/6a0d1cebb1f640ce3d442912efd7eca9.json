{"ast":null,"code":"// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object'); // instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\n\n\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/core-js/library/modules/_to-primitive.js"],"names":["isObject","require","module","exports","it","S","fn","val","toString","call","valueOf","TypeError"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAtB,C,CACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,EAAV,EAAcC,CAAd,EAAiB;AAChC,MAAI,CAACL,QAAQ,CAACI,EAAD,CAAb,EAAmB,OAAOA,EAAP;AACnB,MAAIE,EAAJ,EAAQC,GAAR;AACA,MAAIF,CAAC,IAAI,QAAQC,EAAE,GAAGF,EAAE,CAACI,QAAhB,KAA6B,UAAlC,IAAgD,CAACR,QAAQ,CAACO,GAAG,GAAGD,EAAE,CAACG,IAAH,CAAQL,EAAR,CAAP,CAA7D,EAAkF,OAAOG,GAAP;AAClF,MAAI,QAAQD,EAAE,GAAGF,EAAE,CAACM,OAAhB,KAA4B,UAA5B,IAA0C,CAACV,QAAQ,CAACO,GAAG,GAAGD,EAAE,CAACG,IAAH,CAAQL,EAAR,CAAP,CAAvD,EAA4E,OAAOG,GAAP;AAC5E,MAAI,CAACF,CAAD,IAAM,QAAQC,EAAE,GAAGF,EAAE,CAACI,QAAhB,KAA6B,UAAnC,IAAiD,CAACR,QAAQ,CAACO,GAAG,GAAGD,EAAE,CAACG,IAAH,CAAQL,EAAR,CAAP,CAA9D,EAAmF,OAAOG,GAAP;AACnF,QAAMI,SAAS,CAAC,yCAAD,CAAf;AACD,CAPD","sourcesContent":["// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n"]},"metadata":{},"sourceType":"script"}