{"ast":null,"code":"function RedBlackTree() {\n  this._ = null; // root node\n}\n\nexport function RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n  insert: function insert(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n\n      if (after.R) {\n        after = after.R;\n\n        while (after.L) {\n          after = after.L;\n        }\n\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n    after = node;\n\n    while (parent && parent.C) {\n      grandpa = parent.U;\n\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n\n      parent = after.U;\n    }\n\n    this._.C = false;\n  },\n  remove: function remove(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n\n    if (node && node.C) {\n      node.C = false;\n      return;\n    }\n\n    do {\n      if (node === this._) break;\n\n      if (node === parent.L) {\n        sibling = parent.R;\n\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n\n        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n\n        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) {\n    node = node.L;\n  }\n\n  return node;\n}\n\nexport default RedBlackTree;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-voronoi/src/RedBlackTree.js"],"names":["RedBlackTree","_","RedBlackNode","node","U","C","L","R","P","N","prototype","constructor","insert","after","parent","grandpa","uncle","RedBlackFirst","RedBlackRotateLeft","RedBlackRotateRight","remove","sibling","left","right","next","red","tree","p","q"],"mappings":"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","sourcesContent":["function RedBlackTree() {\n  this._ = null; // root node\n}\n\nexport function RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n\n  insert: function(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n      if (after.R) {\n        after = after.R;\n        while (after.L) after = after.L;\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n\n    after = node;\n    while (parent && parent.C) {\n      grandpa = parent.U;\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n      parent = after.U;\n    }\n    this._.C = false;\n  },\n\n  remove: function(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n\n    if (!left) next = right;\n    else if (!right) next = left;\n    else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;\n      else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n    if (node && node.C) { node.C = false; return; }\n\n    do {\n      if (node === this._) break;\n      if (node === parent.L) {\n        sibling = parent.R;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n        if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n        if ((sibling.L && sibling.L.C)\n          || (sibling.R && sibling.R.C)) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) node = node.L;\n  return node;\n}\n\nexport default RedBlackTree;\n"]},"metadata":{},"sourceType":"module"}