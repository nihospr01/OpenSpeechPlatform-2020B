{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule removeRangeFromContentState\n * @format\n * \n */\n'use strict';\n\nvar ContentBlockNode = require('./ContentBlockNode');\n\nvar Immutable = require('immutable');\n\nvar getNextDelimiterBlockKey = require('./getNextDelimiterBlockKey');\n\nvar List = Immutable.List,\n    Map = Immutable.Map;\n\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n\n  var block = blockMap.get(key);\n\n  if (!block) {\n    return;\n  }\n\n  blockMap.set(key, func(block));\n};\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */\n\n\nvar getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n  var parents = [];\n\n  if (!blockKey) {\n    return parents;\n  }\n\n  var blockNode = blockMap.get(blockKey);\n\n  while (blockNode && blockNode.getParentKey()) {\n    var parentKey = blockNode.getParentKey();\n\n    if (parentKey) {\n      parents.push(parentKey);\n    }\n\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\n  }\n\n  return parents;\n};\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */\n\n\nvar getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n  var nextDelimiters = [];\n\n  if (!block) {\n    return nextDelimiters;\n  }\n\n  var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\n    var _block = blockMap.get(nextDelimiter);\n\n    nextDelimiters.push(nextDelimiter); // we do not need to keep checking all root node siblings, just the first occurance\n\n    nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n  }\n\n  return nextDelimiters;\n};\n\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  } // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n\n\n  var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\n    nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n  }\n\n  return nextValidSiblingKey;\n};\n\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  } // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n\n\n  var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\n    prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n  }\n\n  return prevValidSiblingKey;\n};\n\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n  return blockMap.withMutations(function (blocks) {\n    // update start block if its retained\n    transformBlock(startBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    }); // update endblock if its retained\n\n    transformBlock(endBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(endBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    }); // update start block parent ancestors\n\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      return transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // update start block next - can only happen if startBlock == endBlock\n\n    transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: startBlock.getPrevSiblingKey()\n      });\n    }); // update start block prev\n\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    }); // update end block next\n\n    transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    }); // update end block prev\n\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: endBlock.getNextSiblingKey()\n      });\n    }); // update end block parent ancestors\n\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    }); // update next delimiters all the way to a root delimiter\n\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {\n      return transformBlock(delimiterKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n  });\n};\n\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n  if (selectionState.isCollapsed()) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var startBlock = blockMap.get(startKey);\n  var endBlock = blockMap.get(endKey); // we assume that ContentBlockNode and ContentBlocks are not mixed together\n\n  var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode; // used to retain blocks that should not be deleted to avoid orphan children\n\n  var parentAncestors = [];\n\n  if (isExperimentalTreeBlock) {\n    var endBlockchildrenKeys = endBlock.getChildKeys();\n    var endBlockAncestors = getAncestorsKeys(endKey, blockMap); // endBlock has unselected sibblings so we can not remove its ancestors parents\n\n    if (endBlock.getNextSiblingKey()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\n    } // endBlock has children so can not remove this block or any of its ancestors\n\n\n    if (!endBlockchildrenKeys.isEmpty()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));\n    } // we need to retain all ancestors of the next delimiter block\n\n\n    parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n  }\n\n  var characterList = void 0;\n\n  if (startBlock === endBlock) {\n    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n  } else {\n    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n  }\n\n  var modifiedStart = startBlock.merge({\n    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n    characterList: characterList\n  });\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).filter(function (_, k) {\n    return parentAncestors.indexOf(k) === -1;\n  }).concat(Map([[endKey, null]])).map(function (_, k) {\n    return k === startKey ? modifiedStart : null;\n  });\n  var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {\n    return !!block;\n  });\n\n  if (isExperimentalTreeBlock) {\n    updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n  }\n\n  return contentState.merge({\n    blockMap: updatedBlockMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: startKey,\n      anchorOffset: startOffset,\n      focusKey: startKey,\n      focusOffset: startOffset,\n      isBackward: false\n    })\n  });\n};\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */\n\n\nvar removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n  if (startOffset === 0) {\n    while (startOffset < endOffset) {\n      targetList = targetList.shift();\n      startOffset++;\n    }\n  } else if (endOffset === targetList.count()) {\n    while (endOffset > startOffset) {\n      targetList = targetList.pop();\n      endOffset--;\n    }\n  } else {\n    var head = targetList.slice(0, startOffset);\n    var tail = targetList.slice(endOffset);\n    targetList = head.concat(tail).toList();\n  }\n\n  return targetList;\n};\n\nmodule.exports = removeRangeFromContentState;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/removeRangeFromContentState.js"],"names":["ContentBlockNode","require","Immutable","getNextDelimiterBlockKey","List","Map","transformBlock","key","blockMap","func","block","get","set","getAncestorsKeys","blockKey","parents","blockNode","getParentKey","parentKey","push","getNextDelimitersBlockKeys","nextDelimiters","nextDelimiter","_block","getNextValidSibling","originalBlockMap","nextValidSiblingKey","getKey","getNextSiblingKey","getPrevValidSibling","prevValidSiblingKey","getPrevSiblingKey","updateBlockMapLinks","startBlock","endBlock","withMutations","blocks","merge","nextSibling","prevSibling","forEach","children","getChildKeys","filter","delimiterKey","removeRangeFromContentState","contentState","selectionState","isCollapsed","getBlockMap","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","isExperimentalTreeBlock","parentAncestors","endBlockchildrenKeys","endBlockAncestors","concat","isEmpty","characterList","removeFromList","getCharacterList","slice","modifiedStart","text","getText","newBlocks","toSeq","skipUntil","_","k","takeUntil","indexOf","map","updatedBlockMap","selectionBefore","selectionAfter","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","targetList","shift","count","pop","head","tail","toList","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,4BAAD,CAAtC;;AAEA,IAAIG,IAAI,GAAGF,SAAS,CAACE,IAArB;AAAA,IACIC,GAAG,GAAGH,SAAS,CAACG,GADpB;;AAIA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,QAA7B,EAAuCC,IAAvC,EAA6C;AAChE,MAAI,CAACF,GAAL,EAAU;AACR;AACD;;AAED,MAAIG,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAaJ,GAAb,CAAZ;;AAEA,MAAI,CAACG,KAAL,EAAY;AACV;AACD;;AAEDF,EAAAA,QAAQ,CAACI,GAAT,CAAaL,GAAb,EAAkBE,IAAI,CAACC,KAAD,CAAtB;AACD,CAZD;AAcA;AACA;AACA;AACA;;;AACA,IAAIG,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCN,QAApC,EAA8C;AACnE,MAAIO,OAAO,GAAG,EAAd;;AAEA,MAAI,CAACD,QAAL,EAAe;AACb,WAAOC,OAAP;AACD;;AAED,MAAIC,SAAS,GAAGR,QAAQ,CAACG,GAAT,CAAaG,QAAb,CAAhB;;AACA,SAAOE,SAAS,IAAIA,SAAS,CAACC,YAAV,EAApB,EAA8C;AAC5C,QAAIC,SAAS,GAAGF,SAAS,CAACC,YAAV,EAAhB;;AACA,QAAIC,SAAJ,EAAe;AACbH,MAAAA,OAAO,CAACI,IAAR,CAAaD,SAAb;AACD;;AACDF,IAAAA,SAAS,GAAGE,SAAS,GAAGV,QAAQ,CAACG,GAAT,CAAaO,SAAb,CAAH,GAA6B,IAAlD;AACD;;AAED,SAAOH,OAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;;;AACA,IAAIK,0BAA0B,GAAG,SAASA,0BAAT,CAAoCV,KAApC,EAA2CF,QAA3C,EAAqD;AACpF,MAAIa,cAAc,GAAG,EAArB;;AAEA,MAAI,CAACX,KAAL,EAAY;AACV,WAAOW,cAAP;AACD;;AAED,MAAIC,aAAa,GAAGnB,wBAAwB,CAACO,KAAD,EAAQF,QAAR,CAA5C;;AACA,SAAOc,aAAa,IAAId,QAAQ,CAACG,GAAT,CAAaW,aAAb,CAAxB,EAAqD;AACnD,QAAIC,MAAM,GAAGf,QAAQ,CAACG,GAAT,CAAaW,aAAb,CAAb;;AACAD,IAAAA,cAAc,CAACF,IAAf,CAAoBG,aAApB,EAFmD,CAInD;;AACAA,IAAAA,aAAa,GAAGC,MAAM,CAACN,YAAP,KAAwBd,wBAAwB,CAACoB,MAAD,EAASf,QAAT,CAAhD,GAAqE,IAArF;AACD;;AAED,SAAOa,cAAP;AACD,CAjBD;;AAmBA,IAAIG,mBAAmB,GAAG,SAASA,mBAAT,CAA6Bd,KAA7B,EAAoCF,QAApC,EAA8CiB,gBAA9C,EAAgE;AACxF,MAAI,CAACf,KAAL,EAAY;AACV,WAAO,IAAP;AACD,GAHuF,CAKxF;AACA;;;AACA,MAAIgB,mBAAmB,GAAGD,gBAAgB,CAACd,GAAjB,CAAqBD,KAAK,CAACiB,MAAN,EAArB,EAAqCC,iBAArC,EAA1B;;AAEA,SAAOF,mBAAmB,IAAI,CAAClB,QAAQ,CAACG,GAAT,CAAae,mBAAb,CAA/B,EAAkE;AAChEA,IAAAA,mBAAmB,GAAGD,gBAAgB,CAACd,GAAjB,CAAqBe,mBAArB,EAA0CE,iBAA1C,MAAiE,IAAvF;AACD;;AAED,SAAOF,mBAAP;AACD,CAdD;;AAgBA,IAAIG,mBAAmB,GAAG,SAASA,mBAAT,CAA6BnB,KAA7B,EAAoCF,QAApC,EAA8CiB,gBAA9C,EAAgE;AACxF,MAAI,CAACf,KAAL,EAAY;AACV,WAAO,IAAP;AACD,GAHuF,CAKxF;AACA;;;AACA,MAAIoB,mBAAmB,GAAGL,gBAAgB,CAACd,GAAjB,CAAqBD,KAAK,CAACiB,MAAN,EAArB,EAAqCI,iBAArC,EAA1B;;AAEA,SAAOD,mBAAmB,IAAI,CAACtB,QAAQ,CAACG,GAAT,CAAamB,mBAAb,CAA/B,EAAkE;AAChEA,IAAAA,mBAAmB,GAAGL,gBAAgB,CAACd,GAAjB,CAAqBmB,mBAArB,EAA0CC,iBAA1C,MAAiE,IAAvF;AACD;;AAED,SAAOD,mBAAP;AACD,CAdD;;AAgBA,IAAIE,mBAAmB,GAAG,SAASA,mBAAT,CAA6BxB,QAA7B,EAAuCyB,UAAvC,EAAmDC,QAAnD,EAA6DT,gBAA7D,EAA+E;AACvG,SAAOjB,QAAQ,CAAC2B,aAAT,CAAuB,UAAUC,MAAV,EAAkB;AAC9C;AACA9B,IAAAA,cAAc,CAAC2B,UAAU,CAACN,MAAX,EAAD,EAAsBS,MAAtB,EAA8B,UAAU1B,KAAV,EAAiB;AAC3D,aAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBC,QAAAA,WAAW,EAAEd,mBAAmB,CAACS,UAAD,EAAaG,MAAb,EAAqBX,gBAArB,CADf;AAEjBc,QAAAA,WAAW,EAAEV,mBAAmB,CAACI,UAAD,EAAaG,MAAb,EAAqBX,gBAArB;AAFf,OAAZ,CAAP;AAID,KALa,CAAd,CAF8C,CAS9C;;AACAnB,IAAAA,cAAc,CAAC4B,QAAQ,CAACP,MAAT,EAAD,EAAoBS,MAApB,EAA4B,UAAU1B,KAAV,EAAiB;AACzD,aAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBC,QAAAA,WAAW,EAAEd,mBAAmB,CAACU,QAAD,EAAWE,MAAX,EAAmBX,gBAAnB,CADf;AAEjBc,QAAAA,WAAW,EAAEV,mBAAmB,CAACK,QAAD,EAAWE,MAAX,EAAmBX,gBAAnB;AAFf,OAAZ,CAAP;AAID,KALa,CAAd,CAV8C,CAiB9C;;AACAZ,IAAAA,gBAAgB,CAACoB,UAAU,CAACN,MAAX,EAAD,EAAsBF,gBAAtB,CAAhB,CAAwDe,OAAxD,CAAgE,UAAUtB,SAAV,EAAqB;AACnF,aAAOZ,cAAc,CAACY,SAAD,EAAYkB,MAAZ,EAAoB,UAAU1B,KAAV,EAAiB;AACxD,eAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBI,UAAAA,QAAQ,EAAE/B,KAAK,CAACgC,YAAN,GAAqBC,MAArB,CAA4B,UAAUpC,GAAV,EAAe;AACnD,mBAAO6B,MAAM,CAACzB,GAAP,CAAWJ,GAAX,CAAP;AACD,WAFS,CADO;AAIjB+B,UAAAA,WAAW,EAAEd,mBAAmB,CAACd,KAAD,EAAQ0B,MAAR,EAAgBX,gBAAhB,CAJf;AAKjBc,UAAAA,WAAW,EAAEV,mBAAmB,CAACnB,KAAD,EAAQ0B,MAAR,EAAgBX,gBAAhB;AALf,SAAZ,CAAP;AAOD,OARoB,CAArB;AASD,KAVD,EAlB8C,CA8B9C;;AACAnB,IAAAA,cAAc,CAAC2B,UAAU,CAACL,iBAAX,EAAD,EAAiCQ,MAAjC,EAAyC,UAAU1B,KAAV,EAAiB;AACtE,aAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBE,QAAAA,WAAW,EAAEN,UAAU,CAACF,iBAAX;AADI,OAAZ,CAAP;AAGD,KAJa,CAAd,CA/B8C,CAqC9C;;AACAzB,IAAAA,cAAc,CAAC2B,UAAU,CAACF,iBAAX,EAAD,EAAiCK,MAAjC,EAAyC,UAAU1B,KAAV,EAAiB;AACtE,aAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBC,QAAAA,WAAW,EAAEd,mBAAmB,CAACS,UAAD,EAAaG,MAAb,EAAqBX,gBAArB;AADf,OAAZ,CAAP;AAGD,KAJa,CAAd,CAtC8C,CA4C9C;;AACAnB,IAAAA,cAAc,CAAC4B,QAAQ,CAACN,iBAAT,EAAD,EAA+BQ,MAA/B,EAAuC,UAAU1B,KAAV,EAAiB;AACpE,aAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBE,QAAAA,WAAW,EAAEV,mBAAmB,CAACK,QAAD,EAAWE,MAAX,EAAmBX,gBAAnB;AADf,OAAZ,CAAP;AAGD,KAJa,CAAd,CA7C8C,CAmD9C;;AACAnB,IAAAA,cAAc,CAAC4B,QAAQ,CAACH,iBAAT,EAAD,EAA+BK,MAA/B,EAAuC,UAAU1B,KAAV,EAAiB;AACpE,aAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBC,QAAAA,WAAW,EAAEJ,QAAQ,CAACN,iBAAT;AADI,OAAZ,CAAP;AAGD,KAJa,CAAd,CApD8C,CA0D9C;;AACAf,IAAAA,gBAAgB,CAACqB,QAAQ,CAACP,MAAT,EAAD,EAAoBF,gBAApB,CAAhB,CAAsDe,OAAtD,CAA8D,UAAUtB,SAAV,EAAqB;AACjFZ,MAAAA,cAAc,CAACY,SAAD,EAAYkB,MAAZ,EAAoB,UAAU1B,KAAV,EAAiB;AACjD,eAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBI,UAAAA,QAAQ,EAAE/B,KAAK,CAACgC,YAAN,GAAqBC,MAArB,CAA4B,UAAUpC,GAAV,EAAe;AACnD,mBAAO6B,MAAM,CAACzB,GAAP,CAAWJ,GAAX,CAAP;AACD,WAFS,CADO;AAIjB+B,UAAAA,WAAW,EAAEd,mBAAmB,CAACd,KAAD,EAAQ0B,MAAR,EAAgBX,gBAAhB,CAJf;AAKjBc,UAAAA,WAAW,EAAEV,mBAAmB,CAACnB,KAAD,EAAQ0B,MAAR,EAAgBX,gBAAhB;AALf,SAAZ,CAAP;AAOD,OARa,CAAd;AASD,KAVD,EA3D8C,CAuE9C;;AACAL,IAAAA,0BAA0B,CAACc,QAAD,EAAWT,gBAAX,CAA1B,CAAuDe,OAAvD,CAA+D,UAAUI,YAAV,EAAwB;AACrF,aAAOtC,cAAc,CAACsC,YAAD,EAAeR,MAAf,EAAuB,UAAU1B,KAAV,EAAiB;AAC3D,eAAOA,KAAK,CAAC2B,KAAN,CAAY;AACjBC,UAAAA,WAAW,EAAEd,mBAAmB,CAACd,KAAD,EAAQ0B,MAAR,EAAgBX,gBAAhB,CADf;AAEjBc,UAAAA,WAAW,EAAEV,mBAAmB,CAACnB,KAAD,EAAQ0B,MAAR,EAAgBX,gBAAhB;AAFf,SAAZ,CAAP;AAID,OALoB,CAArB;AAMD,KAPD;AAQD,GAhFM,CAAP;AAiFD,CAlFD;;AAoFA,IAAIoB,2BAA2B,GAAG,SAASA,2BAAT,CAAqCC,YAArC,EAAmDC,cAAnD,EAAmE;AACnG,MAAIA,cAAc,CAACC,WAAf,EAAJ,EAAkC;AAChC,WAAOF,YAAP;AACD;;AAED,MAAItC,QAAQ,GAAGsC,YAAY,CAACG,WAAb,EAAf;AACA,MAAIC,QAAQ,GAAGH,cAAc,CAACI,WAAf,EAAf;AACA,MAAIC,WAAW,GAAGL,cAAc,CAACM,cAAf,EAAlB;AACA,MAAIC,MAAM,GAAGP,cAAc,CAACQ,SAAf,EAAb;AACA,MAAIC,SAAS,GAAGT,cAAc,CAACU,YAAf,EAAhB;AAEA,MAAIxB,UAAU,GAAGzB,QAAQ,CAACG,GAAT,CAAauC,QAAb,CAAjB;AACA,MAAIhB,QAAQ,GAAG1B,QAAQ,CAACG,GAAT,CAAa2C,MAAb,CAAf,CAZmG,CAcnG;;AACA,MAAII,uBAAuB,GAAGzB,UAAU,YAAYjC,gBAApD,CAfmG,CAiBnG;;AACA,MAAI2D,eAAe,GAAG,EAAtB;;AAEA,MAAID,uBAAJ,EAA6B;AAC3B,QAAIE,oBAAoB,GAAG1B,QAAQ,CAACQ,YAAT,EAA3B;AACA,QAAImB,iBAAiB,GAAGhD,gBAAgB,CAACyC,MAAD,EAAS9C,QAAT,CAAxC,CAF2B,CAI3B;;AACA,QAAI0B,QAAQ,CAACN,iBAAT,EAAJ,EAAkC;AAChC+B,MAAAA,eAAe,GAAGA,eAAe,CAACG,MAAhB,CAAuBD,iBAAvB,CAAlB;AACD,KAP0B,CAS3B;;;AACA,QAAI,CAACD,oBAAoB,CAACG,OAArB,EAAL,EAAqC;AACnCJ,MAAAA,eAAe,GAAGA,eAAe,CAACG,MAAhB,CAAuBD,iBAAiB,CAACC,MAAlB,CAAyB,CAACR,MAAD,CAAzB,CAAvB,CAAlB;AACD,KAZ0B,CAc3B;;;AACAK,IAAAA,eAAe,GAAGA,eAAe,CAACG,MAAhB,CAAuBjD,gBAAgB,CAACV,wBAAwB,CAAC+B,QAAD,EAAW1B,QAAX,CAAzB,EAA+CA,QAA/C,CAAvC,CAAlB;AACD;;AAED,MAAIwD,aAAa,GAAG,KAAK,CAAzB;;AAEA,MAAI/B,UAAU,KAAKC,QAAnB,EAA6B;AAC3B8B,IAAAA,aAAa,GAAGC,cAAc,CAAChC,UAAU,CAACiC,gBAAX,EAAD,EAAgCd,WAAhC,EAA6CI,SAA7C,CAA9B;AACD,GAFD,MAEO;AACLQ,IAAAA,aAAa,GAAG/B,UAAU,CAACiC,gBAAX,GAA8BC,KAA9B,CAAoC,CAApC,EAAuCf,WAAvC,EAAoDU,MAApD,CAA2D5B,QAAQ,CAACgC,gBAAT,GAA4BC,KAA5B,CAAkCX,SAAlC,CAA3D,CAAhB;AACD;;AAED,MAAIY,aAAa,GAAGnC,UAAU,CAACI,KAAX,CAAiB;AACnCgC,IAAAA,IAAI,EAAEpC,UAAU,CAACqC,OAAX,GAAqBH,KAArB,CAA2B,CAA3B,EAA8Bf,WAA9B,IAA6ClB,QAAQ,CAACoC,OAAT,GAAmBH,KAAnB,CAAyBX,SAAzB,CADhB;AAEnCQ,IAAAA,aAAa,EAAEA;AAFoB,GAAjB,CAApB;AAKA,MAAIO,SAAS,GAAG/D,QAAQ,CAACgE,KAAT,GAAiBC,SAAjB,CAA2B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACzD,WAAOA,CAAC,KAAKzB,QAAb;AACD,GAFe,EAEb0B,SAFa,CAEH,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AAC3B,WAAOA,CAAC,KAAKrB,MAAb;AACD,GAJe,EAIbX,MAJa,CAIN,UAAU+B,CAAV,EAAaC,CAAb,EAAgB;AACxB,WAAOhB,eAAe,CAACkB,OAAhB,CAAwBF,CAAxB,MAA+B,CAAC,CAAvC;AACD,GANe,EAMbb,MANa,CAMNzD,GAAG,CAAC,CAAC,CAACiD,MAAD,EAAS,IAAT,CAAD,CAAD,CANG,EAMiBwB,GANjB,CAMqB,UAAUJ,CAAV,EAAaC,CAAb,EAAgB;AACnD,WAAOA,CAAC,KAAKzB,QAAN,GAAiBkB,aAAjB,GAAiC,IAAxC;AACD,GARe,CAAhB;AAUA,MAAIW,eAAe,GAAGvE,QAAQ,CAAC6B,KAAT,CAAekC,SAAf,EAA0B5B,MAA1B,CAAiC,UAAUjC,KAAV,EAAiB;AACtE,WAAO,CAAC,CAACA,KAAT;AACD,GAFqB,CAAtB;;AAIA,MAAIgD,uBAAJ,EAA6B;AAC3BqB,IAAAA,eAAe,GAAG/C,mBAAmB,CAAC+C,eAAD,EAAkB9C,UAAlB,EAA8BC,QAA9B,EAAwC1B,QAAxC,CAArC;AACD;;AAED,SAAOsC,YAAY,CAACT,KAAb,CAAmB;AACxB7B,IAAAA,QAAQ,EAAEuE,eADc;AAExBC,IAAAA,eAAe,EAAEjC,cAFO;AAGxBkC,IAAAA,cAAc,EAAElC,cAAc,CAACV,KAAf,CAAqB;AACnC6C,MAAAA,SAAS,EAAEhC,QADwB;AAEnCiC,MAAAA,YAAY,EAAE/B,WAFqB;AAGnCgC,MAAAA,QAAQ,EAAElC,QAHyB;AAInCmC,MAAAA,WAAW,EAAEjC,WAJsB;AAKnCkC,MAAAA,UAAU,EAAE;AALuB,KAArB;AAHQ,GAAnB,CAAP;AAWD,CAhFD;AAkFA;AACA;AACA;AACA;;;AACA,IAAIrB,cAAc,GAAG,SAASA,cAAT,CAAwBsB,UAAxB,EAAoCnC,WAApC,EAAiDI,SAAjD,EAA4D;AAC/E,MAAIJ,WAAW,KAAK,CAApB,EAAuB;AACrB,WAAOA,WAAW,GAAGI,SAArB,EAAgC;AAC9B+B,MAAAA,UAAU,GAAGA,UAAU,CAACC,KAAX,EAAb;AACApC,MAAAA,WAAW;AACZ;AACF,GALD,MAKO,IAAII,SAAS,KAAK+B,UAAU,CAACE,KAAX,EAAlB,EAAsC;AAC3C,WAAOjC,SAAS,GAAGJ,WAAnB,EAAgC;AAC9BmC,MAAAA,UAAU,GAAGA,UAAU,CAACG,GAAX,EAAb;AACAlC,MAAAA,SAAS;AACV;AACF,GALM,MAKA;AACL,QAAImC,IAAI,GAAGJ,UAAU,CAACpB,KAAX,CAAiB,CAAjB,EAAoBf,WAApB,CAAX;AACA,QAAIwC,IAAI,GAAGL,UAAU,CAACpB,KAAX,CAAiBX,SAAjB,CAAX;AACA+B,IAAAA,UAAU,GAAGI,IAAI,CAAC7B,MAAL,CAAY8B,IAAZ,EAAkBC,MAAlB,EAAb;AACD;;AACD,SAAON,UAAP;AACD,CAjBD;;AAmBAO,MAAM,CAACC,OAAP,GAAiBlD,2BAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule removeRangeFromContentState\n * @format\n * \n */\n\n'use strict';\n\nvar ContentBlockNode = require('./ContentBlockNode');\nvar Immutable = require('immutable');\n\nvar getNextDelimiterBlockKey = require('./getNextDelimiterBlockKey');\n\nvar List = Immutable.List,\n    Map = Immutable.Map;\n\n\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n\n  var block = blockMap.get(key);\n\n  if (!block) {\n    return;\n  }\n\n  blockMap.set(key, func(block));\n};\n\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */\nvar getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n  var parents = [];\n\n  if (!blockKey) {\n    return parents;\n  }\n\n  var blockNode = blockMap.get(blockKey);\n  while (blockNode && blockNode.getParentKey()) {\n    var parentKey = blockNode.getParentKey();\n    if (parentKey) {\n      parents.push(parentKey);\n    }\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\n  }\n\n  return parents;\n};\n\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */\nvar getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n  var nextDelimiters = [];\n\n  if (!block) {\n    return nextDelimiters;\n  }\n\n  var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\n    var _block = blockMap.get(nextDelimiter);\n    nextDelimiters.push(nextDelimiter);\n\n    // we do not need to keep checking all root node siblings, just the first occurance\n    nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n  }\n\n  return nextDelimiters;\n};\n\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  }\n\n  // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n  var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\n    nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n  }\n\n  return nextValidSiblingKey;\n};\n\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  }\n\n  // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n  var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\n    prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n  }\n\n  return prevValidSiblingKey;\n};\n\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n  return blockMap.withMutations(function (blocks) {\n    // update start block if its retained\n    transformBlock(startBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update endblock if its retained\n    transformBlock(endBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(endBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update start block parent ancestors\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      return transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n\n    // update start block next - can only happen if startBlock == endBlock\n    transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: startBlock.getPrevSiblingKey()\n      });\n    });\n\n    // update start block prev\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update end block next\n    transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update end block prev\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: endBlock.getNextSiblingKey()\n      });\n    });\n\n    // update end block parent ancestors\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n\n    // update next delimiters all the way to a root delimiter\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {\n      return transformBlock(delimiterKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n  });\n};\n\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n  if (selectionState.isCollapsed()) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  var startBlock = blockMap.get(startKey);\n  var endBlock = blockMap.get(endKey);\n\n  // we assume that ContentBlockNode and ContentBlocks are not mixed together\n  var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode;\n\n  // used to retain blocks that should not be deleted to avoid orphan children\n  var parentAncestors = [];\n\n  if (isExperimentalTreeBlock) {\n    var endBlockchildrenKeys = endBlock.getChildKeys();\n    var endBlockAncestors = getAncestorsKeys(endKey, blockMap);\n\n    // endBlock has unselected sibblings so we can not remove its ancestors parents\n    if (endBlock.getNextSiblingKey()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\n    }\n\n    // endBlock has children so can not remove this block or any of its ancestors\n    if (!endBlockchildrenKeys.isEmpty()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));\n    }\n\n    // we need to retain all ancestors of the next delimiter block\n    parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n  }\n\n  var characterList = void 0;\n\n  if (startBlock === endBlock) {\n    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n  } else {\n    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n  }\n\n  var modifiedStart = startBlock.merge({\n    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n    characterList: characterList\n  });\n\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).filter(function (_, k) {\n    return parentAncestors.indexOf(k) === -1;\n  }).concat(Map([[endKey, null]])).map(function (_, k) {\n    return k === startKey ? modifiedStart : null;\n  });\n\n  var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {\n    return !!block;\n  });\n\n  if (isExperimentalTreeBlock) {\n    updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n  }\n\n  return contentState.merge({\n    blockMap: updatedBlockMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: startKey,\n      anchorOffset: startOffset,\n      focusKey: startKey,\n      focusOffset: startOffset,\n      isBackward: false\n    })\n  });\n};\n\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */\nvar removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n  if (startOffset === 0) {\n    while (startOffset < endOffset) {\n      targetList = targetList.shift();\n      startOffset++;\n    }\n  } else if (endOffset === targetList.count()) {\n    while (endOffset > startOffset) {\n      targetList = targetList.pop();\n      endOffset--;\n    }\n  } else {\n    var head = targetList.slice(0, startOffset);\n    var tail = targetList.slice(endOffset);\n    targetList = head.concat(tail).toList();\n  }\n  return targetList;\n};\n\nmodule.exports = removeRangeFromContentState;"]},"metadata":{},"sourceType":"script"}