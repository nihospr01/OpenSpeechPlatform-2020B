{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftModifier\n * @format\n * \n */\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\n\nvar ContentStateInlineStyle = require('./ContentStateInlineStyle');\n\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\n\nvar Immutable = require('immutable');\n\nvar applyEntityToContentState = require('./applyEntityToContentState');\n\nvar getCharacterRemovalRange = require('./getCharacterRemovalRange');\n\nvar getContentStateFragment = require('./getContentStateFragment');\n\nvar insertFragmentIntoContentState = require('./insertFragmentIntoContentState');\n\nvar insertTextIntoContentState = require('./insertTextIntoContentState');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar modifyBlockForContentState = require('./modifyBlockForContentState');\n\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\n\nvar removeRangeFromContentState = require('./removeRangeFromContentState');\n\nvar splitBlockInContentState = require('./splitBlockInContentState');\n\nvar OrderedSet = Immutable.OrderedSet;\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);\n  },\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey = void 0,\n        endKey = void 0,\n        startBlock = void 0,\n        endBlock = void 0;\n\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var _adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n\n        return removeRangeFromContentState(contentState, _adjustedRemovalRange);\n      }\n    }\n\n    var adjustedRemovalRange = rangeToRemove;\n\n    if (DraftFeatureFlags.draft_segmented_entities_behavior) {\n      // Adjust the selection to properly delete segemented and immutable\n      // entities\n      adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n    }\n\n    var withoutEntities = removeEntitiesAtEdges(contentState, adjustedRemovalRange);\n    return removeRangeFromContentState(withoutEntities, adjustedRemovalRange);\n  },\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        type: blockType,\n        depth: 0\n      });\n    });\n  },\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: blockData\n      });\n    });\n  },\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: block.getData().merge(blockData)\n      });\n    });\n  },\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\nmodule.exports = DraftModifier;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/DraftModifier.js"],"names":["CharacterMetadata","require","ContentStateInlineStyle","DraftFeatureFlags","Immutable","applyEntityToContentState","getCharacterRemovalRange","getContentStateFragment","insertFragmentIntoContentState","insertTextIntoContentState","invariant","modifyBlockForContentState","removeEntitiesAtEdges","removeRangeFromContentState","splitBlockInContentState","OrderedSet","DraftModifier","replaceText","contentState","rangeToReplace","text","inlineStyle","entityKey","withoutEntities","withoutText","character","create","style","entity","getSelectionAfter","insertText","targetRange","isCollapsed","process","env","NODE_ENV","moveText","removalRange","movedFragment","afterRemoval","removeRange","replaceWithFragment","fragment","rangeToRemove","removalDirection","startKey","endKey","startBlock","endBlock","getIsBackward","merge","anchorKey","getFocusKey","anchorOffset","getFocusOffset","focusKey","getAnchorKey","focusOffset","getAnchorOffset","isBackward","getBlockForKey","startOffset","getStartOffset","endOffset","getEndOffset","startEntityKey","getEntityAt","endEntityKey","_adjustedRemovalRange","getEntityMap","adjustedRemovalRange","draft_segmented_entities_behavior","splitBlock","selectionState","applyInlineStyle","add","removeInlineStyle","remove","setBlockType","blockType","block","type","depth","setBlockData","blockData","data","mergeBlockData","getData","applyEntity","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftModifier\n * @format\n * \n */\n\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentStateInlineStyle = require('./ContentStateInlineStyle');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\n\nvar applyEntityToContentState = require('./applyEntityToContentState');\nvar getCharacterRemovalRange = require('./getCharacterRemovalRange');\nvar getContentStateFragment = require('./getContentStateFragment');\nvar insertFragmentIntoContentState = require('./insertFragmentIntoContentState');\nvar insertTextIntoContentState = require('./insertTextIntoContentState');\nvar invariant = require('fbjs/lib/invariant');\nvar modifyBlockForContentState = require('./modifyBlockForContentState');\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\nvar removeRangeFromContentState = require('./removeRangeFromContentState');\nvar splitBlockInContentState = require('./splitBlockInContentState');\n\nvar OrderedSet = Immutable.OrderedSet;\n\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);\n  },\n\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey = void 0,\n        endKey = void 0,\n        startBlock = void 0,\n        endBlock = void 0;\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1);\n\n    // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var _adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n        return removeRangeFromContentState(contentState, _adjustedRemovalRange);\n      }\n    }\n    var adjustedRemovalRange = rangeToRemove;\n    if (DraftFeatureFlags.draft_segmented_entities_behavior) {\n      // Adjust the selection to properly delete segemented and immutable\n      // entities\n      adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n    }\n\n    var withoutEntities = removeEntitiesAtEdges(contentState, adjustedRemovalRange);\n    return removeRangeFromContentState(withoutEntities, adjustedRemovalRange);\n  },\n\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({ type: blockType, depth: 0 });\n    });\n  },\n\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({ data: blockData });\n    });\n  },\n\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({ data: block.getData().merge(blockData) });\n    });\n  },\n\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\n\nmodule.exports = DraftModifier;"]},"metadata":{},"sourceType":"script"}