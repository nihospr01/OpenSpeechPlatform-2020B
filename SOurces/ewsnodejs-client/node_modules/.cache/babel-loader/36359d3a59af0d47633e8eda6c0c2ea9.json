{"ast":null,"code":"import ascending from \"./ascending\";\nimport number from \"./number\";\nimport quantile from \"./quantile\";\nexport default function (values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      numbers = [];\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        numbers.push(value);\n      }\n    }\n  } else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  return quantile(numbers.sort(ascending), 0.5);\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-array/src/median.js"],"names":["ascending","number","quantile","values","valueof","n","length","i","value","numbers","isNaN","push","sort"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACvC,MAAIC,CAAC,GAAGF,MAAM,CAACG,MAAf;AAAA,MACIC,CAAC,GAAG,CAAC,CADT;AAAA,MAEIC,KAFJ;AAAA,MAGIC,OAAO,GAAG,EAHd;;AAKA,MAAIL,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAO,EAAEG,CAAF,GAAMF,CAAb,EAAgB;AACd,UAAI,CAACK,KAAK,CAACF,KAAK,GAAGP,MAAM,CAACE,MAAM,CAACI,CAAD,CAAP,CAAf,CAAV,EAAuC;AACrCE,QAAAA,OAAO,CAACE,IAAR,CAAaH,KAAb;AACD;AACF;AACF,GAND,MAQK;AACH,WAAO,EAAED,CAAF,GAAMF,CAAb,EAAgB;AACd,UAAI,CAACK,KAAK,CAACF,KAAK,GAAGP,MAAM,CAACG,OAAO,CAACD,MAAM,CAACI,CAAD,CAAP,EAAYA,CAAZ,EAAeJ,MAAf,CAAR,CAAf,CAAV,EAA2D;AACzDM,QAAAA,OAAO,CAACE,IAAR,CAAaH,KAAb;AACD;AACF;AACF;;AAED,SAAON,QAAQ,CAACO,OAAO,CAACG,IAAR,CAAaZ,SAAb,CAAD,EAA0B,GAA1B,CAAf;AACD","sourcesContent":["import ascending from \"./ascending\";\nimport number from \"./number\";\nimport quantile from \"./quantile\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      numbers = [];\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        numbers.push(value);\n      }\n    }\n  }\n\n  return quantile(numbers.sort(ascending), 0.5);\n}\n"]},"metadata":{},"sourceType":"module"}