{"ast":null,"code":"import Quad from \"./quad.js\";\nexport default function (x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.\n\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n      quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.\n\n      if (i = (y >= ym) << 1 | x >= xm) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    } // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-quadtree/src/find.js"],"names":["Quad","x","y","radius","data","x0","_x0","y0","_y0","x1","y1","x2","y2","x3","_x1","y3","_y1","quads","node","_root","q","i","push","Infinity","pop","length","xm","ym","dx","_x","call","dy","_y","d2","d","Math","sqrt"],"mappings":"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","sourcesContent":["import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}