{"ast":null,"code":"export default function (end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n\n  var k = nodes.length;\n\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n\n  return c;\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-hierarchy/src/hierarchy/path.js"],"names":["end","start","ancestor","leastCommonAncestor","nodes","parent","push","k","length","splice","a","b","aNodes","ancestors","bNodes","c","pop"],"mappings":"AAAA,eAAe,UAASA,GAAT,EAAc;AAC3B,MAAIC,KAAK,GAAG,IAAZ;AAAA,MACIC,QAAQ,GAAGC,mBAAmB,CAACF,KAAD,EAAQD,GAAR,CADlC;AAAA,MAEII,KAAK,GAAG,CAACH,KAAD,CAFZ;;AAGA,SAAOA,KAAK,KAAKC,QAAjB,EAA2B;AACzBD,IAAAA,KAAK,GAAGA,KAAK,CAACI,MAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAWL,KAAX;AACD;;AACD,MAAIM,CAAC,GAAGH,KAAK,CAACI,MAAd;;AACA,SAAOR,GAAG,KAAKE,QAAf,EAAyB;AACvBE,IAAAA,KAAK,CAACK,MAAN,CAAaF,CAAb,EAAgB,CAAhB,EAAmBP,GAAnB;AACAA,IAAAA,GAAG,GAAGA,GAAG,CAACK,MAAV;AACD;;AACD,SAAOD,KAAP;AACD;;AAED,SAASD,mBAAT,CAA6BO,CAA7B,EAAgCC,CAAhC,EAAmC;AACjC,MAAID,CAAC,KAAKC,CAAV,EAAa,OAAOD,CAAP;AACb,MAAIE,MAAM,GAAGF,CAAC,CAACG,SAAF,EAAb;AAAA,MACIC,MAAM,GAAGH,CAAC,CAACE,SAAF,EADb;AAAA,MAEIE,CAAC,GAAG,IAFR;AAGAL,EAAAA,CAAC,GAAGE,MAAM,CAACI,GAAP,EAAJ;AACAL,EAAAA,CAAC,GAAGG,MAAM,CAACE,GAAP,EAAJ;;AACA,SAAON,CAAC,KAAKC,CAAb,EAAgB;AACdI,IAAAA,CAAC,GAAGL,CAAJ;AACAA,IAAAA,CAAC,GAAGE,MAAM,CAACI,GAAP,EAAJ;AACAL,IAAAA,CAAC,GAAGG,MAAM,CAACE,GAAP,EAAJ;AACD;;AACD,SAAOD,CAAP;AACD","sourcesContent":["export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n"]},"metadata":{},"sourceType":"module"}