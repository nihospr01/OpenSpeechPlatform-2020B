{"ast":null,"code":"function _point(that, x, y) {\n  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);\n}\n\nexport { _point as point };\nexport function Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\nCardinal.prototype = {\n  areaStart: function areaStart() {\n    this._line = 0;\n  },\n  areaEnd: function areaEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x2, this._y2);\n\n        break;\n\n      case 3:\n        _point(this, this._x1, this._y1);\n\n        break;\n    }\n\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n\n      case 1:\n        this._point = 2;\n        this._x1 = x, this._y1 = y;\n        break;\n\n      case 2:\n        this._point = 3;\n      // proceed\n\n      default:\n        _point(this, x, y);\n\n        break;\n    }\n\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\nexport default (function custom(tension) {\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function (tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-shape/src/curve/cardinal.js"],"names":["point","that","x","y","_context","bezierCurveTo","_x1","_k","_x2","_x0","_y1","_y2","_y0","Cardinal","context","tension","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","lineTo","closePath","moveTo","custom","cardinal"],"mappings":"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","sourcesContent":["export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nexport function Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n"]},"metadata":{},"sourceType":"module"}