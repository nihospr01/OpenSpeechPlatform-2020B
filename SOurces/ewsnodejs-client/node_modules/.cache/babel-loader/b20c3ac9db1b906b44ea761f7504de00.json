{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\nvar returnTrue = emptyFunction.thatReturnsTrue;\nvar FINGERPRINT_DELIMITER = '-';\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({\n          start: 0,\n          end: 0\n        }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n    var chars = block.getCharacterList();\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n/**\n * Generate LeafRange records for a given character list.\n */\n\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/draft-js/lib/BlockTree.js"],"names":["Immutable","require","emptyFunction","findRangesImmutable","List","Repeat","Record","returnTrue","thatReturnsTrue","FINGERPRINT_DELIMITER","defaultLeafRange","start","end","LeafRange","defaultDecoratorRange","decoratorKey","leaves","DecoratorRange","BlockTree","generate","contentState","block","decorator","textLength","getLength","of","leafSets","decorations","getDecorations","chars","getCharacterList","areEqual","push","get","generateLeaves","slice","toList","getFingerprint","tree","map","leafSet","fingerprintString","size","join","characters","offset","inlineStyles","c","getStyle","a","b","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"]},"metadata":{},"sourceType":"script"}