{"ast":null,"code":"import { cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical } from \"../cartesian.js\";\nimport { circleStream } from \"../circle.js\";\nimport { abs, cos, epsilon, pi, radians, sqrt } from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\nexport default function (radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  } // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n\n\n  function clipLine(stream) {\n    var point0, // previous point\n    c0, // code for previous point\n    v0, // visibility of previous point\n    v00, // visibility of first point\n    _clean; // no intersections\n\n\n    return {\n      lineStart: function lineStart() {\n        v00 = v0 = false;\n        _clean = 1;\n      },\n      point: function point(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;\n        }\n\n        if (v !== v0) {\n          _clean = 0;\n\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t; // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            _clean = 0;\n\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function lineEnd() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function clean() {\n        return _clean | (v00 && v0) << 1;\n      }\n    };\n  } // Intersects the great circle between a and b with the clip circle.\n\n\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 тип n2).\n\n    var n1 = [1, 0, 0],\n        // normal\n    n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0],\n        // cartesianDot(n1, n2),\n    determinant = n2n2 - n1n2 * n1n2; // Two polar points.\n\n    if (!determinant) return !two && a;\n    var c1 = cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.\n\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n    if (t2 < 0) return;\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n    if (!two) return q; // Two intersection points.\n\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.\n\n    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  } // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n\n\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-geo/src/clip/circle.js"],"names":["cartesian","cartesianAddInPlace","cartesianCross","cartesianDot","cartesianScale","spherical","circleStream","abs","cos","epsilon","pi","radians","sqrt","pointEqual","clip","radius","cr","delta","smallRadius","notHemisphere","interpolate","from","to","direction","stream","visible","lambda","phi","clipLine","point0","c0","v0","v00","clean","lineStart","point","point1","point2","v","c","code","intersect","lineEnd","t","a","b","two","pa","pb","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","B","u","w","uu","t2","q","lambda0","lambda1","phi0","phi1","z","polar","meridian","q1","r"],"mappings":"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","sourcesContent":["import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 тип n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n"]},"metadata":{},"sourceType":"module"}