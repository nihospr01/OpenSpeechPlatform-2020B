{"ast":null,"code":"'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftTreeAdapter\n * @format\n * \n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n    var children = _block.children;\n    !Array.isArray(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n\n  var type = block.type;\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _extends({}, child, {\n        depth: (block.depth || 0) + 1\n      }) : child;\n    });\n  }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\n\n\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to  draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n    var transformedBlocks = [];\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _extends({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block);\n      }\n\n      delete newBlock.children;\n      transformedBlocks.push(newBlock);\n    });\n    draftTreeState.blocks = transformedBlocks;\n    return _extends({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var lastListDepthCacheRef = {};\n    var transformedBlocks = [];\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n\n      var treeBlock = _extends({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        // reset the cache path\n        lastListDepthCacheRef = {};\n        transformedBlocks.push(treeBlock);\n        return;\n      } // update our depth cache reference path\n\n\n      lastListDepthCacheRef[depth] = treeBlock; // if we are greater than zero we must have seen a parent already\n\n      if (depth > 0) {\n        var parent = lastListDepthCacheRef[depth - 1];\n        !parent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid depth for RawDraftContentBlock') : invariant(false) : void 0; // push nested list blocks\n\n        parent.children.push(treeBlock);\n        return;\n      } // push root list blocks\n\n\n      transformedBlocks.push(treeBlock);\n    });\n    return _extends({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\nmodule.exports = DraftTreeAdapter;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/draft-js/lib/DraftTreeAdapter.js"],"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","invariant","traverseInDepthOrder","blocks","fn","stack","concat","reverse","_block","pop","children","Array","isArray","process","env","NODE_ENV","isListBlock","block","type","addDepthToChildren","map","child","depth","DraftTreeAdapter","fromRawTreeStateToRawState","draftTreeState","transformedBlocks","newBlock","push","fromRawStateToRawTreeState","draftState","lastListDepthCacheRef","forEach","isList","treeBlock","parent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftTreeAdapter\n * @format\n * \n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n\n    var children = _block.children;\n\n    !Array.isArray(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n  var type = block.type;\n\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _extends({}, child, { depth: (block.depth || 0) + 1 }) : child;\n    });\n  }\n};\n\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to  draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n\n    var transformedBlocks = [];\n\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _extends({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block);\n      }\n\n      delete newBlock.children;\n\n      transformedBlocks.push(newBlock);\n    });\n\n    draftTreeState.blocks = transformedBlocks;\n\n    return _extends({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var lastListDepthCacheRef = {};\n    var transformedBlocks = [];\n\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n      var treeBlock = _extends({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        // reset the cache path\n        lastListDepthCacheRef = {};\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      // update our depth cache reference path\n      lastListDepthCacheRef[depth] = treeBlock;\n\n      // if we are greater than zero we must have seen a parent already\n      if (depth > 0) {\n        var parent = lastListDepthCacheRef[depth - 1];\n\n        !parent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid depth for RawDraftContentBlock') : invariant(false) : void 0;\n\n        // push nested list blocks\n        parent.children.push(treeBlock);\n        return;\n      }\n\n      // push root list blocks\n      transformedBlocks.push(treeBlock);\n    });\n\n    return _extends({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\n\nmodule.exports = DraftTreeAdapter;"]},"metadata":{},"sourceType":"script"}