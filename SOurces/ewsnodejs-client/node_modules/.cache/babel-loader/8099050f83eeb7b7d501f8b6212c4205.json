{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceWord\n * @format\n * \n */\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\n\nvar EditorState = require('./EditorState');\n\nvar moveSelectionBackward = require('./moveSelectionBackward');\n\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */\n\n\nfunction keyCommandBackspaceWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset(); // If there are no words before the cursor, remove the preceding newline.\n\n    if (offset === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(0, offset);\n    var toRemove = DraftRemovableWord.getBackward(text);\n    return moveSelectionBackward(strategyState, toRemove.length || 1);\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceWord;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/keyCommandBackspaceWord.js"],"names":["DraftRemovableWord","require","EditorState","moveSelectionBackward","removeTextWithStrategy","keyCommandBackspaceWord","editorState","afterRemoval","strategyState","selection","getSelection","offset","getStartOffset","key","getStartKey","content","getCurrentContent","text","getBlockForKey","getText","slice","toRemove","getBackward","length","push","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,0BAAD,CAApC;AAEA;AACA;AACA;AACA;;;AACA,SAASI,uBAAT,CAAiCC,WAAjC,EAA8C;AAC5C,MAAIC,YAAY,GAAGH,sBAAsB,CAACE,WAAD,EAAc,UAAUE,aAAV,EAAyB;AAC9E,QAAIC,SAAS,GAAGD,aAAa,CAACE,YAAd,EAAhB;AACA,QAAIC,MAAM,GAAGF,SAAS,CAACG,cAAV,EAAb,CAF8E,CAG9E;;AACA,QAAID,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAOR,qBAAqB,CAACK,aAAD,EAAgB,CAAhB,CAA5B;AACD;;AACD,QAAIK,GAAG,GAAGJ,SAAS,CAACK,WAAV,EAAV;AACA,QAAIC,OAAO,GAAGP,aAAa,CAACQ,iBAAd,EAAd;AACA,QAAIC,IAAI,GAAGF,OAAO,CAACG,cAAR,CAAuBL,GAAvB,EAA4BM,OAA5B,GAAsCC,KAAtC,CAA4C,CAA5C,EAA+CT,MAA/C,CAAX;AACA,QAAIU,QAAQ,GAAGrB,kBAAkB,CAACsB,WAAnB,CAA+BL,IAA/B,CAAf;AACA,WAAOd,qBAAqB,CAACK,aAAD,EAAgBa,QAAQ,CAACE,MAAT,IAAmB,CAAnC,CAA5B;AACD,GAZwC,EAYtC,UAZsC,CAAzC;;AAcA,MAAIhB,YAAY,KAAKD,WAAW,CAACU,iBAAZ,EAArB,EAAsD;AACpD,WAAOV,WAAP;AACD;;AAED,SAAOJ,WAAW,CAACsB,IAAZ,CAAiBlB,WAAjB,EAA8BC,YAA9B,EAA4C,cAA5C,CAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBrB,uBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceWord\n * @format\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionBackward = require('./moveSelectionBackward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */\nfunction keyCommandBackspaceWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    // If there are no words before the cursor, remove the preceding newline.\n    if (offset === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(0, offset);\n    var toRemove = DraftRemovableWord.getBackward(text);\n    return moveSelectionBackward(strategyState, toRemove.length || 1);\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceWord;"]},"metadata":{},"sourceType":"script"}