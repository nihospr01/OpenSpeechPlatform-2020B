{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Constants to represent text directionality\n *\n * Also defines a *global* direciton, to be used in bidi algorithms as a\n * default fallback direciton, when no better direction is found or provided.\n *\n * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\n *       global direction value based on the application.\n *\n * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\n * Unicode Standard Annex #9 (UAX9)\n * http://www.unicode.org/reports/tr9/\n */\n'use strict';\n\nvar invariant = require('./invariant');\n\nvar NEUTRAL = 'NEUTRAL'; // No strong direction\n\nvar LTR = 'LTR'; // Left-to-Right direction\n\nvar RTL = 'RTL'; // Right-to-Left direction\n\nvar globalDir = null; // == Helpers ==\n\n/**\n * Check if a directionality value is a Strong one\n */\n\nfunction isStrong(dir) {\n  return dir === LTR || dir === RTL;\n}\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property.\n */\n\n\nfunction getHTMLDir(dir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === LTR ? 'ltr' : 'rtl';\n}\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property, but returns null if `dir` has same value as `otherDir`.\n * `null`.\n */\n\n\nfunction getHTMLDirIfDifferent(dir, otherDir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  !isStrong(otherDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === otherDir ? null : getHTMLDir(dir);\n} // == Global Direction ==\n\n/**\n * Set the global direction.\n */\n\n\nfunction setGlobalDir(dir) {\n  globalDir = dir;\n}\n/**\n * Initialize the global direction\n */\n\n\nfunction initGlobalDir() {\n  setGlobalDir(LTR);\n}\n/**\n * Get the global direction\n */\n\n\nfunction getGlobalDir() {\n  if (!globalDir) {\n    this.initGlobalDir();\n  }\n\n  !globalDir ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;\n  return globalDir;\n}\n\nvar UnicodeBidiDirection = {\n  // Values\n  NEUTRAL: NEUTRAL,\n  LTR: LTR,\n  RTL: RTL,\n  // Helpers\n  isStrong: isStrong,\n  getHTMLDir: getHTMLDir,\n  getHTMLDirIfDifferent: getHTMLDirIfDifferent,\n  // Global Direction\n  setGlobalDir: setGlobalDir,\n  initGlobalDir: initGlobalDir,\n  getGlobalDir: getGlobalDir\n};\nmodule.exports = UnicodeBidiDirection;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/fbjs/lib/UnicodeBidiDirection.js"],"names":["invariant","require","NEUTRAL","LTR","RTL","globalDir","isStrong","dir","getHTMLDir","process","env","NODE_ENV","getHTMLDirIfDifferent","otherDir","setGlobalDir","initGlobalDir","getGlobalDir","UnicodeBidiDirection","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,OAAO,GAAG,SAAd,C,CAAyB;;AACzB,IAAIC,GAAG,GAAG,KAAV,C,CAAiB;;AACjB,IAAIC,GAAG,GAAG,KAAV,C,CAAiB;;AAEjB,IAAIC,SAAS,GAAG,IAAhB,C,CAEA;;AAEA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOA,GAAG,KAAKJ,GAAR,IAAeI,GAAG,KAAKH,GAA9B;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASI,UAAT,CAAoBD,GAApB,EAAyB;AACvB,GAACD,QAAQ,CAACC,GAAD,CAAT,GAAiBE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,oEAAR,CAAjD,GAAiIA,SAAS,CAAC,KAAD,CAA3J,GAAqK,KAAK,CAA1K;AACA,SAAOO,GAAG,KAAKJ,GAAR,GAAc,KAAd,GAAsB,KAA7B;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASS,qBAAT,CAA+BL,GAA/B,EAAoCM,QAApC,EAA8C;AAC5C,GAACP,QAAQ,CAACC,GAAD,CAAT,GAAiBE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,oEAAR,CAAjD,GAAiIA,SAAS,CAAC,KAAD,CAA3J,GAAqK,KAAK,CAA1K;AACA,GAACM,QAAQ,CAACO,QAAD,CAAT,GAAsBJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,yEAAR,CAAjD,GAAsIA,SAAS,CAAC,KAAD,CAArK,GAA+K,KAAK,CAApL;AACA,SAAOO,GAAG,KAAKM,QAAR,GAAmB,IAAnB,GAA0BL,UAAU,CAACD,GAAD,CAA3C;AACD,C,CAED;;AAEA;AACA;AACA;;;AACA,SAASO,YAAT,CAAsBP,GAAtB,EAA2B;AACzBF,EAAAA,SAAS,GAAGE,GAAZ;AACD;AAED;AACA;AACA;;;AACA,SAASQ,aAAT,GAAyB;AACvBD,EAAAA,YAAY,CAACX,GAAD,CAAZ;AACD;AAED;AACA;AACA;;;AACA,SAASa,YAAT,GAAwB;AACtB,MAAI,CAACX,SAAL,EAAgB;AACd,SAAKU,aAAL;AACD;;AACD,GAACV,SAAD,GAAaI,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,2BAAR,CAAjD,GAAwFA,SAAS,CAAC,KAAD,CAA9G,GAAwH,KAAK,CAA7H;AACA,SAAOK,SAAP;AACD;;AAED,IAAIY,oBAAoB,GAAG;AACzB;AACAf,EAAAA,OAAO,EAAEA,OAFgB;AAGzBC,EAAAA,GAAG,EAAEA,GAHoB;AAIzBC,EAAAA,GAAG,EAAEA,GAJoB;AAKzB;AACAE,EAAAA,QAAQ,EAAEA,QANe;AAOzBE,EAAAA,UAAU,EAAEA,UAPa;AAQzBI,EAAAA,qBAAqB,EAAEA,qBARE;AASzB;AACAE,EAAAA,YAAY,EAAEA,YAVW;AAWzBC,EAAAA,aAAa,EAAEA,aAXU;AAYzBC,EAAAA,YAAY,EAAEA;AAZW,CAA3B;AAeAE,MAAM,CAACC,OAAP,GAAiBF,oBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Constants to represent text directionality\n *\n * Also defines a *global* direciton, to be used in bidi algorithms as a\n * default fallback direciton, when no better direction is found or provided.\n *\n * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\n *       global direction value based on the application.\n *\n * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\n * Unicode Standard Annex #9 (UAX9)\n * http://www.unicode.org/reports/tr9/\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\nvar NEUTRAL = 'NEUTRAL'; // No strong direction\nvar LTR = 'LTR'; // Left-to-Right direction\nvar RTL = 'RTL'; // Right-to-Left direction\n\nvar globalDir = null;\n\n// == Helpers ==\n\n/**\n * Check if a directionality value is a Strong one\n */\nfunction isStrong(dir) {\n  return dir === LTR || dir === RTL;\n}\n\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property.\n */\nfunction getHTMLDir(dir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === LTR ? 'ltr' : 'rtl';\n}\n\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property, but returns null if `dir` has same value as `otherDir`.\n * `null`.\n */\nfunction getHTMLDirIfDifferent(dir, otherDir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  !isStrong(otherDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === otherDir ? null : getHTMLDir(dir);\n}\n\n// == Global Direction ==\n\n/**\n * Set the global direction.\n */\nfunction setGlobalDir(dir) {\n  globalDir = dir;\n}\n\n/**\n * Initialize the global direction\n */\nfunction initGlobalDir() {\n  setGlobalDir(LTR);\n}\n\n/**\n * Get the global direction\n */\nfunction getGlobalDir() {\n  if (!globalDir) {\n    this.initGlobalDir();\n  }\n  !globalDir ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;\n  return globalDir;\n}\n\nvar UnicodeBidiDirection = {\n  // Values\n  NEUTRAL: NEUTRAL,\n  LTR: LTR,\n  RTL: RTL,\n  // Helpers\n  isStrong: isStrong,\n  getHTMLDir: getHTMLDir,\n  getHTMLDirIfDifferent: getHTMLDirIfDifferent,\n  // Global Direction\n  setGlobalDir: setGlobalDir,\n  initGlobalDir: initGlobalDir,\n  getGlobalDir: getGlobalDir\n};\n\nmodule.exports = UnicodeBidiDirection;"]},"metadata":{},"sourceType":"script"}