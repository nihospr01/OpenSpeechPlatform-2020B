{"ast":null,"code":"import { epsilon } from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit.js\"; // The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\n\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function point(x, y) {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].point(x, y);\n      }\n    },\n    sphere: function sphere() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].sphere();\n      }\n    },\n    lineStart: function lineStart() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].lineStart();\n      }\n    },\n    lineEnd: function lineEnd() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].lineEnd();\n      }\n    },\n    polygonStart: function polygonStart() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].polygonStart();\n      }\n    },\n    polygonEnd: function polygonEnd() {\n      var i = -1;\n\n      while (++i < n) {\n        streams[i].polygonEnd();\n      }\n    }\n  };\n} // A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n\n\nexport default function () {\n  var cache,\n      cacheStream,\n      lower48 = albers(),\n      lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),\n      alaskaPoint,\n      // EPSG:3338\n  hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),\n      hawaiiPoint,\n      // ESRI:102007\n  _point,\n      pointStream = {\n    point: function point(x, y) {\n      _point = [x, y];\n    }\n  };\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0],\n        y = coordinates[1];\n    return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);\n  }\n\n  albersUsa.invert = function (coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function (_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function (_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function (_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(),\n        x = +_[0],\n        y = +_[1];\n    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);\n    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);\n    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);\n    return reset();\n  };\n\n  albersUsa.fitExtent = function (extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function (size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function (width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function (height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-geo/src/projection/albersUsa.js"],"names":["epsilon","albers","conicEqualArea","fitExtent","fitSize","fitWidth","fitHeight","multiplex","streams","n","length","point","x","y","i","sphere","lineStart","lineEnd","polygonStart","polygonEnd","cache","cacheStream","lower48","lower48Point","alaska","rotate","center","parallels","alaskaPoint","hawaii","hawaiiPoint","pointStream","albersUsa","coordinates","invert","k","scale","t","translate","stream","precision","_","arguments","reset","clipExtent","extent","object","size","width","height"],"mappings":"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","sourcesContent":["import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n"]},"metadata":{},"sourceType":"module"}