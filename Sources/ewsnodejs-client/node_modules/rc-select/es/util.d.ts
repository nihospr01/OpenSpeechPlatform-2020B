/// <reference types="react" />
import Option from './Option';
import { filterOptionType, ISelectProps, valueType } from './PropTypes';
export declare function toTitle(title: string): string;
export declare function getValuePropValue(child: any): any;
export declare function getPropValue(child: Option, prop?: any): any;
export declare function isMultiple(props: Partial<ISelectProps>): boolean | undefined;
export declare function isCombobox(props: Partial<ISelectProps>): boolean | undefined;
export declare function isMultipleOrTags(props: Partial<ISelectProps>): boolean | undefined;
export declare function isMultipleOrTagsOrCombobox(props: Partial<ISelectProps>): boolean | undefined;
export declare function isSingleMode(props: any): boolean;
export declare function toArray(value: valueType | undefined): valueType | undefined;
export declare function getMapKey(value: valueType): string;
export declare function preventDefaultEvent(e: any): void;
export declare function findIndexInValueBySingleValue(value: valueType | undefined, singleValue: string): number;
export declare function getLabelFromPropsValue(value: valueType | undefined, key: valueType): any;
export declare function getSelectKeys(menuItems: JSX.Element[], value?: string): string[];
export declare const UNSELECTABLE_STYLE: any;
export declare const UNSELECTABLE_ATTRIBUTE: any;
export declare function findFirstMenuItem(children: JSX.Element[]): JSX.Element | null;
export declare function includesSeparators(str: string | string[], separators: string[]): boolean;
export declare function splitBySeparators(str: string | string[], separators: string[]): string[];
export declare function defaultFilterFn(input: string, child: any): filterOptionType | boolean;
export declare function validateOptionValue(value: string, props: any): void;
export declare function saveRef(instance: any, name: string): (node: any) => void;
export declare function generateUUID(): string;
