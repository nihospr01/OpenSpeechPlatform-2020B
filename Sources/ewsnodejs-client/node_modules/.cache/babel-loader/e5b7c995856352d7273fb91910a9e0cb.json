{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RichTextEditorUtil\n * @format\n * \n */\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\n\nvar EditorState = require('./EditorState');\n\nvar SelectionState = require('./SelectionState');\n\nvar adjustBlockDepthForContentState = require('./adjustBlockDepthForContentState');\n\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    var entityMap = contentState.getEntityMap();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && entityMap.__get(entity).getType() === 'LINK';\n    });\n  },\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return {\n      url: uri.toString()\n    };\n  },\n  handleKeyCommand: function handleKeyCommand(editorState, command) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    } // First, try to remove a preceding atomic block.\n\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()['delete'](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    } // If that doesn't succeed, try to remove the current block style.\n\n\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n  onTab: function onTab(event, editorState, maxDepth) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n\n    if (key !== selection.getFocusKey()) {\n      return editorState;\n    }\n\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault(); // Only allow indenting one level beyond the block above, and only if\n    // the block above is a list item as well.\n\n    var blockAbove = content.getBlockBefore(key);\n\n    if (!blockAbove) {\n      return editorState;\n    }\n\n    var typeAbove = blockAbove.getType();\n\n    if (typeAbove !== 'unordered-list-item' && typeAbove !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    var depth = block.getDepth();\n\n    if (!event.shiftKey && depth === maxDepth) {\n      return editorState;\n    }\n\n    maxDepth = Math.min(blockAbove.getDepth() + 1, maxDepth);\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    } // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n\n\n    var content = editorState.getCurrentContent();\n    var newContent; // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of the first styled block, or\n   * an empty styled block, changes block to 'unstyled'. Returns null if\n   * block or selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n      var firstBlock = content.getFirstBlock();\n\n      if (block.getLength() > 0 && block !== firstBlock) {\n        return null;\n      }\n\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n\n    return null;\n  }\n};\nmodule.exports = RichTextEditorUtil;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/draft-js/lib/RichTextEditorUtil.js"],"names":["DraftModifier","require","EditorState","SelectionState","adjustBlockDepthForContentState","nullthrows","RichTextEditorUtil","currentBlockContainsLink","editorState","selection","getSelection","contentState","getCurrentContent","entityMap","getEntityMap","getBlockForKey","getAnchorKey","getCharacterList","slice","getStartOffset","getEndOffset","some","v","entity","getEntity","__get","getType","getCurrentBlockType","getStartKey","getDataObjectForLinkURL","uri","url","toString","handleKeyCommand","command","toggleInlineStyle","toggleCode","onBackspace","onDelete","insertSoftNewline","insertText","getCurrentInlineStyle","newEditorState","push","forceSelection","getSelectionAfter","isCollapsed","getAnchorOffset","getFocusOffset","content","startKey","blockBefore","getBlockBefore","blockMap","getBlockMap","getKey","withoutAtomicBlock","merge","selectionAfter","withoutBlockStyle","tryToRemoveBlockStyle","block","length","getLength","blockAfter","getBlockAfter","atomicBlockTarget","focusKey","focusOffset","removeRange","onTab","event","maxDepth","key","getFocusKey","type","preventDefault","blockAbove","typeAbove","depth","getDepth","shiftKey","Math","min","withAdjustment","toggleBlockType","blockType","endKey","getEndKey","target","anchorKey","anchorOffset","isBackward","hasAtomicBlock","skipWhile","_","k","reverse","typeToSet","setBlockType","inlineStyle","currentStyle","setInlineStyleOverride","has","remove","add","newContent","removeInlineStyle","applyInlineStyle","toggleLink","targetSelection","entityKey","withoutLink","applyEntity","offset","firstBlock","getFirstBlock","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RichTextEditorUtil\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar SelectionState = require('./SelectionState');\n\nvar adjustBlockDepthForContentState = require('./adjustBlockDepthForContentState');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    var entityMap = contentState.getEntityMap();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && entityMap.__get(entity).getType() === 'LINK';\n    });\n  },\n\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return { url: uri.toString() };\n  },\n\n  handleKeyCommand: function handleKeyCommand(editorState, command) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    }\n\n    // First, try to remove a preceding atomic block.\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()['delete'](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    }\n\n    // If that doesn't succeed, try to remove the current block style.\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength();\n\n    // The cursor is somewhere within the text. Behave normally.\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n\n  onTab: function onTab(event, editorState, maxDepth) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n    if (key !== selection.getFocusKey()) {\n      return editorState;\n    }\n\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault();\n\n    // Only allow indenting one level beyond the block above, and only if\n    // the block above is a list item as well.\n    var blockAbove = content.getBlockBefore(key);\n    if (!blockAbove) {\n      return editorState;\n    }\n\n    var typeAbove = blockAbove.getType();\n    if (typeAbove !== 'unordered-list-item' && typeAbove !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    var depth = block.getDepth();\n    if (!event.shiftKey && depth === maxDepth) {\n      return editorState;\n    }\n\n    maxDepth = Math.min(blockAbove.getDepth() + 1, maxDepth);\n\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection;\n\n    // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle();\n\n    // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    }\n\n    // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n    var content = editorState.getCurrentContent();\n    var newContent;\n\n    // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of the first styled block, or\n   * an empty styled block, changes block to 'unstyled'. Returns null if\n   * block or selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n\n      var firstBlock = content.getFirstBlock();\n      if (block.getLength() > 0 && block !== firstBlock) {\n        return null;\n      }\n\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n    return null;\n  }\n};\n\nmodule.exports = RichTextEditorUtil;"]},"metadata":{},"sourceType":"script"}