{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorTextNode.react\n * @format\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar ReactDOM = require('react-dom');\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar invariant = require('fbjs/lib/invariant'); // In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\n\n\nvar useNewlineChar = UserAgent.isBrowser('IE <= 11');\n/**\n * Check whether the node should be considered a newline.\n */\n\nfunction isNewline(node) {\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\n}\n/**\n * Placeholder elements for empty text content.\n *\n * What is this `data-text` attribute, anyway? It turns out that we need to\n * put an attribute on the lowest-level text node in order to preserve correct\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n * If the <span> has an attribute, this appears not to happen.\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\n */\n\n\nvar NEWLINE_A = useNewlineChar ? React.createElement('span', {\n  key: 'A',\n  'data-text': 'true'\n}, '\\n') : React.createElement('br', {\n  key: 'A',\n  'data-text': 'true'\n});\nvar NEWLINE_B = useNewlineChar ? React.createElement('span', {\n  key: 'B',\n  'data-text': 'true'\n}, '\\n') : React.createElement('br', {\n  key: 'B',\n  'data-text': 'true'\n});\n/**\n * The lowest-level component in a `DraftEditor`, the text node component\n * replaces the default React text node implementation. This allows us to\n * perform custom handling of newline behavior and avoid re-rendering text\n * nodes with DOM state that already matches the expectations of our immutable\n * editor state.\n */\n\nvar DraftEditorTextNode = function (_React$Component) {\n  _inherits(DraftEditorTextNode, _React$Component);\n\n  function DraftEditorTextNode(props) {\n    _classCallCheck(this, DraftEditorTextNode); // By flipping this flag, we also keep flipping keys which forces\n    // React to remount this node every time it rerenders.\n\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this._forceFlag = false;\n    return _this;\n  }\n\n  DraftEditorTextNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var node = ReactDOM.findDOMNode(this);\n    var shouldBeNewline = nextProps.children === '';\n    !(node instanceof Element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'node is not an Element') : invariant(false) : void 0;\n\n    if (shouldBeNewline) {\n      return !isNewline(node);\n    }\n\n    return node.textContent !== nextProps.children;\n  };\n\n  DraftEditorTextNode.prototype.componentDidMount = function componentDidMount() {\n    this._forceFlag = !this._forceFlag;\n  };\n\n  DraftEditorTextNode.prototype.componentDidUpdate = function componentDidUpdate() {\n    this._forceFlag = !this._forceFlag;\n  };\n\n  DraftEditorTextNode.prototype.render = function render() {\n    if (this.props.children === '') {\n      return this._forceFlag ? NEWLINE_A : NEWLINE_B;\n    }\n\n    return React.createElement('span', {\n      key: this._forceFlag ? 'A' : 'B',\n      'data-text': 'true'\n    }, this.props.children);\n  };\n\n  return DraftEditorTextNode;\n}(React.Component);\n\nmodule.exports = DraftEditorTextNode;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/DraftEditorTextNode.react.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","require","ReactDOM","UserAgent","invariant","useNewlineChar","isBrowser","isNewline","node","textContent","tagName","NEWLINE_A","createElement","key","NEWLINE_B","DraftEditorTextNode","_React$Component","props","_this","_forceFlag","shouldComponentUpdate","nextProps","findDOMNode","shouldBeNewline","children","Element","process","env","NODE_ENV","componentDidMount","componentDidUpdate","render","Component","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorTextNode.react\n * @format\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar invariant = require('fbjs/lib/invariant');\n\n// In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\nvar useNewlineChar = UserAgent.isBrowser('IE <= 11');\n\n/**\n * Check whether the node should be considered a newline.\n */\nfunction isNewline(node) {\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\n}\n\n/**\n * Placeholder elements for empty text content.\n *\n * What is this `data-text` attribute, anyway? It turns out that we need to\n * put an attribute on the lowest-level text node in order to preserve correct\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n * If the <span> has an attribute, this appears not to happen.\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\n */\nvar NEWLINE_A = useNewlineChar ? React.createElement(\n  'span',\n  { key: 'A', 'data-text': 'true' },\n  '\\n'\n) : React.createElement('br', { key: 'A', 'data-text': 'true' });\n\nvar NEWLINE_B = useNewlineChar ? React.createElement(\n  'span',\n  { key: 'B', 'data-text': 'true' },\n  '\\n'\n) : React.createElement('br', { key: 'B', 'data-text': 'true' });\n\n/**\n * The lowest-level component in a `DraftEditor`, the text node component\n * replaces the default React text node implementation. This allows us to\n * perform custom handling of newline behavior and avoid re-rendering text\n * nodes with DOM state that already matches the expectations of our immutable\n * editor state.\n */\nvar DraftEditorTextNode = function (_React$Component) {\n  _inherits(DraftEditorTextNode, _React$Component);\n\n  function DraftEditorTextNode(props) {\n    _classCallCheck(this, DraftEditorTextNode);\n\n    // By flipping this flag, we also keep flipping keys which forces\n    // React to remount this node every time it rerenders.\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this._forceFlag = false;\n    return _this;\n  }\n\n  DraftEditorTextNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var node = ReactDOM.findDOMNode(this);\n    var shouldBeNewline = nextProps.children === '';\n    !(node instanceof Element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'node is not an Element') : invariant(false) : void 0;\n    if (shouldBeNewline) {\n      return !isNewline(node);\n    }\n    return node.textContent !== nextProps.children;\n  };\n\n  DraftEditorTextNode.prototype.componentDidMount = function componentDidMount() {\n    this._forceFlag = !this._forceFlag;\n  };\n\n  DraftEditorTextNode.prototype.componentDidUpdate = function componentDidUpdate() {\n    this._forceFlag = !this._forceFlag;\n  };\n\n  DraftEditorTextNode.prototype.render = function render() {\n    if (this.props.children === '') {\n      return this._forceFlag ? NEWLINE_A : NEWLINE_B;\n    }\n    return React.createElement(\n      'span',\n      { key: this._forceFlag ? 'A' : 'B', 'data-text': 'true' },\n      this.props.children\n    );\n  };\n\n  return DraftEditorTextNode;\n}(React.Component);\n\nmodule.exports = DraftEditorTextNode;"]},"metadata":{},"sourceType":"script"}