{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component, createRef } from 'react';\nimport { getPosX } from './utils';\n\nvar VolumeControls = function (_Component) {\n  _inheritsLoose(VolumeControls, _Component);\n\n  function VolumeControls() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"audio\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"hasAddedAudioEventListener\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"volumeBar\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"volumeAnimationTimer\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastVolume\", _this.props.volume);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentVolumePos: (_this.lastVolume / 1 * 100 || 0).toFixed(2) + \"%\",\n      hasVolumeAnimation: false,\n      isDraggingVolume: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentVolume\", function (event) {\n      var audio = _this.props.audio;\n\n      if (!_this.volumeBar.current) {\n        return {\n          currentVolume: audio.volume,\n          currentVolumePos: _this.state.currentVolumePos\n        };\n      }\n\n      var volumeBarRect = _this.volumeBar.current.getBoundingClientRect();\n\n      var maxRelativePos = volumeBarRect.width;\n      var relativePos = getPosX(event) - volumeBarRect.left;\n      var currentVolume;\n      var currentVolumePos;\n\n      if (relativePos < 0) {\n        currentVolume = 0;\n        currentVolumePos = '0%';\n      } else if (relativePos > volumeBarRect.width) {\n        currentVolume = 1;\n        currentVolumePos = '100%';\n      } else {\n        currentVolume = relativePos / maxRelativePos;\n        currentVolumePos = relativePos / maxRelativePos * 100 + \"%\";\n      }\n\n      return {\n        currentVolume: currentVolume,\n        currentVolumePos: currentVolumePos\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContextMenu\", function (event) {\n      event.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickVolumeButton\", function () {\n      var audio = _this.props.audio;\n\n      if (audio.volume > 0) {\n        _this.lastVolume = audio.volume;\n        audio.volume = 0;\n      } else {\n        audio.volume = _this.lastVolume;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVolumnControlMouseOrTouchDown\", function (event) {\n      event.stopPropagation();\n      var audio = _this.props.audio;\n\n      var _this$getCurrentVolum = _this.getCurrentVolume(event.nativeEvent),\n          currentVolume = _this$getCurrentVolum.currentVolume,\n          currentVolumePos = _this$getCurrentVolum.currentVolumePos;\n\n      audio.volume = currentVolume;\n\n      _this.setState({\n        isDraggingVolume: true,\n        currentVolumePos: currentVolumePos\n      });\n\n      if (event.nativeEvent instanceof MouseEvent) {\n        window.addEventListener('mousemove', _this.handleWindowMouseOrTouchMove);\n        window.addEventListener('mouseup', _this.handleWindowMouseOrTouchUp);\n      } else {\n        window.addEventListener('touchmove', _this.handleWindowMouseOrTouchMove);\n        window.addEventListener('touchend', _this.handleWindowMouseOrTouchUp);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowMouseOrTouchMove\", function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var audio = _this.props.audio;\n      var windowSelection = window.getSelection();\n\n      if (windowSelection && windowSelection.type === 'Range') {\n        windowSelection.empty();\n      }\n\n      var isDraggingVolume = _this.state.isDraggingVolume;\n\n      if (isDraggingVolume) {\n        var _this$getCurrentVolum2 = _this.getCurrentVolume(event),\n            currentVolume = _this$getCurrentVolum2.currentVolume,\n            currentVolumePos = _this$getCurrentVolum2.currentVolumePos;\n\n        audio.volume = currentVolume;\n\n        _this.setState({\n          currentVolumePos: currentVolumePos\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowMouseOrTouchUp\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isDraggingVolume: false\n      });\n\n      if (event instanceof MouseEvent) {\n        window.removeEventListener('mousemove', _this.handleWindowMouseOrTouchMove);\n        window.removeEventListener('mouseup', _this.handleWindowMouseOrTouchUp);\n      } else {\n        window.removeEventListener('touchmove', _this.handleWindowMouseOrTouchMove);\n        window.removeEventListener('touchend', _this.handleWindowMouseOrTouchUp);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAudioVolumeChange\", function (e) {\n      var isDraggingVolume = _this.state.isDraggingVolume;\n      var _ref = e.target,\n          volume = _ref.volume;\n\n      if (_this.lastVolume > 0 && volume === 0 || _this.lastVolume === 0 && volume > 0) {\n        _this.props.onMuteChange();\n      }\n\n      _this.lastVolume = volume;\n      if (isDraggingVolume) return;\n\n      _this.setState({\n        hasVolumeAnimation: true,\n        currentVolumePos: (volume / 1 * 100 || 0).toFixed(2) + \"%\"\n      });\n\n      clearTimeout(_this.volumeAnimationTimer);\n      _this.volumeAnimationTimer = setTimeout(function () {\n        _this.setState({\n          hasVolumeAnimation: false\n        });\n      }, 100);\n    });\n\n    return _this;\n  }\n\n  var _proto = VolumeControls.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var audio = this.props.audio;\n\n    if (audio && !this.hasAddedAudioEventListener) {\n      this.audio = audio;\n      this.hasAddedAudioEventListener = true;\n      audio.addEventListener('volumechange', this.handleAudioVolumeChange);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.audio && this.hasAddedAudioEventListener) {\n      this.audio.removeEventListener('volumechange', this.handleAudioVolumeChange);\n    }\n\n    clearTimeout(this.volumeAnimationTimer);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        audio = _this$props.audio,\n        showFilledVolume = _this$props.showFilledVolume;\n    var _this$state = this.state,\n        currentVolumePos = _this$state.currentVolumePos,\n        hasVolumeAnimation = _this$state.hasVolumeAnimation;\n\n    var _ref2 = audio || {},\n        volume = _ref2.volume;\n\n    return React.createElement(\"div\", {\n      ref: this.volumeBar,\n      onMouseDown: this.handleVolumnControlMouseOrTouchDown,\n      onTouchStart: this.handleVolumnControlMouseOrTouchDown,\n      onContextMenu: this.handleContextMenu,\n      role: \"progressbar\",\n      \"aria-label\": \"volume Control\",\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-valuenow\": Number((volume * 100).toFixed(0)),\n      tabIndex: 0,\n      className: \"rhap_volume-bar-area\"\n    }, React.createElement(\"div\", {\n      className: \"rhap_volume-bar\"\n    }, React.createElement(\"div\", {\n      className: \"rhap_volume-indicator\",\n      style: {\n        left: currentVolumePos,\n        transitionDuration: hasVolumeAnimation ? '.1s' : '0s'\n      }\n    }), showFilledVolume && React.createElement(\"div\", {\n      className: \"rhap_volume-filled\",\n      style: {\n        width: currentVolumePos\n      }\n    })));\n  };\n\n  return VolumeControls;\n}(Component);\n\nexport default VolumeControls;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/react-h5-audio-player/es/VolumeBar.js"],"names":["_assertThisInitialized","_inheritsLoose","_defineProperty","React","Component","createRef","getPosX","VolumeControls","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","props","volume","currentVolumePos","lastVolume","toFixed","hasVolumeAnimation","isDraggingVolume","event","audio","volumeBar","current","currentVolume","state","volumeBarRect","getBoundingClientRect","maxRelativePos","width","relativePos","left","preventDefault","stopPropagation","_this$getCurrentVolum","getCurrentVolume","nativeEvent","setState","MouseEvent","window","addEventListener","handleWindowMouseOrTouchMove","handleWindowMouseOrTouchUp","windowSelection","getSelection","type","empty","_this$getCurrentVolum2","removeEventListener","e","_ref","target","onMuteChange","clearTimeout","volumeAnimationTimer","setTimeout","_proto","prototype","componentDidUpdate","hasAddedAudioEventListener","handleAudioVolumeChange","componentWillUnmount","render","_this$props","showFilledVolume","_this$state","_ref2","createElement","ref","onMouseDown","handleVolumnControlMouseOrTouchDown","onTouchStart","onContextMenu","handleContextMenu","role","Number","tabIndex","className","style","transitionDuration"],"mappings":"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","sourcesContent":["import _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component, createRef } from 'react';\nimport { getPosX } from './utils';\n\nvar VolumeControls = function (_Component) {\n  _inheritsLoose(VolumeControls, _Component);\n\n  function VolumeControls() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"audio\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"hasAddedAudioEventListener\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"volumeBar\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"volumeAnimationTimer\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastVolume\", _this.props.volume);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentVolumePos: (_this.lastVolume / 1 * 100 || 0).toFixed(2) + \"%\",\n      hasVolumeAnimation: false,\n      isDraggingVolume: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentVolume\", function (event) {\n      var audio = _this.props.audio;\n\n      if (!_this.volumeBar.current) {\n        return {\n          currentVolume: audio.volume,\n          currentVolumePos: _this.state.currentVolumePos\n        };\n      }\n\n      var volumeBarRect = _this.volumeBar.current.getBoundingClientRect();\n\n      var maxRelativePos = volumeBarRect.width;\n      var relativePos = getPosX(event) - volumeBarRect.left;\n      var currentVolume;\n      var currentVolumePos;\n\n      if (relativePos < 0) {\n        currentVolume = 0;\n        currentVolumePos = '0%';\n      } else if (relativePos > volumeBarRect.width) {\n        currentVolume = 1;\n        currentVolumePos = '100%';\n      } else {\n        currentVolume = relativePos / maxRelativePos;\n        currentVolumePos = relativePos / maxRelativePos * 100 + \"%\";\n      }\n\n      return {\n        currentVolume: currentVolume,\n        currentVolumePos: currentVolumePos\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContextMenu\", function (event) {\n      event.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickVolumeButton\", function () {\n      var audio = _this.props.audio;\n\n      if (audio.volume > 0) {\n        _this.lastVolume = audio.volume;\n        audio.volume = 0;\n      } else {\n        audio.volume = _this.lastVolume;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVolumnControlMouseOrTouchDown\", function (event) {\n      event.stopPropagation();\n      var audio = _this.props.audio;\n\n      var _this$getCurrentVolum = _this.getCurrentVolume(event.nativeEvent),\n          currentVolume = _this$getCurrentVolum.currentVolume,\n          currentVolumePos = _this$getCurrentVolum.currentVolumePos;\n\n      audio.volume = currentVolume;\n\n      _this.setState({\n        isDraggingVolume: true,\n        currentVolumePos: currentVolumePos\n      });\n\n      if (event.nativeEvent instanceof MouseEvent) {\n        window.addEventListener('mousemove', _this.handleWindowMouseOrTouchMove);\n        window.addEventListener('mouseup', _this.handleWindowMouseOrTouchUp);\n      } else {\n        window.addEventListener('touchmove', _this.handleWindowMouseOrTouchMove);\n        window.addEventListener('touchend', _this.handleWindowMouseOrTouchUp);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowMouseOrTouchMove\", function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var audio = _this.props.audio;\n      var windowSelection = window.getSelection();\n\n      if (windowSelection && windowSelection.type === 'Range') {\n        windowSelection.empty();\n      }\n\n      var isDraggingVolume = _this.state.isDraggingVolume;\n\n      if (isDraggingVolume) {\n        var _this$getCurrentVolum2 = _this.getCurrentVolume(event),\n            currentVolume = _this$getCurrentVolum2.currentVolume,\n            currentVolumePos = _this$getCurrentVolum2.currentVolumePos;\n\n        audio.volume = currentVolume;\n\n        _this.setState({\n          currentVolumePos: currentVolumePos\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowMouseOrTouchUp\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isDraggingVolume: false\n      });\n\n      if (event instanceof MouseEvent) {\n        window.removeEventListener('mousemove', _this.handleWindowMouseOrTouchMove);\n        window.removeEventListener('mouseup', _this.handleWindowMouseOrTouchUp);\n      } else {\n        window.removeEventListener('touchmove', _this.handleWindowMouseOrTouchMove);\n        window.removeEventListener('touchend', _this.handleWindowMouseOrTouchUp);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAudioVolumeChange\", function (e) {\n      var isDraggingVolume = _this.state.isDraggingVolume;\n      var _ref = e.target,\n          volume = _ref.volume;\n\n      if (_this.lastVolume > 0 && volume === 0 || _this.lastVolume === 0 && volume > 0) {\n        _this.props.onMuteChange();\n      }\n\n      _this.lastVolume = volume;\n      if (isDraggingVolume) return;\n\n      _this.setState({\n        hasVolumeAnimation: true,\n        currentVolumePos: (volume / 1 * 100 || 0).toFixed(2) + \"%\"\n      });\n\n      clearTimeout(_this.volumeAnimationTimer);\n      _this.volumeAnimationTimer = setTimeout(function () {\n        _this.setState({\n          hasVolumeAnimation: false\n        });\n      }, 100);\n    });\n\n    return _this;\n  }\n\n  var _proto = VolumeControls.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var audio = this.props.audio;\n\n    if (audio && !this.hasAddedAudioEventListener) {\n      this.audio = audio;\n      this.hasAddedAudioEventListener = true;\n      audio.addEventListener('volumechange', this.handleAudioVolumeChange);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.audio && this.hasAddedAudioEventListener) {\n      this.audio.removeEventListener('volumechange', this.handleAudioVolumeChange);\n    }\n\n    clearTimeout(this.volumeAnimationTimer);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        audio = _this$props.audio,\n        showFilledVolume = _this$props.showFilledVolume;\n    var _this$state = this.state,\n        currentVolumePos = _this$state.currentVolumePos,\n        hasVolumeAnimation = _this$state.hasVolumeAnimation;\n\n    var _ref2 = audio || {},\n        volume = _ref2.volume;\n\n    return React.createElement(\"div\", {\n      ref: this.volumeBar,\n      onMouseDown: this.handleVolumnControlMouseOrTouchDown,\n      onTouchStart: this.handleVolumnControlMouseOrTouchDown,\n      onContextMenu: this.handleContextMenu,\n      role: \"progressbar\",\n      \"aria-label\": \"volume Control\",\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-valuenow\": Number((volume * 100).toFixed(0)),\n      tabIndex: 0,\n      className: \"rhap_volume-bar-area\"\n    }, React.createElement(\"div\", {\n      className: \"rhap_volume-bar\"\n    }, React.createElement(\"div\", {\n      className: \"rhap_volume-indicator\",\n      style: {\n        left: currentVolumePos,\n        transitionDuration: hasVolumeAnimation ? '.1s' : '0s'\n      }\n    }), showFilledVolume && React.createElement(\"div\", {\n      className: \"rhap_volume-filled\",\n      style: {\n        width: currentVolumePos\n      }\n    })));\n  };\n\n  return VolumeControls;\n}(Component);\n\nexport default VolumeControls;"]},"metadata":{},"sourceType":"module"}