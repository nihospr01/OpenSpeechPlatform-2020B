{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newMessages = newMessages;\n\nfunction newMessages() {\n  return {\n    'default': 'Validation error on field %s',\n    required: '%s is required',\n    'enum': '%s must be one of %s',\n    whitespace: '%s cannot be empty',\n    date: {\n      format: '%s date %s is invalid for format %s',\n      parse: '%s date could not be parsed, %s is invalid ',\n      invalid: '%s date %s is invalid'\n    },\n    types: {\n      string: '%s is not a %s',\n      method: '%s is not a %s (function)',\n      array: '%s is not an %s',\n      object: '%s is not an %s',\n      number: '%s is not a %s',\n      date: '%s is not a %s',\n      boolean: '%s is not a %s',\n      integer: '%s is not an %s',\n      float: '%s is not a %s',\n      regexp: '%s is not a valid %s',\n      email: '%s is not a valid %s',\n      url: '%s is not a valid %s',\n      hex: '%s is not a valid %s'\n    },\n    string: {\n      len: '%s must be exactly %s characters',\n      min: '%s must be at least %s characters',\n      max: '%s cannot be longer than %s characters',\n      range: '%s must be between %s and %s characters'\n    },\n    number: {\n      len: '%s must equal %s',\n      min: '%s cannot be less than %s',\n      max: '%s cannot be greater than %s',\n      range: '%s must be between %s and %s'\n    },\n    array: {\n      len: '%s must be exactly %s in length',\n      min: '%s cannot be less than %s in length',\n      max: '%s cannot be greater than %s in length',\n      range: '%s must be between %s and %s in length'\n    },\n    pattern: {\n      mismatch: '%s value %s does not match pattern %s'\n    },\n    clone: function clone() {\n      var cloned = JSON.parse(JSON.stringify(this));\n      cloned.clone = this.clone;\n      return cloned;\n    }\n  };\n}\n\nvar messages = exports.messages = newMessages();","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/async-validator/es/messages.js"],"names":["Object","defineProperty","exports","value","newMessages","required","whitespace","date","format","parse","invalid","types","string","method","array","object","number","boolean","integer","float","regexp","email","url","hex","len","min","max","range","pattern","mismatch","clone","cloned","JSON","stringify","messages"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;;AACA,SAASA,WAAT,GAAuB;AACrB,SAAO;AACL,eAAW,8BADN;AAELC,IAAAA,QAAQ,EAAE,gBAFL;AAGL,YAAQ,sBAHH;AAILC,IAAAA,UAAU,EAAE,oBAJP;AAKLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,qCADJ;AAEJC,MAAAA,KAAK,EAAE,6CAFH;AAGJC,MAAAA,OAAO,EAAE;AAHL,KALD;AAULC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,gBADH;AAELC,MAAAA,MAAM,EAAE,2BAFH;AAGLC,MAAAA,KAAK,EAAE,iBAHF;AAILC,MAAAA,MAAM,EAAE,iBAJH;AAKLC,MAAAA,MAAM,EAAE,gBALH;AAMLT,MAAAA,IAAI,EAAE,gBAND;AAOLU,MAAAA,OAAO,EAAE,gBAPJ;AAQLC,MAAAA,OAAO,EAAE,iBARJ;AASLC,MAAAA,KAAK,EAAE,gBATF;AAULC,MAAAA,MAAM,EAAE,sBAVH;AAWLC,MAAAA,KAAK,EAAE,sBAXF;AAYLC,MAAAA,GAAG,EAAE,sBAZA;AAaLC,MAAAA,GAAG,EAAE;AAbA,KAVF;AAyBLX,IAAAA,MAAM,EAAE;AACNY,MAAAA,GAAG,EAAE,kCADC;AAENC,MAAAA,GAAG,EAAE,mCAFC;AAGNC,MAAAA,GAAG,EAAE,wCAHC;AAINC,MAAAA,KAAK,EAAE;AAJD,KAzBH;AA+BLX,IAAAA,MAAM,EAAE;AACNQ,MAAAA,GAAG,EAAE,kBADC;AAENC,MAAAA,GAAG,EAAE,2BAFC;AAGNC,MAAAA,GAAG,EAAE,8BAHC;AAINC,MAAAA,KAAK,EAAE;AAJD,KA/BH;AAqCLb,IAAAA,KAAK,EAAE;AACLU,MAAAA,GAAG,EAAE,iCADA;AAELC,MAAAA,GAAG,EAAE,qCAFA;AAGLC,MAAAA,GAAG,EAAE,wCAHA;AAILC,MAAAA,KAAK,EAAE;AAJF,KArCF;AA2CLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AADH,KA3CJ;AA8CLC,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,UAAIC,MAAM,GAAGC,IAAI,CAACvB,KAAL,CAAWuB,IAAI,CAACC,SAAL,CAAe,IAAf,CAAX,CAAb;AACAF,MAAAA,MAAM,CAACD,KAAP,GAAe,KAAKA,KAApB;AACA,aAAOC,MAAP;AACD;AAlDI,GAAP;AAoDD;;AAED,IAAIG,QAAQ,GAAGhC,OAAO,CAACgC,QAAR,GAAmB9B,WAAW,EAA7C","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newMessages = newMessages;\nfunction newMessages() {\n  return {\n    'default': 'Validation error on field %s',\n    required: '%s is required',\n    'enum': '%s must be one of %s',\n    whitespace: '%s cannot be empty',\n    date: {\n      format: '%s date %s is invalid for format %s',\n      parse: '%s date could not be parsed, %s is invalid ',\n      invalid: '%s date %s is invalid'\n    },\n    types: {\n      string: '%s is not a %s',\n      method: '%s is not a %s (function)',\n      array: '%s is not an %s',\n      object: '%s is not an %s',\n      number: '%s is not a %s',\n      date: '%s is not a %s',\n      boolean: '%s is not a %s',\n      integer: '%s is not an %s',\n      float: '%s is not a %s',\n      regexp: '%s is not a valid %s',\n      email: '%s is not a valid %s',\n      url: '%s is not a valid %s',\n      hex: '%s is not a valid %s'\n    },\n    string: {\n      len: '%s must be exactly %s characters',\n      min: '%s must be at least %s characters',\n      max: '%s cannot be longer than %s characters',\n      range: '%s must be between %s and %s characters'\n    },\n    number: {\n      len: '%s must equal %s',\n      min: '%s cannot be less than %s',\n      max: '%s cannot be greater than %s',\n      range: '%s must be between %s and %s'\n    },\n    array: {\n      len: '%s must be exactly %s in length',\n      min: '%s cannot be less than %s in length',\n      max: '%s cannot be greater than %s in length',\n      range: '%s must be between %s and %s in length'\n    },\n    pattern: {\n      mismatch: '%s value %s does not match pattern %s'\n    },\n    clone: function clone() {\n      var cloned = JSON.parse(JSON.stringify(this));\n      cloned.clone = this.clone;\n      return cloned;\n    }\n  };\n}\n\nvar messages = exports.messages = newMessages();"]},"metadata":{},"sourceType":"script"}