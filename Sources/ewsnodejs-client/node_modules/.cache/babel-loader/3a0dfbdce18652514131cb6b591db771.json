{"ast":null,"code":"import clip from \"./index.js\";\nimport { abs, atan, cos, epsilon, halfPi, pi, sin } from \"../math.js\";\nexport default clip(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\n\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      _clean; // no intersections\n\n\n  return {\n    lineStart: function lineStart() {\n      stream.lineStart();\n      _clean = 1;\n    },\n    point: function point(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n\n      if (abs(delta - pi) < epsilon) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        _clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) {\n        // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        _clean = 0;\n      }\n\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function lineEnd() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function clean() {\n      return 2 - _clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-geo/src/clip/antimeridian.js"],"names":["clip","abs","atan","cos","epsilon","halfPi","pi","sin","clipAntimeridianLine","clipAntimeridianInterpolate","stream","lambda0","NaN","phi0","sign0","clean","lineStart","point","lambda1","phi1","sign1","delta","lineEnd","clipAntimeridianIntersect","cosPhi0","cosPhi1","sinLambda0Lambda1","from","to","direction","phi","lambda"],"mappings":"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","sourcesContent":["import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}