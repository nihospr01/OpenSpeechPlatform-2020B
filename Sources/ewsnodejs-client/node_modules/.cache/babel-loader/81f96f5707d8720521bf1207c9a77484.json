{"ast":null,"code":"var MediaQuery = require('./MediaQuery');\n\nvar Util = require('./Util');\n\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\n\nfunction MediaQueryDispatch() {\n  if (!window.matchMedia) {\n    throw new Error('matchMedia not present, legacy browsers require a polyfill');\n  }\n\n  this.queries = {};\n  this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n  constructor: MediaQueryDispatch,\n\n  /**\n   * Registers a handler for the given media query\n   *\n   * @param {string} q the media query\n   * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n   * @param {function} options.match fired when query matched\n   * @param {function} [options.unmatch] fired when a query is no longer matched\n   * @param {function} [options.setup] fired when handler first triggered\n   * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n   * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n   */\n  register: function register(q, options, shouldDegrade) {\n    var queries = this.queries,\n        isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n    if (!queries[q]) {\n      queries[q] = new MediaQuery(q, isUnconditional);\n    } //normalise to object in an array\n\n\n    if (isFunction(options)) {\n      options = {\n        match: options\n      };\n    }\n\n    if (!isArray(options)) {\n      options = [options];\n    }\n\n    each(options, function (handler) {\n      if (isFunction(handler)) {\n        handler = {\n          match: handler\n        };\n      }\n\n      queries[q].addHandler(handler);\n    });\n    return this;\n  },\n\n  /**\n   * unregisters a query and all it's handlers, or a specific handler for a query\n   *\n   * @param {string} q the media query to target\n   * @param {object || function} [handler] specific handler to unregister\n   */\n  unregister: function unregister(q, handler) {\n    var query = this.queries[q];\n\n    if (query) {\n      if (handler) {\n        query.removeHandler(handler);\n      } else {\n        query.clear();\n        delete this.queries[q];\n      }\n    }\n\n    return this;\n  }\n};\nmodule.exports = MediaQueryDispatch;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/enquire.js/src/MediaQueryDispatch.js"],"names":["MediaQuery","require","Util","each","isFunction","isArray","MediaQueryDispatch","window","matchMedia","Error","queries","browserIsIncapable","matches","prototype","constructor","register","q","options","shouldDegrade","isUnconditional","match","handler","addHandler","unregister","query","removeHandler","clear","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIE,IAAI,GAAGD,IAAI,CAACC,IAAhB;AACA,IAAIC,UAAU,GAAGF,IAAI,CAACE,UAAtB;AACA,IAAIC,OAAO,GAAGH,IAAI,CAACG,OAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,GAA+B;AAC3B,MAAG,CAACC,MAAM,CAACC,UAAX,EAAuB;AACnB,UAAM,IAAIC,KAAJ,CAAU,4DAAV,CAAN;AACH;;AAED,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,kBAAL,GAA0B,CAACJ,MAAM,CAACC,UAAP,CAAkB,UAAlB,EAA8BI,OAAzD;AACH;;AAEDN,kBAAkB,CAACO,SAAnB,GAA+B;AAE3BC,EAAAA,WAAW,EAAGR,kBAFa;;AAI3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIS,EAAAA,QAAQ,EAAG,kBAASC,CAAT,EAAYC,OAAZ,EAAqBC,aAArB,EAAoC;AAC3C,QAAIR,OAAO,GAAW,KAAKA,OAA3B;AAAA,QACIS,eAAe,GAAGD,aAAa,IAAI,KAAKP,kBAD5C;;AAGA,QAAG,CAACD,OAAO,CAACM,CAAD,CAAX,EAAgB;AACZN,MAAAA,OAAO,CAACM,CAAD,CAAP,GAAa,IAAIhB,UAAJ,CAAegB,CAAf,EAAkBG,eAAlB,CAAb;AACH,KAN0C,CAQ3C;;;AACA,QAAGf,UAAU,CAACa,OAAD,CAAb,EAAwB;AACpBA,MAAAA,OAAO,GAAG;AAAEG,QAAAA,KAAK,EAAGH;AAAV,OAAV;AACH;;AACD,QAAG,CAACZ,OAAO,CAACY,OAAD,CAAX,EAAsB;AAClBA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACH;;AACDd,IAAAA,IAAI,CAACc,OAAD,EAAU,UAASI,OAAT,EAAkB;AAC5B,UAAIjB,UAAU,CAACiB,OAAD,CAAd,EAAyB;AACrBA,QAAAA,OAAO,GAAG;AAAED,UAAAA,KAAK,EAAGC;AAAV,SAAV;AACH;;AACDX,MAAAA,OAAO,CAACM,CAAD,CAAP,CAAWM,UAAX,CAAsBD,OAAtB;AACH,KALG,CAAJ;AAOA,WAAO,IAAP;AACH,GAtC0B;;AAwC3B;AACJ;AACA;AACA;AACA;AACA;AACIE,EAAAA,UAAU,EAAG,oBAASP,CAAT,EAAYK,OAAZ,EAAqB;AAC9B,QAAIG,KAAK,GAAG,KAAKd,OAAL,CAAaM,CAAb,CAAZ;;AAEA,QAAGQ,KAAH,EAAU;AACN,UAAGH,OAAH,EAAY;AACRG,QAAAA,KAAK,CAACC,aAAN,CAAoBJ,OAApB;AACH,OAFD,MAGK;AACDG,QAAAA,KAAK,CAACE,KAAN;AACA,eAAO,KAAKhB,OAAL,CAAaM,CAAb,CAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;AA5D0B,CAA/B;AA+DAW,MAAM,CAACC,OAAP,GAAiBtB,kBAAjB","sourcesContent":["var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n"]},"metadata":{},"sourceType":"script"}