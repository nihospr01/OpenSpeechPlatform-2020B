{"ast":null,"code":"import defaultSource from \"./defaultSource\";\nexport default (function sourceRandomNormal(source) {\n  function randomNormal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function () {\n      var y; // If available, use the second previously-generated uniform random.\n\n      if (x != null) y = x, x = null; // Otherwise, generate a new x and y.\n      else do {\n          x = source() * 2 - 1;\n          y = source() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  randomNormal.source = sourceRandomNormal;\n  return randomNormal;\n})(defaultSource);","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-random/src/normal.js"],"names":["defaultSource","sourceRandomNormal","source","randomNormal","mu","sigma","x","r","y","Math","sqrt","log"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,CAAC,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAClD,WAASC,YAAT,CAAsBC,EAAtB,EAA0BC,KAA1B,EAAiC;AAC/B,QAAIC,CAAJ,EAAOC,CAAP;AACAH,IAAAA,EAAE,GAAGA,EAAE,IAAI,IAAN,GAAa,CAAb,GAAiB,CAACA,EAAvB;AACAC,IAAAA,KAAK,GAAGA,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoB,CAACA,KAA7B;AACA,WAAO,YAAW;AAChB,UAAIG,CAAJ,CADgB,CAGhB;;AACA,UAAIF,CAAC,IAAI,IAAT,EAAeE,CAAC,GAAGF,CAAJ,EAAOA,CAAC,GAAG,IAAX,CAAf,CAEA;AAFA,WAGK,GAAG;AACNA,UAAAA,CAAC,GAAGJ,MAAM,KAAK,CAAX,GAAe,CAAnB;AACAM,UAAAA,CAAC,GAAGN,MAAM,KAAK,CAAX,GAAe,CAAnB;AACAK,UAAAA,CAAC,GAAGD,CAAC,GAAGA,CAAJ,GAAQE,CAAC,GAAGA,CAAhB;AACD,SAJI,QAII,CAACD,CAAD,IAAMA,CAAC,GAAG,CAJd;AAML,aAAOH,EAAE,GAAGC,KAAK,GAAGG,CAAR,GAAYC,IAAI,CAACC,IAAL,CAAU,CAAC,CAAD,GAAKD,IAAI,CAACE,GAAL,CAASJ,CAAT,CAAL,GAAmBA,CAA7B,CAAxB;AACD,KAdD;AAeD;;AAEDJ,EAAAA,YAAY,CAACD,MAAb,GAAsBD,kBAAtB;AAEA,SAAOE,YAAP;AACD,CAzBc,EAyBZH,aAzBY,CAAf","sourcesContent":["import defaultSource from \"./defaultSource\";\n\nexport default (function sourceRandomNormal(source) {\n  function randomNormal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = source() * 2 - 1;\n        y = source() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  randomNormal.source = sourceRandomNormal;\n\n  return randomNormal;\n})(defaultSource);\n"]},"metadata":{},"sourceType":"module"}