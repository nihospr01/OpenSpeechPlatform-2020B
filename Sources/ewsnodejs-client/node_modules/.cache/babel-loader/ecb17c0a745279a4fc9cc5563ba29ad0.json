{"ast":null,"code":"import tree_add, { addAll as tree_addAll } from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, { removeAll as tree_removeAll } from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, { defaultX } from \"./x.js\";\nimport tree_y, { defaultY } from \"./y.js\";\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {\n    data: leaf.data\n  },\n      next = copy;\n\n  while (leaf = leaf.next) {\n    next = next.next = {\n      data: leaf.data\n    };\n  }\n\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function () {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n  if (!node) return copy;\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n  nodes = [{\n    source: node,\n    target: copy._root = new Array(4)\n  }];\n\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({\n          source: child,\n          target: node.target[i] = new Array(4)\n        });else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-quadtree/src/quadtree.js"],"names":["tree_add","addAll","tree_addAll","tree_cover","tree_data","tree_extent","tree_find","tree_remove","removeAll","tree_removeAll","tree_root","tree_size","tree_visit","tree_visitAfter","tree_x","defaultX","tree_y","defaultY","quadtree","nodes","x","y","tree","Quadtree","NaN","x0","y0","x1","y1","_x","_y","_x0","_y0","_x1","_y1","_root","undefined","leaf_copy","leaf","copy","data","next","treeProto","prototype","node","child","length","source","target","Array","pop","i","push","add","cover","extent","find","remove","root","size","visit","visitAfter"],"mappings":"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","sourcesContent":["import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n"]},"metadata":{},"sourceType":"module"}