{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n'use strict';\n\nvar BlockTree = require('./BlockTree');\n\nvar DraftModifier = require('./DraftModifier');\n\nvar EditorState = require('./EditorState');\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\n\nvar isEventHandled = require('./isEventHandled');\n\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\n\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar setImmediate = require('fbjs/lib/setImmediate'); // When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\n\n\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\n\n\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\n\n\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n  var chars = e.data; // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n\n  if (!chars) {\n    return;\n  } // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n\n\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  } // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n\n\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault(); // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())); // Bunch of different cases follow where we need to prevent native insertion.\n\n  var mustPreventNative = false;\n\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection(); // Selection is necessarily collapsed at this point due to earlier check.\n\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  } // We made it all the way! Let the browser do its thing and insert the char.\n\n\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  }); // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/editOnBeforeInput.js"],"names":["BlockTree","require","DraftModifier","EditorState","UserAgent","getEntityKeyForSelection","isEventHandled","isSelectionAtLeafStart","nullthrows","setImmediate","FF_QUICKFIND_CHAR","FF_QUICKFIND_LINK_CHAR","isFirefox","isBrowser","mustPreventDefaultForCharacter","character","replaceText","editorState","text","inlineStyle","entityKey","contentState","getCurrentContent","getSelection","push","editOnBeforeInput","editor","e","_pendingStateFromBeforeInput","undefined","update","_latestEditorState","chars","data","props","handleBeforeInput","preventDefault","selection","selectionStart","getStartOffset","selectionEnd","getEndOffset","anchorKey","getAnchorKey","isCollapsed","currentlySelectedChars","getPlainText","slice","forceSelection","merge","focusOffset","getCurrentInlineStyle","newEditorState","mustPreventNative","_latestCommittedEditorState","nativeSelection","global","anchorNode","nodeType","Node","TEXT_NODE","parentNode","nodeName","firstChild","nodeValue","indexOf","originalFingerprint","getFingerprint","getBlockTree","newFingerprint","getDirectionMap","get","set","nativelyRenderedContent","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;"]},"metadata":{},"sourceType":"script"}