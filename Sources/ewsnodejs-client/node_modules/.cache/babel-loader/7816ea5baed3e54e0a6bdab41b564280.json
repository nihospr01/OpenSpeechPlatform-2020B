{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CharacterMetadata\n * @format\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('immutable'),\n    Map = _require.Map,\n    OrderedSet = _require.OrderedSet,\n    Record = _require.Record; // Immutable.map is typed such that the value for every key in the map\n// must be the same type\n\n\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n  style: EMPTY_SET,\n  entity: null\n};\nvar CharacterMetadataRecord = Record(defaultRecord);\n\nvar CharacterMetadata = function (_CharacterMetadataRec) {\n  _inherits(CharacterMetadata, _CharacterMetadataRec);\n\n  function CharacterMetadata() {\n    _classCallCheck(this, CharacterMetadata);\n\n    return _possibleConstructorReturn(this, _CharacterMetadataRec.apply(this, arguments));\n  }\n\n  CharacterMetadata.prototype.getStyle = function getStyle() {\n    return this.get('style');\n  };\n\n  CharacterMetadata.prototype.getEntity = function getEntity() {\n    return this.get('entity');\n  };\n\n  CharacterMetadata.prototype.hasStyle = function hasStyle(style) {\n    return this.getStyle().includes(style);\n  };\n\n  CharacterMetadata.applyStyle = function applyStyle(record, style) {\n    var withStyle = record.set('style', record.getStyle().add(style));\n    return CharacterMetadata.create(withStyle);\n  };\n\n  CharacterMetadata.removeStyle = function removeStyle(record, style) {\n    var withoutStyle = record.set('style', record.getStyle().remove(style));\n    return CharacterMetadata.create(withoutStyle);\n  };\n\n  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\n    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);\n    return CharacterMetadata.create(withEntity);\n  };\n  /**\n   * Use this function instead of the `CharacterMetadata` constructor.\n   * Since most content generally uses only a very small number of\n   * style/entity permutations, we can reuse these objects as often as\n   * possible.\n   */\n\n\n  CharacterMetadata.create = function create(config) {\n    if (!config) {\n      return EMPTY;\n    }\n\n    var defaultConfig = {\n      style: EMPTY_SET,\n      entity: null\n    }; // Fill in unspecified properties, if necessary.\n\n    var configMap = Map(defaultConfig).merge(config);\n    var existing = pool.get(configMap);\n\n    if (existing) {\n      return existing;\n    }\n\n    var newCharacter = new CharacterMetadata(configMap);\n    pool = pool.set(configMap, newCharacter);\n    return newCharacter;\n  };\n\n  return CharacterMetadata;\n}(CharacterMetadataRecord);\n\nvar EMPTY = new CharacterMetadata();\nvar pool = Map([[Map(defaultRecord), EMPTY]]);\nCharacterMetadata.EMPTY = EMPTY;\nmodule.exports = CharacterMetadata;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/CharacterMetadata.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_require","require","Map","OrderedSet","Record","EMPTY_SET","defaultRecord","style","entity","CharacterMetadataRecord","CharacterMetadata","_CharacterMetadataRec","apply","arguments","getStyle","get","getEntity","hasStyle","includes","applyStyle","record","withStyle","set","add","removeStyle","withoutStyle","remove","applyEntity","entityKey","withEntity","config","EMPTY","defaultConfig","configMap","merge","existing","pool","newCharacter","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CharacterMetadata\n * @format\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require('immutable'),\n    Map = _require.Map,\n    OrderedSet = _require.OrderedSet,\n    Record = _require.Record;\n\n// Immutable.map is typed such that the value for every key in the map\n// must be the same type\n\n\nvar EMPTY_SET = OrderedSet();\n\nvar defaultRecord = {\n  style: EMPTY_SET,\n  entity: null\n};\n\nvar CharacterMetadataRecord = Record(defaultRecord);\n\nvar CharacterMetadata = function (_CharacterMetadataRec) {\n  _inherits(CharacterMetadata, _CharacterMetadataRec);\n\n  function CharacterMetadata() {\n    _classCallCheck(this, CharacterMetadata);\n\n    return _possibleConstructorReturn(this, _CharacterMetadataRec.apply(this, arguments));\n  }\n\n  CharacterMetadata.prototype.getStyle = function getStyle() {\n    return this.get('style');\n  };\n\n  CharacterMetadata.prototype.getEntity = function getEntity() {\n    return this.get('entity');\n  };\n\n  CharacterMetadata.prototype.hasStyle = function hasStyle(style) {\n    return this.getStyle().includes(style);\n  };\n\n  CharacterMetadata.applyStyle = function applyStyle(record, style) {\n    var withStyle = record.set('style', record.getStyle().add(style));\n    return CharacterMetadata.create(withStyle);\n  };\n\n  CharacterMetadata.removeStyle = function removeStyle(record, style) {\n    var withoutStyle = record.set('style', record.getStyle().remove(style));\n    return CharacterMetadata.create(withoutStyle);\n  };\n\n  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\n    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);\n    return CharacterMetadata.create(withEntity);\n  };\n\n  /**\n   * Use this function instead of the `CharacterMetadata` constructor.\n   * Since most content generally uses only a very small number of\n   * style/entity permutations, we can reuse these objects as often as\n   * possible.\n   */\n\n\n  CharacterMetadata.create = function create(config) {\n    if (!config) {\n      return EMPTY;\n    }\n\n    var defaultConfig = {\n      style: EMPTY_SET,\n      entity: null\n    };\n\n    // Fill in unspecified properties, if necessary.\n    var configMap = Map(defaultConfig).merge(config);\n\n    var existing = pool.get(configMap);\n    if (existing) {\n      return existing;\n    }\n\n    var newCharacter = new CharacterMetadata(configMap);\n    pool = pool.set(configMap, newCharacter);\n    return newCharacter;\n  };\n\n  return CharacterMetadata;\n}(CharacterMetadataRecord);\n\nvar EMPTY = new CharacterMetadata();\nvar pool = Map([[Map(defaultRecord), EMPTY]]);\n\nCharacterMetadata.EMPTY = EMPTY;\n\nmodule.exports = CharacterMetadata;"]},"metadata":{},"sourceType":"script"}