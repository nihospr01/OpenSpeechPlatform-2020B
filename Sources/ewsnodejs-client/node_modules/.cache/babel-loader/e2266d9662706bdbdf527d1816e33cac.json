{"ast":null,"code":"import compose from \"./compose.js\";\nimport { abs, asin, atan2, cos, degrees, pi, radians, sin, tau } from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n\n  return rotation;\n}\n\nexport default function (rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-geo/src/rotation.js"],"names":["compose","abs","asin","atan2","cos","degrees","pi","radians","sin","tau","rotationIdentity","lambda","phi","Math","round","invert","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosPhi","x","y","z","k","rotate","length","forward","coordinates"],"mappings":"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","sourcesContent":["import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n"]},"metadata":{},"sourceType":"module"}