{"ast":null,"code":"import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n\n  do {\n    node.height = height;\n  } while ((node = node.parent) && node.height < ++height);\n}\nexport function Node(data) {\n  this.data = data;\n  this.depth = this.height = 0;\n  this.parent = null;\n}\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-hierarchy/src/hierarchy/index.js"],"names":["node_count","node_each","node_eachBefore","node_eachAfter","node_sum","node_sort","node_path","node_ancestors","node_descendants","node_leaves","node_links","hierarchy","data","children","root","Node","valued","value","node","nodes","child","childs","i","n","defaultChildren","pop","length","Array","push","parent","depth","eachBefore","computeHeight","node_copy","copyData","d","height","prototype","constructor","count","each","eachAfter","sum","sort","path","ancestors","descendants","leaves","links","copy"],"mappings":"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","sourcesContent":["import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\n\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n"]},"metadata":{},"sourceType":"module"}