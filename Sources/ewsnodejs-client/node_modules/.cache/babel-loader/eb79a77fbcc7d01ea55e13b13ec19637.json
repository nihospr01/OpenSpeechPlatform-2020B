{"ast":null,"code":"import { bisect } from \"d3-array\";\nimport { slice } from \"./array\";\nimport { linearish } from \"./linear\";\nimport { initRange } from \"./init\";\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n\n    while (++i < n) {\n      domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    }\n\n    return scale;\n  }\n\n  scale.domain = function (_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function () {\n    return domain.slice();\n  };\n\n  scale.copy = function () {\n    return quantize().domain([x0, x1]).range(range).unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-scale/src/quantize.js"],"names":["bisect","slice","linearish","initRange","quantize","x0","x1","n","domain","range","unknown","scale","x","rescale","i","Array","_","arguments","length","call","invertExtent","y","indexOf","NaN","thresholds","copy","apply"],"mappings":"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","sourcesContent":["import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {linearish} from \"./linear\";\nimport {initRange} from \"./init\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n"]},"metadata":{},"sourceType":"module"}