{"ast":null,"code":"import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport { map } from \"d3-collection\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"missing: \" + nodeId);\n  return node;\n}\n\nexport default function (links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      iterations = 1;\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle();\n        y = target.y + target.vy - source.y - source.vy || jiggle();\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = map(nodes, id),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.links = function (_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function (_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function (_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-force/src/link.js"],"names":["constant","jiggle","map","index","d","find","nodeById","nodeId","node","get","Error","links","id","strength","defaultStrength","strengths","distance","distances","nodes","count","bias","iterations","link","Math","min","source","target","force","alpha","k","n","length","i","x","y","l","b","vx","vy","sqrt","initialize","m","Array","initializeStrength","initializeDistance","_","arguments"],"mappings":"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","sourcesContent":["import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {map} from \"d3-collection\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"missing: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle();\n        y = target.y + target.vy - source.y - source.vy || jiggle();\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = map(nodes, id),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n"]},"metadata":{},"sourceType":"module"}