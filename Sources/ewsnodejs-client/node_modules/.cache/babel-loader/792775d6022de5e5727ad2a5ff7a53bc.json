{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _assign = require('object-assign'); // -- Inlined from fbjs --\n\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction _invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n\nvar warning = function warning() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n} // /-- Inlined from fbjs --\n\n\nvar MIXINS_KEY = 'mixins'; // Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\n\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n  var injectedMixins = [];\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n\n  var RESERVED_SPEC_KEYS = {\n    displayName: function displayName(Constructor, _displayName) {\n      Constructor.displayName = _displayName;\n    },\n    mixins: function mixins(Constructor, _mixins) {\n      if (_mixins) {\n        for (var i = 0; i < _mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, _mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function childContextTypes(Constructor, _childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, _childContextTypes, 'childContext');\n      }\n\n      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);\n    },\n    contextTypes: function contextTypes(Constructor, _contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, _contextTypes, 'context');\n      }\n\n      Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);\n    },\n\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);\n      } else {\n        Constructor.getDefaultProps = _getDefaultProps;\n      }\n    },\n    propTypes: function propTypes(Constructor, _propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, _propTypes, 'prop');\n      }\n\n      Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);\n    },\n    statics: function statics(Constructor, _statics) {\n      mixStaticSpecIntoComponent(Constructor, _statics);\n    },\n    autobind: function autobind() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.\n\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n    } // Disallow defining methods more than once unless explicitly allowed.\n\n\n    if (isAlreadyDefined) {\n      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n    }\n  }\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n\n\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(isMixinValid, \"%s: You're attempting to include a mixin that is either null \" + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);\n        }\n      }\n\n      return;\n    }\n\n    _invariant(typeof spec !== 'function', \"ReactClass: You're attempting to \" + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n\n    _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" + 'use a component as a mixin. Instead, just use a regular object.');\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs; // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride.\n\n            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name); // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n\n\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = (name in RESERVED_SPEC_KEYS);\n\n      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n\n      var isAlreadyDefined = (name in Constructor);\n\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;\n\n        _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n\n\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n\n        one[key] = two[key];\n      }\n    }\n\n    return one;\n  }\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n\n\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n\n\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n\n\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n\n      boundMethod.bind = function (newThis) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        } // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n\n\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);\n          }\n\n          return boundMethod;\n        }\n\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n\n    return boundMethod;\n  }\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n\n\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function componentDidMount() {\n      this.__isMounted = true;\n    }\n  };\n  var IsMountedPostMixin = {\n    componentWillUnmount: function componentWillUnmount() {\n      this.__isMounted = false;\n    }\n  };\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function replaceState(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function isMounted() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');\n        this.__didWarnIsMounted = true;\n      }\n\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function ReactClassComponent() {};\n\n  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n\n\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n      if (process.env.NODE_ENV !== 'production') {\n        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');\n      } // Wire up auto-binding\n\n\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n      this.state = null; // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n\n      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin); // Initialize the defaultProps property after all mixins have been merged.\n\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');\n      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');\n      warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');\n    } // Reduce time spent doing lookups by setting these on the prototype.\n\n\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/create-react-class/factory.js"],"names":["_assign","require","emptyObject","process","env","NODE_ENV","Object","freeze","validateFormat","format","undefined","Error","_invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop","warning","printWarning","_len","arguments","length","Array","_key","message","console","x","indexOf","_len2","_key2","apply","concat","MIXINS_KEY","identity","fn","ReactPropTypeLocationNames","prop","context","childContext","factory","ReactComponent","isValidElement","ReactNoopUpdateQueue","injectedMixins","ReactClassInterface","mixins","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","updateComponent","ReactClassStaticInterface","getDerivedStateFromProps","RESERVED_SPEC_KEYS","displayName","Constructor","i","mixSpecIntoComponent","validateTypeDef","createMergedResultFunction","mixStaticSpecIntoComponent","autobind","typeDef","location","propName","hasOwnProperty","validateMethodOverride","isAlreadyDefined","specPolicy","ReactClassMixin","spec","typeofSpec","isMixinValid","proto","prototype","autoBindPairs","__reactAutoBindPairs","property","isReactClassMethod","isFunction","shouldAutoBind","push","createChainedFunction","isReserved","mergeIntoWithNoDuplicateKeys","one","two","key","mergedResult","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","newThis","reboundMethod","bindAutoBindMethods","pairs","autoBindKey","IsMountedPreMixin","__isMounted","IsMountedPostMixin","replaceState","newState","callback","updater","enqueueReplaceState","isMounted","__didWarnIsMounted","ReactClassComponent","createClass","props","refs","state","initialState","_isMockFunction","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","methodName","module","exports"],"mappings":"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B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,oBAtEO;;AAwExB;AACJ;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,oBA5EO;;AA8ExB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,aA7FgB;AA+FxB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,aAxGI;;AA0GxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,aApHK;;AAsHxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,yBAAyB,EAAE,aAzIH;;AA2IxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,qBAAqB,EAAE,aA/JC;;AAiKxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,aAhLG;;AAkLxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,aA9LI;;AAgMxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,oBAAoB,EAAE,aA3ME;;AA6MxB;AACJ;AACA;AACA;AACA;AACIC,IAAAA,yBAAyB,EAAE,aAlNH;;AAoNxB;AACJ;AACA;AACA;AACA;AACIC,IAAAA,gCAAgC,EAAE,aAzNV;;AA2NxB;AACJ;AACA;AACA;AACA;AACIC,IAAAA,0BAA0B,EAAE,aAhOJ;AAkOxB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,I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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\n// -- Inlined from fbjs --\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction _invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nvar warning = function(){};\n\nif (process.env.NODE_ENV !== 'production') {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\n// /-- Inlined from fbjs --\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isAlreadyDefined = name in Constructor;\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n          ? ReactClassStaticInterface[name]\n          : null;\n\n        _invariant(\n          specPolicy === 'DEFINE_MANY_MERGED',\n          'ReactClass: You are attempting to define ' +\n            '`%s` on your component more than once. This conflict may be ' +\n            'due to a mixin.',\n          name\n        );\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n"]},"metadata":{},"sourceType":"script"}