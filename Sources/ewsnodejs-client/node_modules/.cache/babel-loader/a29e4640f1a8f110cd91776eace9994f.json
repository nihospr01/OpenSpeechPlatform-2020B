{"ast":null,"code":"import { abs, atan, atan2, cos, epsilon, halfPi, log, pi, pow, sign, sin, sqrt, tan } from \"../math.js\";\nimport { conicProjection } from \"./conic.js\";\nimport { mercatorRaw } from \"./mercator.js\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) {\n      if (y < -halfPi + epsilon) y = -halfPi + epsilon;\n    } else {\n      if (y > halfPi - epsilon) y = halfPi - epsilon;\n    }\n\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function (x, y) {\n    var fy = f - y,\n        r = sign(n) * sqrt(x * x + fy * fy),\n        l = atan2(x, abs(fy)) * sign(fy);\n    if (fy * n < 0) l -= pi * sign(x) * sign(fy);\n    return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-geo/src/projection/conicConformal.js"],"names":["abs","atan","atan2","cos","epsilon","halfPi","log","pi","pow","sign","sin","sqrt","tan","conicProjection","mercatorRaw","tany","y","conicConformalRaw","y0","y1","cy0","n","f","project","x","r","invert","fy","l","scale","parallels"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,GAAhD,EAAqDC,EAArD,EAAyDC,GAAzD,EAA8DC,IAA9D,EAAoEC,GAApE,EAAyEC,IAAzE,EAA+EC,GAA/E,QAAyF,YAAzF;AACA,SAAQC,eAAR,QAA8B,YAA9B;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAEA,SAASC,IAAT,CAAcC,CAAd,EAAiB;AACf,SAAOJ,GAAG,CAAC,CAACP,MAAM,GAAGW,CAAV,IAAe,CAAhB,CAAV;AACD;;AAED,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC;AACxC,MAAIC,GAAG,GAAGjB,GAAG,CAACe,EAAD,CAAb;AAAA,MACIG,CAAC,GAAGH,EAAE,KAAKC,EAAP,GAAYT,GAAG,CAACQ,EAAD,CAAf,GAAsBZ,GAAG,CAACc,GAAG,GAAGjB,GAAG,CAACgB,EAAD,CAAV,CAAH,GAAqBb,GAAG,CAACS,IAAI,CAACI,EAAD,CAAJ,GAAWJ,IAAI,CAACG,EAAD,CAAhB,CADtD;AAAA,MAEII,CAAC,GAAGF,GAAG,GAAGZ,GAAG,CAACO,IAAI,CAACG,EAAD,CAAL,EAAWG,CAAX,CAAT,GAAyBA,CAFjC;AAIA,MAAI,CAACA,CAAL,EAAQ,OAAOP,WAAP;;AAER,WAASS,OAAT,CAAiBC,CAAjB,EAAoBR,CAApB,EAAuB;AACrB,QAAIM,CAAC,GAAG,CAAR,EAAW;AAAE,UAAIN,CAAC,GAAG,CAACX,MAAD,GAAUD,OAAlB,EAA2BY,CAAC,GAAG,CAACX,MAAD,GAAUD,OAAd;AAAwB,KAAhE,MACK;AAAE,UAAIY,CAAC,GAAGX,MAAM,GAAGD,OAAjB,EAA0BY,CAAC,GAAGX,MAAM,GAAGD,OAAb;AAAuB;;AACxD,QAAIqB,CAAC,GAAGH,CAAC,GAAGd,GAAG,CAACO,IAAI,CAACC,CAAD,CAAL,EAAUK,CAAV,CAAf;AACA,WAAO,CAACI,CAAC,GAAGf,GAAG,CAACW,CAAC,GAAGG,CAAL,CAAR,EAAiBF,CAAC,GAAGG,CAAC,GAAGtB,GAAG,CAACkB,CAAC,GAAGG,CAAL,CAA5B,CAAP;AACD;;AAEDD,EAAAA,OAAO,CAACG,MAAR,GAAiB,UAASF,CAAT,EAAYR,CAAZ,EAAe;AAC9B,QAAIW,EAAE,GAAGL,CAAC,GAAGN,CAAb;AAAA,QAAgBS,CAAC,GAAGhB,IAAI,CAACY,CAAD,CAAJ,GAAUV,IAAI,CAACa,CAAC,GAAGA,CAAJ,GAAQG,EAAE,GAAGA,EAAd,CAAlC;AAAA,QACEC,CAAC,GAAG1B,KAAK,CAACsB,CAAD,EAAIxB,GAAG,CAAC2B,EAAD,CAAP,CAAL,GAAoBlB,IAAI,CAACkB,EAAD,CAD9B;AAEA,QAAIA,EAAE,GAAGN,CAAL,GAAS,CAAb,EACEO,CAAC,IAAIrB,EAAE,GAAGE,IAAI,CAACe,CAAD,CAAT,GAAef,IAAI,CAACkB,EAAD,CAAxB;AACF,WAAO,CAACC,CAAC,GAAGP,CAAL,EAAQ,IAAIpB,IAAI,CAACO,GAAG,CAACc,CAAC,GAAGG,CAAL,EAAQ,IAAIJ,CAAZ,CAAJ,CAAR,GAA8BhB,MAAtC,CAAP;AACD,GAND;;AAQA,SAAOkB,OAAP;AACD;AAED,eAAe,YAAW;AACxB,SAAOV,eAAe,CAACI,iBAAD,CAAf,CACFY,KADE,CACI,KADJ,EAEFC,SAFE,CAEQ,CAAC,EAAD,EAAK,EAAL,CAFR,CAAP;AAGD","sourcesContent":["import {abs, atan, atan2, cos, epsilon, halfPi, log, pi, pow, sign, sin, sqrt, tan} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {mercatorRaw} from \"./mercator.js\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy),\n      l = atan2(x, abs(fy)) * sign(fy);\n    if (fy * n < 0)\n      l -= pi * sign(x) * sign(fy);\n    return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n"]},"metadata":{},"sourceType":"module"}