{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceToStartOfLine\n * @format\n * \n */\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nvar expandRangeToStartOfLine = require('./expandRangeToStartOfLine');\n\nvar getDraftEditorSelectionWithNodes = require('./getDraftEditorSelectionWithNodes');\n\nvar moveSelectionBackward = require('./moveSelectionBackward');\n\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\nfunction keyCommandBackspaceToStartOfLine(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n\n    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n\n    var domSelection = global.getSelection();\n    var range = domSelection.getRangeAt(0);\n    range = expandRangeToStartOfLine(range);\n    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceToStartOfLine;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js"],"names":["EditorState","require","expandRangeToStartOfLine","getDraftEditorSelectionWithNodes","moveSelectionBackward","removeTextWithStrategy","keyCommandBackspaceToStartOfLine","editorState","afterRemoval","strategyState","selection","getSelection","isCollapsed","getAnchorOffset","domSelection","global","range","getRangeAt","endContainer","endOffset","startContainer","startOffset","selectionState","getCurrentContent","push","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,wBAAwB,GAAGD,OAAO,CAAC,4BAAD,CAAtC;;AACA,IAAIE,gCAAgC,GAAGF,OAAO,CAAC,oCAAD,CAA9C;;AACA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAII,sBAAsB,GAAGJ,OAAO,CAAC,0BAAD,CAApC;;AAEA,SAASK,gCAAT,CAA0CC,WAA1C,EAAuD;AACrD,MAAIC,YAAY,GAAGH,sBAAsB,CAACE,WAAD,EAAc,UAAUE,aAAV,EAAyB;AAC9E,QAAIC,SAAS,GAAGD,aAAa,CAACE,YAAd,EAAhB;;AACA,QAAID,SAAS,CAACE,WAAV,MAA2BF,SAAS,CAACG,eAAV,OAAgC,CAA/D,EAAkE;AAChE,aAAOT,qBAAqB,CAACK,aAAD,EAAgB,CAAhB,CAA5B;AACD;;AAED,QAAIK,YAAY,GAAGC,MAAM,CAACJ,YAAP,EAAnB;AACA,QAAIK,KAAK,GAAGF,YAAY,CAACG,UAAb,CAAwB,CAAxB,CAAZ;AACAD,IAAAA,KAAK,GAAGd,wBAAwB,CAACc,KAAD,CAAhC;AAEA,WAAOb,gCAAgC,CAACM,aAAD,EAAgB,IAAhB,EAAsBO,KAAK,CAACE,YAA5B,EAA0CF,KAAK,CAACG,SAAhD,EAA2DH,KAAK,CAACI,cAAjE,EAAiFJ,KAAK,CAACK,WAAvF,CAAhC,CAAoIC,cAA3I;AACD,GAXwC,EAWtC,UAXsC,CAAzC;;AAaA,MAAId,YAAY,KAAKD,WAAW,CAACgB,iBAAZ,EAArB,EAAsD;AACpD,WAAOhB,WAAP;AACD;;AAED,SAAOP,WAAW,CAACwB,IAAZ,CAAiBjB,WAAjB,EAA8BC,YAA9B,EAA4C,cAA5C,CAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBpB,gCAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceToStartOfLine\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nvar expandRangeToStartOfLine = require('./expandRangeToStartOfLine');\nvar getDraftEditorSelectionWithNodes = require('./getDraftEditorSelectionWithNodes');\nvar moveSelectionBackward = require('./moveSelectionBackward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\nfunction keyCommandBackspaceToStartOfLine(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n\n    var domSelection = global.getSelection();\n    var range = domSelection.getRangeAt(0);\n    range = expandRangeToStartOfLine(range);\n\n    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceToStartOfLine;"]},"metadata":{},"sourceType":"script"}