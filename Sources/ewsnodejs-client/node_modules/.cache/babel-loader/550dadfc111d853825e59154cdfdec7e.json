{"ast":null,"code":"export default function (parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i,\n      n = nodes.length,\n      sum,\n      sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = value / 2 + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n    }\n\n    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if (x1 - x0 > y1 - y0) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-hierarchy/src/treemap/binary.js"],"names":["parent","x0","y0","x1","y1","nodes","children","i","n","length","sum","sums","Array","value","partition","j","node","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk"],"mappings":"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","sourcesContent":["export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}