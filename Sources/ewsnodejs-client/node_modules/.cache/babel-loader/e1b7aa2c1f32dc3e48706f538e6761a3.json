{"ast":null,"code":"var t0 = new Date(),\n    t1 = new Date();\nexport default function newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/d3-time/src/interval.js"],"names":["t0","Date","t1","newInterval","floori","offseti","count","field","interval","date","arguments","length","floor","ceil","round","d0","d1","offset","step","Math","range","start","stop","previous","push","filter","test","setTime","end","every","isFinite","d"],"mappings":"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","sourcesContent":["var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = function(date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n"]},"metadata":{},"sourceType":"module"}