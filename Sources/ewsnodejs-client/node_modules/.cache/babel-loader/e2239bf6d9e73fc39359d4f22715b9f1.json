{"ast":null,"code":"import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport { quadtree } from \"d3-quadtree\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function (radius) {\n  var nodes,\n      radii,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-force/src/collide.js"],"names":["constant","jiggle","quadtree","x","d","vx","y","vy","radius","nodes","radii","strength","iterations","force","i","n","length","tree","node","xi","yi","ri","ri2","k","visitAfter","prepare","index","visit","apply","quad","x0","y0","x1","y1","data","rj","r","l","Math","sqrt","initialize","Array","_","arguments"],"mappings":"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","sourcesContent":["import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {quadtree} from \"d3-quadtree\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n"]},"metadata":{},"sourceType":"module"}