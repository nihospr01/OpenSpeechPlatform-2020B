{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getRangeClientRects\n * @format\n * \n */\n'use strict';\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar isChrome = UserAgent.isBrowser('Chrome'); // In Chrome, the client rects will include the entire bounds of all nodes that\n// begin (have a start tag) within the selection, even if the selection does\n// not overlap the entire node. To resolve this, we split the range at each\n// start tag and join the client rects together.\n// https://code.google.com/p/chromium/issues/detail?id=324437\n\n/* eslint-disable consistent-return */\n\nfunction getRangeClientRectsChrome(range) {\n  var tempRange = range.cloneRange();\n  var clientRects = [];\n\n  for (var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode) {\n    // If we've climbed up to the common ancestor, we can now use the\n    // original start point and stop climbing the tree.\n    var atCommonAncestor = ancestor === range.commonAncestorContainer;\n\n    if (atCommonAncestor) {\n      tempRange.setStart(range.startContainer, range.startOffset);\n    } else {\n      tempRange.setStart(tempRange.endContainer, 0);\n    }\n\n    var rects = Array.from(tempRange.getClientRects());\n    clientRects.push(rects);\n\n    if (atCommonAncestor) {\n      var _ref;\n\n      clientRects.reverse();\n      return (_ref = []).concat.apply(_ref, clientRects);\n    }\n\n    tempRange.setEndBefore(ancestor);\n  }\n\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found an unexpected detached subtree when getting range client rects.') : invariant(false) : void 0;\n}\n/* eslint-enable consistent-return */\n\n/**\n * Like range.getClientRects() but normalizes for browser bugs.\n */\n\n\nvar getRangeClientRects = isChrome ? getRangeClientRectsChrome : function (range) {\n  return Array.from(range.getClientRects());\n};\nmodule.exports = getRangeClientRects;","map":{"version":3,"sources":["/opt/OpenSpeechPlatform-UCSD/Software/ewsnodejs-client/node_modules/draft-js/lib/getRangeClientRects.js"],"names":["UserAgent","require","invariant","isChrome","isBrowser","getRangeClientRectsChrome","range","tempRange","cloneRange","clientRects","ancestor","endContainer","parentNode","atCommonAncestor","commonAncestorContainer","setStart","startContainer","startOffset","rects","Array","from","getClientRects","push","_ref","reverse","concat","apply","setEndBefore","process","env","NODE_ENV","getRangeClientRects","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGH,SAAS,CAACI,SAAV,CAAoB,QAApB,CAAf,C,CAEA;AACA;AACA;AACA;AACA;;AACA;;AACA,SAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AACxC,MAAIC,SAAS,GAAGD,KAAK,CAACE,UAAN,EAAhB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,QAAQ,GAAGJ,KAAK,CAACK,YAA1B,EAAwCD,QAAQ,IAAI,IAApD,EAA0DA,QAAQ,GAAGA,QAAQ,CAACE,UAA9E,EAA0F;AACxF;AACA;AACA,QAAIC,gBAAgB,GAAGH,QAAQ,KAAKJ,KAAK,CAACQ,uBAA1C;;AACA,QAAID,gBAAJ,EAAsB;AACpBN,MAAAA,SAAS,CAACQ,QAAV,CAAmBT,KAAK,CAACU,cAAzB,EAAyCV,KAAK,CAACW,WAA/C;AACD,KAFD,MAEO;AACLV,MAAAA,SAAS,CAACQ,QAAV,CAAmBR,SAAS,CAACI,YAA7B,EAA2C,CAA3C;AACD;;AACD,QAAIO,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWb,SAAS,CAACc,cAAV,EAAX,CAAZ;AACAZ,IAAAA,WAAW,CAACa,IAAZ,CAAiBJ,KAAjB;;AACA,QAAIL,gBAAJ,EAAsB;AACpB,UAAIU,IAAJ;;AAEAd,MAAAA,WAAW,CAACe,OAAZ;AACA,aAAO,CAACD,IAAI,GAAG,EAAR,EAAYE,MAAZ,CAAmBC,KAAnB,CAAyBH,IAAzB,EAA+Bd,WAA/B,CAAP;AACD;;AACDF,IAAAA,SAAS,CAACoB,YAAV,CAAuBjB,QAAvB;AACD;;AAED,GAAC,KAAD,GAASkB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC5B,SAAS,CAAC,KAAD,EAAQ,uEAAR,CAAjD,GAAoIA,SAAS,CAAC,KAAD,CAAtJ,GAAgK,KAAK,CAArK;AACD;AACD;;AAEA;AACA;AACA;;;AACA,IAAI6B,mBAAmB,GAAG5B,QAAQ,GAAGE,yBAAH,GAA+B,UAAUC,KAAV,EAAiB;AAChF,SAAOa,KAAK,CAACC,IAAN,CAAWd,KAAK,CAACe,cAAN,EAAX,CAAP;AACD,CAFD;AAIAW,MAAM,CAACC,OAAP,GAAiBF,mBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getRangeClientRects\n * @format\n * \n */\n\n'use strict';\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n// In Chrome, the client rects will include the entire bounds of all nodes that\n// begin (have a start tag) within the selection, even if the selection does\n// not overlap the entire node. To resolve this, we split the range at each\n// start tag and join the client rects together.\n// https://code.google.com/p/chromium/issues/detail?id=324437\n/* eslint-disable consistent-return */\nfunction getRangeClientRectsChrome(range) {\n  var tempRange = range.cloneRange();\n  var clientRects = [];\n\n  for (var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode) {\n    // If we've climbed up to the common ancestor, we can now use the\n    // original start point and stop climbing the tree.\n    var atCommonAncestor = ancestor === range.commonAncestorContainer;\n    if (atCommonAncestor) {\n      tempRange.setStart(range.startContainer, range.startOffset);\n    } else {\n      tempRange.setStart(tempRange.endContainer, 0);\n    }\n    var rects = Array.from(tempRange.getClientRects());\n    clientRects.push(rects);\n    if (atCommonAncestor) {\n      var _ref;\n\n      clientRects.reverse();\n      return (_ref = []).concat.apply(_ref, clientRects);\n    }\n    tempRange.setEndBefore(ancestor);\n  }\n\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found an unexpected detached subtree when getting range client rects.') : invariant(false) : void 0;\n}\n/* eslint-enable consistent-return */\n\n/**\n * Like range.getClientRects() but normalizes for browser bugs.\n */\nvar getRangeClientRects = isChrome ? getRangeClientRectsChrome : function (range) {\n  return Array.from(range.getClientRects());\n};\n\nmodule.exports = getRangeClientRects;"]},"metadata":{},"sourceType":"script"}