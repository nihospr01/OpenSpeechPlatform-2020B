{"ast":null,"code":"import { ticks, tickIncrement } from \"d3-array\";\nimport continuous, { copy, identity } from \"./continuous\";\nimport { initRange } from \"./init\";\nimport tickFormat from \"./tickFormat\";\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function (count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function (count) {\n    if (count == null) count = 10;\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\nexport default function linear() {\n  var scale = continuous(identity, identity);\n\n  scale.copy = function () {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n  return linearish(scale);\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-scale/src/linear.js"],"names":["ticks","tickIncrement","continuous","copy","identity","initRange","tickFormat","linearish","scale","domain","count","d","length","specifier","nice","i0","i1","start","stop","step","Math","floor","ceil","linear","apply","arguments"],"mappings":"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","sourcesContent":["import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy, identity} from \"./continuous\";\nimport {initRange} from \"./init\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(identity, identity);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n"]},"metadata":{},"sourceType":"module"}