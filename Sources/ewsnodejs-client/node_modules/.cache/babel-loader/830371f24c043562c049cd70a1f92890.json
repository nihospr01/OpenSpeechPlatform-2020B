{"ast":null,"code":"import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport { required } from \"../accessors.js\";\nimport constant, { constantZero } from \"../constant.js\";\nexport default function () {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 = root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function (x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function (x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function (x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function (x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function (x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function (x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function (x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function (x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function (x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function (x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/d3-hierarchy/src/treemap/index.js"],"names":["roundNode","squarify","required","constant","constantZero","tile","round","dx","dy","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","treemap","root","x0","y0","x1","y1","eachBefore","positionNode","node","p","depth","children","x","arguments","length","size","padding","paddingOuter"],"mappings":"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","sourcesContent":["import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n"]},"metadata":{},"sourceType":"module"}