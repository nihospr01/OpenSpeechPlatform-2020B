{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n  var len = text.length;\n\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n  var newOffset = offset + len;\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;","map":{"version":3,"sources":["/opt/osp/ewsnodejs-client/node_modules/draft-js/lib/insertTextIntoContentState.js"],"names":["Immutable","require","insertIntoList","invariant","Repeat","insertTextIntoContentState","contentState","selectionState","text","characterMetadata","isCollapsed","process","env","NODE_ENV","len","length","blockMap","getBlockMap","key","getStartKey","offset","getStartOffset","block","get","blockText","getText","newBlock","merge","slice","getLength","characterList","getCharacterList","toList","newOffset","set","selectionAfter","anchorOffset","focusOffset","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIG,MAAM,GAAGJ,SAAS,CAACI,MAAvB;;AAGA,SAASC,0BAAT,CAAoCC,YAApC,EAAkDC,cAAlD,EAAkEC,IAAlE,EAAwEC,iBAAxE,EAA2F;AACzF,GAACF,cAAc,CAACG,WAAf,EAAD,GAAgCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,SAAS,CAAC,KAAD,EAAQ,4DAAR,CAAjD,GAAyHA,SAAS,CAAC,KAAD,CAAlK,GAA4K,KAAK,CAAjL;AAEA,MAAIW,GAAG,GAAGN,IAAI,CAACO,MAAf;;AACA,MAAI,CAACD,GAAL,EAAU;AACR,WAAOR,YAAP;AACD;;AAED,MAAIU,QAAQ,GAAGV,YAAY,CAACW,WAAb,EAAf;AACA,MAAIC,GAAG,GAAGX,cAAc,CAACY,WAAf,EAAV;AACA,MAAIC,MAAM,GAAGb,cAAc,CAACc,cAAf,EAAb;AACA,MAAIC,KAAK,GAAGN,QAAQ,CAACO,GAAT,CAAaL,GAAb,CAAZ;AACA,MAAIM,SAAS,GAAGF,KAAK,CAACG,OAAN,EAAhB;AAEA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,KAAN,CAAY;AACzBnB,IAAAA,IAAI,EAAEgB,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmBR,MAAnB,IAA6BZ,IAA7B,GAAoCgB,SAAS,CAACI,KAAV,CAAgBR,MAAhB,EAAwBE,KAAK,CAACO,SAAN,EAAxB,CADjB;AAEzBC,IAAAA,aAAa,EAAE5B,cAAc,CAACoB,KAAK,CAACS,gBAAN,EAAD,EAA2B3B,MAAM,CAACK,iBAAD,EAAoBK,GAApB,CAAN,CAA+BkB,MAA/B,EAA3B,EAAoEZ,MAApE;AAFJ,GAAZ,CAAf;AAKA,MAAIa,SAAS,GAAGb,MAAM,GAAGN,GAAzB;AAEA,SAAOR,YAAY,CAACqB,KAAb,CAAmB;AACxBX,IAAAA,QAAQ,EAAEA,QAAQ,CAACkB,GAAT,CAAahB,GAAb,EAAkBQ,QAAlB,CADc;AAExBS,IAAAA,cAAc,EAAE5B,cAAc,CAACoB,KAAf,CAAqB;AACnCS,MAAAA,YAAY,EAAEH,SADqB;AAEnCI,MAAAA,WAAW,EAAEJ;AAFsB,KAArB;AAFQ,GAAnB,CAAP;AAOD;;AAEDK,MAAM,CAACC,OAAP,GAAiBlC,0BAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n\n  var len = text.length;\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n\n  var newOffset = offset + len;\n\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;"]},"metadata":{},"sourceType":"script"}