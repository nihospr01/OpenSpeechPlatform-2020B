.TH "libosp/afc/afc.h" 3 "Fri Feb 23 2018" "Open Speech Platform" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libosp/afc/afc.h
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAFC_NUM_FRAMES\fP   7"
.br
.RI "Amount of frames required for AFC processing\&. "
.ti -1c
.RI "#define \fBAFC_FILTER_TAP_LEN\fP   192"
.br
.RI "AFC fitler tap length\&. "
.ti -1c
.RI "#define \fBARRAY_SIZE\fP(x)   (sizeof((x)) / sizeof((x)[0]))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBafc_t\fP * \fBAfc\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBAfc\fP \fBafc_init\fP (const float *afc_filter_taps, int afc_filter_tap_len, const float *prefilter_taps, int prefilter_tap_len, const float *band_limited_filter_taps, int band_limited_filter_tap_len, int frame_size, unsigned int adaptation_type)"
.br
.RI "Function to initialize the afc data struct\&. "
.ti -1c
.RI "int \fBafc_update_taps\fP (\fBAfc\fP afc, float *s, float *e, size_t frame_size)"
.br
.RI "Function to update the AFC filter taps\&. i\&.e\&. perform AFC\&. "
.ti -1c
.RI "void \fBafc_get_y_estimated\fP (\fBAfc\fP afc, float *y_est, size_t len)"
.br
.RI "Function to get the estimate of the feedback signal, y_hat(n) "
.ti -1c
.RI "int \fBafc_get_taps\fP (\fBAfc\fP afc, float *taps)"
.br
.RI "Function to get the AFC filter taps\&. "
.ti -1c
.RI "int \fBafc_destroy\fP (\fBAfc\fP afc)"
.br
.RI "Function to close and free the Afc instance\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define AFC_FILTER_TAP_LEN   192"

.PP
AFC fitler tap length\&. 
.SS "#define AFC_NUM_FRAMES   7"

.PP
Amount of frames required for AFC processing\&. 
.SS "#define ARRAY_SIZE(x)   (sizeof((x)) / sizeof((x)[0]))"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBafc_t\fP* \fBAfc\fP"

.SH "Function Documentation"
.PP 
.SS "int afc_destroy (\fBAfc\fP afc)"

.PP
Function to close and free the Afc instance\&. 
.PP
\fBSee also:\fP
.RS 4
\fBafc_t\fP 
.br
.RE
.PP
\fBParameters:\fP
.RS 4
\fIafc\fP The instance of the Afc structure that was returned from afc_init 
.RE
.PP
\fBReturns:\fP
.RS 4
int 0 if successful\&. -1 otherwise 
.RE
.PP

.SS "int afc_get_taps (\fBAfc\fP afc, float * taps)"

.PP
Function to get the AFC filter taps\&. 
.PP
\fBSee also:\fP
.RS 4
\fBafc_t\fP 
.br
.RE
.PP
\fBParameters:\fP
.RS 4
\fIafc\fP The instance of the Afc structure that was returned from afc_init 
.br
\fItaps\fP Pointer to the array that afc filter taps will be written into 
.RE
.PP
\fBReturns:\fP
.RS 4
int AFC filter tap length 
.RE
.PP

.SS "void afc_get_y_estimated (\fBAfc\fP afc, float * y_est, size_t len)"

.PP
Function to get the estimate of the feedback signal, y_hat(n) 
.PP
\fBSee also:\fP
.RS 4
\fBafc_t\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIafc\fP The instance of the Afc structure that was returned from afc_init 
.br
\fIy_est\fP Pointer to the array that estimated feedback signal will be written into 
.br
\fIlen\fP Number of samples of the estimated feedback signal requested 
.RE
.PP

.SS "\fBAfc\fP afc_init (const float * afc_filter_taps, int afc_filter_tap_len, const float * prefilter_taps, int prefilter_tap_len, const float * band_limited_filter_taps, int band_limited_filter_tap_len, int frame_size, unsigned int adaptation_type)"

.PP
Function to initialize the afc data struct\&. Allocates memory to the Afc instance and initialize its parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIafc_filter_taps\fP AFC filter initalization taps, W(z) initialization 
.br
\fIafc_filter_tap_len\fP AFC filter tap length 
.br
\fIprefilter_taps\fP Pre-whitening filter taps, A(z) 
.br
\fIprefilter_tap_len\fP Pre-whitening filter tap length 
.br
\fIband_limited_filter_taps\fP Band-limited filter taps, H(z) 
.br
\fIband_limited_filter_tap_len\fP Band-limited filter tap length 
.br
\fIframe_size\fP Frame size to process 
.br
\fIadaptation_type\fP AFC adaptation type\&. 1 = (FXLMS + PNLMS), 0 = FXLMS 
.RE
.PP
\fBReturns:\fP
.RS 4
Afc Returns the Afc instance/object if memory is succesfully allocated or returns NULL\&. 
.RE
.PP

.SS "int afc_update_taps (\fBAfc\fP afc, float * s, float * e, size_t frame_size)"

.PP
Function to update the AFC filter taps\&. i\&.e\&. perform AFC\&. 
.PP
\fBSee also:\fP
.RS 4
\fBafc_t\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIafc\fP The instance of the Afc structure that was returned from afc_init 
.br
.br
\fIs\fP Pointer to the output signal array of WDRC 
.br
\fIe\fP Pointer to the error signal array 
.br
\fIframe_size\fP Number of samples in the frame to process 
.RE
.PP
\fBReturns:\fP
.RS 4
int -1 for wrong frame size\&. 0 if successful 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Open Speech Platform from the source code\&.
