.TH "libosp/filter/filter.c" 3 "Thu Jun 14 2018" "Open Speech Platform" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libosp/filter/filter.c
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include 'filter\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBfilter_t\fP"
.br
.RI "Structure containing filter information\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBFilter\fP \fBfilter_init\fP (const float *taps, int tap_length)"
.br
.RI "Initializes filer data structure\&. "
.ti -1c
.RI "int \fBfilter_update_taps\fP (\fBFilter\fP obj, float *taps, int tap_length)"
.br
.RI "Updates the taps in the Filter data structure NOTE: If the tap length is not the same as what was passed into filter_init the function will return an error\&. We don't change tap length at runtime just what's loaded into the taps\&. "
.ti -1c
.RI "int \fBfilter_get_taps\fP (\fBFilter\fP obj, float *taps)"
.br
.RI "Returns the taps loaded into the taps element in the Filter data structure\&. "
.ti -1c
.RI "int \fBfilter_get_internal_buffer\fP (\fBFilter\fP obj, float *buf)"
.br
.RI "Returns the internal circular buffer\&. "
.ti -1c
.RI "int \fBfilter_get_delay\fP (\fBFilter\fP obj)"
.br
.RI "returns the delay of the current filter "
.ti -1c
.RI "void \fBDSPF_sp_fircirc\fP (float x[], float h[], float r[], int index, int csize, int nh, size_t nr)"
.br
.ti -1c
.RI "void \fBfilter_proc\fP (\fBFilter\fP obj, float *in, float *out, size_t len)"
.br
.RI "Filters input signal with current filter, and returns output signal\&. "
.ti -1c
.RI "void \fBfilter_flush\fP (\fBFilter\fP obj, float *out)"
.br
.RI "Flushes the internal buffer of the filter\&. When the last frame has been processed, there will still exist some residual data on the internal circular buffer\&. This data would have been used for the next frame's processing, but since we've reached the last frame, it just sits in memory\&. In the case of a file-based, non-realtime test where every sample of the output signal is needed, this can be called after the final frame worth of data\&. It will return <filter's_group_delay> worth of samples that have been processed with the filter\&. "
.ti -1c
.RI "int \fBfilter_destroy\fP (\fBFilter\fP obj)"
.br
.RI "Frees and destroys the filter data structure\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void DSPF_sp_fircirc (float x[], float h[], float r[], int index, int csize, int nh, size_t nr)"

.SS "int filter_destroy (\fBFilter\fP obj)"

.PP
Frees and destroys the filter data structure\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 on success, -1 otherwise 
.RE
.PP

.SS "void filter_flush (\fBFilter\fP obj, float * out)"

.PP
Flushes the internal buffer of the filter\&. When the last frame has been processed, there will still exist some residual data on the internal circular buffer\&. This data would have been used for the next frame's processing, but since we've reached the last frame, it just sits in memory\&. In the case of a file-based, non-realtime test where every sample of the output signal is needed, this can be called after the final frame worth of data\&. It will return <filter's_group_delay> worth of samples that have been processed with the filter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure 
.br
\fIout\fP Output buffer filled with last processed samples 
.RE
.PP

.SS "int filter_get_delay (\fBFilter\fP obj)"

.PP
returns the delay of the current filter 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the group delay, in samples, of the current filter 
.RE
.PP

.SS "int filter_get_internal_buffer (\fBFilter\fP obj, float * buf)"

.PP
Returns the internal circular buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure object 
.br
\fIbuf\fP Buffer that will contain the internal circular buffer's elements
.RE
.PP
\fBReturns:\fP
.RS 4
returns the current index of the circular buffer 
.RE
.PP

.SS "int filter_get_taps (\fBFilter\fP obj, float * taps)"

.PP
Returns the taps loaded into the taps element in the Filter data structure\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure 
.br
\fItaps\fP Will contain the currently loaded filter taps 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the length of the internal filter 
.RE
.PP

.SS "\fBFilter\fP filter_init (const float * taps, int tap_length)"

.PP
Initializes filer data structure\&. 
.PP
\fBParameters:\fP
.RS 4
\fItaps\fP Pointer to filter taps to load into this filter data structure 
.br
\fItap_length\fP Number of taps pointed to by taps
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the allocated filter data structure 
.RE
.PP

.SS "void filter_proc (\fBFilter\fP obj, float * in, float * out, size_t len)"

.PP
Filters input signal with current filter, and returns output signal\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure 
.br
\fIin\fP Input signal 
.br
\fIout\fP Output signal after filtering 
.br
\fIlen\fP The length of the input and output signals (in our implementation, it's one frame size 
.RE
.PP

.SS "int filter_update_taps (\fBFilter\fP obj, float * taps, int tap_length)"

.PP
Updates the taps in the Filter data structure NOTE: If the tap length is not the same as what was passed into filter_init the function will return an error\&. We don't change tap length at runtime just what's loaded into the taps\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP Filter data structure 
.br
\fItaps\fP New taps to load into old taps' place 
.br
\fItap_length\fP Number of taps to load into the taps
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 0 on success, -1 if the tap_length parameter does not match the tap length that was set up in filter_init 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBfilter_init\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Open Speech Platform from the source code\&.
